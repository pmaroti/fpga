ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : basic.asm
Current file: basic.asm

000000r 1               
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.10
000000r 1               
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixed
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               
000000r 1               ; zero page use ..
000000r 1               
000000r 1               LAB_WARM 	= $30		; BASIC warm start entry point
000000r 1               Wrmjpl 		= LAB_WARM+1; BASIC warm start vector jump low byte
000000r 1               Wrmjph 		= LAB_WARM+2; BASIC warm start vector jump high byte
000000r 1               
000000r 1               Usrjmp		= $3A		; USR function JMP address
000000r 1               Usrjpl		= Usrjmp+1	; USR function JMP vector low byte
000000r 1               Usrjph		= Usrjmp+2	; USR function JMP vector high byte
000000r 1               Nullct		= $3D		; nulls output after each line
000000r 1               TPos		= $3E		; BASIC terminal position byte
000000r 1               TWidth		= $3F		; BASIC terminal width byte
000000r 1               Iclim		= $40		; input column limit
000000r 1               Itempl		= $41		; temporary integer low byte
000000r 1               Itemph		= Itempl+1	; temporary integer high byte
000000r 1               
000000r 1               nums_1		= Itempl	; number to bin/hex string convert MSB
000000r 1               nums_2		= nums_1+1	; number to bin/hex string convert
000000r 1               nums_3		= nums_1+2	; number to bin/hex string convert LSB
000000r 1               
000000r 1               Srchc		= $5B		; search character
000000r 1               Temp3		= Srchc		; temp byte used in number routines
000000r 1               Scnquo		= $5C		; scan-between-quotes flag
000000r 1               Asrch		= Scnquo	; alt search character
000000r 1               
000000r 1               XOAw_l		= Srchc		; eXclusive OR, OR and AND word low byte
000000r 1               XOAw_h		= Scnquo	; eXclusive OR, OR and AND word high byte
000000r 1               
000000r 1               Ibptr		= $5D		; input buffer pointer
000000r 1               Dimcnt		= Ibptr		; # of dimensions
000000r 1               Tindx		= Ibptr		; token index
000000r 1               
000000r 1               Defdim		= $5E		; default DIM flag
000000r 1               Dtypef		= $5F		; data type flag, $FF=string, $00=numeric
000000r 1               Oquote		= $60		; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
000000r 1               Gclctd		= $60		; garbage collected flag
000000r 1               Sufnxf		= $61		; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
000000r 1               Imode		= $62		; input mode flag, $00=INPUT, $80=READ
000000r 1               
000000r 1               Cflag		= $63		; comparison evaluation flag
000000r 1               
000000r 1               TabSiz		= $64		; TAB step size (was input flag)
000000r 1               
000000r 1               next_s		= $65		; next descriptor stack address
000000r 1               
000000r 1               				; these two bytes form a word pointer to the item
000000r 1               				; currently on top of the descriptor stack
000000r 1               last_sl		= $66		; last descriptor stack address low byte
000000r 1               last_sh		= $67		; last descriptor stack address high byte (always $00)
000000r 1               
000000r 1               des_sk		= $68		; descriptor stack start address (temp strings)
000000r 1               
000000r 1               ;		= $70		; End of descriptor stack
000000r 1               
000000r 1               ut1_pl		= $71		; utility pointer 1 low byte
000000r 1               ut1_ph		= ut1_pl+1	; utility pointer 1 high byte
000000r 1               ut2_pl		= $73		; utility pointer 2 low byte
000000r 1               ut2_ph		= ut2_pl+1	; utility pointer 2 high byte
000000r 1               
000000r 1               Temp_2		= ut1_pl	; temp byte for block move
000000r 1               
000000r 1               FACt_1		= $75		; FAC temp mantissa1
000000r 1               FACt_2		= FACt_1+1	; FAC temp mantissa2
000000r 1               FACt_3		= FACt_2+1	; FAC temp mantissa3
000000r 1               
000000r 1               dims_l		= FACt_2	; array dimension size low byte
000000r 1               dims_h		= FACt_3	; array dimension size high byte
000000r 1               
000000r 1               TempB		= $78		; temp page 0 byte
000000r 1               
000000r 1               Smeml		= $79		; start of mem low byte		(Start-of-Basic)
000000r 1               Smemh		= Smeml+1	; start of mem high byte	(Start-of-Basic)
000000r 1               Svarl		= $7B		; start of vars low byte	(Start-of-Variables)
000000r 1               Svarh		= Svarl+1	; start of vars high byte	(Start-of-Variables)
000000r 1               Sarryl		= $7D		; var mem end low byte		(Start-of-Arrays)
000000r 1               Sarryh		= Sarryl+1	; var mem end high byte		(Start-of-Arrays)
000000r 1               Earryl		= $7F		; array mem end low byte	(End-of-Arrays)
000000r 1               Earryh		= Earryl+1	; array mem end high byte	(End-of-Arrays)
000000r 1               Sstorl		= $81		; string storage low byte	(String storage (moving down))
000000r 1               Sstorh		= Sstorl+1	; string storage high byte	(String storage (moving down))
000000r 1               Sutill		= $83		; string utility ptr low byte
000000r 1               Sutilh		= Sutill+1	; string utility ptr high byte
000000r 1               Ememl		= $85		; end of mem low byte		(Limit-of-memory)
000000r 1               Ememh		= Ememl+1	; end of mem high byte		(Limit-of-memory)
000000r 1               Clinel		= $87		; current line low byte		(Basic line number)
000000r 1               Clineh		= Clinel+1	; current line high byte	(Basic line number)
000000r 1               Blinel		= $89		; break line low byte		(Previous Basic line number)
000000r 1               Blineh		= Blinel+1	; break line high byte		(Previous Basic line number)
000000r 1               
000000r 1               Cpntrl		= $8B		; continue pointer low byte
000000r 1               Cpntrh		= Cpntrl+1	; continue pointer high byte
000000r 1               
000000r 1               Dlinel		= $8D		; current DATA line low byte
000000r 1               Dlineh		= Dlinel+1	; current DATA line high byte
000000r 1               
000000r 1               Dptrl			= $8F		; DATA pointer low byte
000000r 1               Dptrh			= Dptrl+1	; DATA pointer high byte
000000r 1               
000000r 1               Rdptrl		= $91		; read pointer low byte
000000r 1               Rdptrh		= Rdptrl+1	; read pointer high byte
000000r 1               
000000r 1               Varnm1		= $93		; current var name 1st byte
000000r 1               Varnm2		= Varnm1+1	; current var name 2nd byte
000000r 1               
000000r 1               Cvaral		= $95		; current var address low byte
000000r 1               Cvarah		= Cvaral+1	; current var address high byte
000000r 1               
000000r 1               Frnxtl		= $97		; var pointer for FOR/NEXT low byte
000000r 1               Frnxth		= Frnxtl+1	; var pointer for FOR/NEXT high byte
000000r 1               
000000r 1               Tidx1		= Frnxtl	; temp line index
000000r 1               
000000r 1               Lvarpl		= Frnxtl	; let var pointer low byte
000000r 1               Lvarph		= Frnxth	; let var pointer high byte
000000r 1               
000000r 1               prstk		= $99		; precedence stacked flag
000000r 1               
000000r 1               comp_f		= $9B		; compare function flag, bits 0,1 and 2 used
000000r 1               					; bit 2 set if >
000000r 1               					; bit 1 set if =
000000r 1               					; bit 0 set if <
000000r 1               
000000r 1               func_l		= $9C		; function pointer low byte
000000r 1               func_h		= func_l+1	; function pointer high byte
000000r 1               
000000r 1               garb_l		= func_l	; garbage collection working pointer low byte
000000r 1               garb_h		= func_h	; garbage collection working pointer high byte
000000r 1               
000000r 1               des_2l		= $9E		; string descriptor_2 pointer low byte
000000r 1               des_2h		= des_2l+1	; string descriptor_2 pointer high byte
000000r 1               
000000r 1               g_step		= $A0		; garbage collect step size
000000r 1               
000000r 1               Fnxjmp		= $A1		; jump vector for functions
000000r 1               Fnxjpl		= Fnxjmp+1	; functions jump vector low byte
000000r 1               Fnxjph		= Fnxjmp+2	; functions jump vector high byte
000000r 1               
000000r 1               g_indx		= Fnxjpl	; garbage collect temp index
000000r 1               
000000r 1               FAC2_r		= $A3		; FAC2 rounding byte
000000r 1               
000000r 1               Adatal		= $A4		; array data pointer low byte
000000r 1               Adatah		= Adatal+1	; array data pointer high  byte
000000r 1               
000000r 1               Nbendl		= Adatal	; new block end pointer low byte
000000r 1               Nbendh		= Adatah	; new block end pointer high  byte
000000r 1               
000000r 1               Obendl		= $A6		; old block end pointer low byte
000000r 1               Obendh		= Obendl+1	; old block end pointer high  byte
000000r 1               
000000r 1               numexp		= $A8		; string to float number exponent count
000000r 1               expcnt		= $A9		; string to float exponent count
000000r 1               
000000r 1               numbit		= numexp	; bit count for array element calculations
000000r 1               
000000r 1               numdpf		= $AA		; string to float decimal point flag
000000r 1               expneg		= $AB		; string to float eval exponent -ve flag
000000r 1               
000000r 1               Astrtl		= numdpf	; array start pointer low byte
000000r 1               Astrth		= expneg	; array start pointer high  byte
000000r 1               
000000r 1               Histrl		= numdpf	; highest string low byte
000000r 1               Histrh		= expneg	; highest string high  byte
000000r 1               
000000r 1               Baslnl		= numdpf	; BASIC search line pointer low byte
000000r 1               Baslnh		= expneg	; BASIC search line pointer high  byte
000000r 1               
000000r 1               Fvar_l		= numdpf	; find/found variable pointer low byte
000000r 1               Fvar_h		= expneg	; find/found variable pointer high  byte
000000r 1               
000000r 1               Ostrtl		= numdpf	; old block start pointer low byte
000000r 1               Ostrth		= expneg	; old block start pointer high  byte
000000r 1               
000000r 1               Vrschl		= numdpf	; variable search pointer low byte
000000r 1               Vrschh		= expneg	; variable search pointer high  byte
000000r 1               
000000r 1               FAC1_e		= $AC		; FAC1 exponent
000000r 1               FAC1_1		= FAC1_e+1	; FAC1 mantissa1
000000r 1               FAC1_2		= FAC1_e+2	; FAC1 mantissa2
000000r 1               FAC1_3		= FAC1_e+3	; FAC1 mantissa3
000000r 1               FAC1_s		= FAC1_e+4	; FAC1 sign (b7)
000000r 1               
000000r 1               str_ln		= FAC1_e	; string length
000000r 1               str_pl		= FAC1_1	; string pointer low byte
000000r 1               str_ph		= FAC1_2	; string pointer high byte
000000r 1               
000000r 1               des_pl		= FAC1_2	; string descriptor pointer low byte
000000r 1               des_ph		= FAC1_3	; string descriptor pointer high byte
000000r 1               
000000r 1               mids_l		= FAC1_3	; MID$ string temp length byte
000000r 1               
000000r 1               negnum		= $B1		; string to float eval -ve flag
000000r 1               numcon		= $B1		; series evaluation constant count
000000r 1               
000000r 1               FAC1_o		= $B2		; FAC1 overflow byte
000000r 1               
000000r 1               FAC2_e		= $B3		; FAC2 exponent
000000r 1               FAC2_1		= FAC2_e+1	; FAC2 mantissa1
000000r 1               FAC2_2		= FAC2_e+2	; FAC2 mantissa2
000000r 1               FAC2_3		= FAC2_e+3	; FAC2 mantissa3
000000r 1               FAC2_s		= FAC2_e+4	; FAC2 sign (b7)
000000r 1               
000000r 1               FAC_sc		= $B8		; FAC sign comparison, Acc#1 vs #2
000000r 1               FAC1_r		= $B9		; FAC1 rounding byte
000000r 1               
000000r 1               ssptr_l		= FAC_sc	; string start pointer low byte
000000r 1               ssptr_h		= FAC1_r	; string start pointer high byte
000000r 1               
000000r 1               sdescr		= FAC_sc	; string descriptor pointer
000000r 1               
000000r 1               csidx		= $BA		; line crunch save index
000000r 1               Asptl		= csidx	; array size/pointer low byte
000000r 1               Aspth		= $BB		; array size/pointer high byte
000000r 1               
000000r 1               Btmpl		= Asptl	; BASIC pointer temp low byte
000000r 1               Btmph		= Aspth	; BASIC pointer temp low byte
000000r 1               
000000r 1               Cptrl		= Asptl	; BASIC pointer temp low byte
000000r 1               Cptrh		= Aspth	; BASIC pointer temp low byte
000000r 1               
000000r 1               Sendl		= Asptl	; BASIC pointer temp low byte
000000r 1               Sendh		= Aspth	; BASIC pointer temp low byte
000000r 1               
000000r 1               LAB_IGBY	= $BC		; get next BASIC byte subroutine
000000r 1               
000000r 1               LAB_GBYT	= $C2		; get current BASIC byte subroutine
000000r 1               Bpntrl		= $C3		; BASIC execute (get byte) pointer low byte
000000r 1               Bpntrh		= Bpntrl+1	; BASIC execute (get byte) pointer high byte
000000r 1               
000000r 1               ;		= $D3		; end of get BASIC char subroutine
000000r 1               
000000r 1               Rbyte4		= $D4		; extra PRNG byte
000000r 1               Rbyte1		= Rbyte4+1	; most significant PRNG byte
000000r 1               Rbyte2		= Rbyte4+2	; middle PRNG byte
000000r 1               Rbyte3		= Rbyte4+3	; least significant PRNG byte
000000r 1               
000000r 1               NmiBase		= $D8		; NMI handler enabled/setup/triggered flags
000000r 1               					; bit	function
000000r 1               					; ===	========
000000r 1               					; 7	interrupt enabled
000000r 1               					; 6	interrupt setup
000000r 1               					; 5	interrupt happened
000000r 1               ;		= $D9		; NMI handler addr low byte
000000r 1               ;		= $DA		; NMI handler addr high byte
000000r 1               IrqBase		= $DB		; IRQ handler enabled/setup/triggered flags
000000r 1               ;		= $DC		; IRQ handler addr low byte
000000r 1               ;		= $DD		; IRQ handler addr high byte
000000r 1               
000000r 1               ;		= $DE		; unused
000000r 1               ;		= $DF		; unused
000000r 1               ;		= $E0		; unused
000000r 1               ;		= $E1		; unused
000000r 1               ;		= $E2		; unused
000000r 1               ;		= $E3		; unused
000000r 1               ;		= $E4		; unused
000000r 1               ;		= $E5		; unused
000000r 1               ;		= $E6		; unused
000000r 1               ;		= $E7		; unused
000000r 1               ;		= $E8		; unused
000000r 1               ;		= $E9		; unused
000000r 1               ;		= $EA		; unused
000000r 1               ;		= $EB		; unused
000000r 1               ;		= $EC		; unused
000000r 1               ;		= $ED		; unused
000000r 1               ;		= $EE		; unused
000000r 1               
000000r 1               Decss		= $EF		; number to decimal string start
000000r 1               Decssp1		= Decss+1	; number to decimal string start
000000r 1               
000000r 1               ;		= $FF		; decimal string end
000000r 1               
000000r 1               ; token values needed for BASIC
000000r 1               
000000r 1               ; primary command tokens (can start a statement)
000000r 1               
000000r 1               TK_END		= $80			; END token
000000r 1               TK_FOR		= TK_END+1		; FOR token
000000r 1               TK_NEXT		= TK_FOR+1		; NEXT token
000000r 1               TK_DATA		= TK_NEXT+1		; DATA token
000000r 1               TK_INPUT	= TK_DATA+1		; INPUT token
000000r 1               TK_DIM		= TK_INPUT+1		; DIM token
000000r 1               TK_READ		= TK_DIM+1		; READ token
000000r 1               TK_LET		= TK_READ+1		; LET token
000000r 1               TK_DEC		= TK_LET+1		; DEC token
000000r 1               TK_GOTO		= TK_DEC+1		; GOTO token
000000r 1               TK_RUN		= TK_GOTO+1		; RUN token
000000r 1               TK_IF		= TK_RUN+1		; IF token
000000r 1               TK_RESTORE	= TK_IF+1		; RESTORE token
000000r 1               TK_GOSUB	= TK_RESTORE+1		; GOSUB token
000000r 1               TK_RETIRQ	= TK_GOSUB+1		; RETIRQ token
000000r 1               TK_RETNMI	= TK_RETIRQ+1		; RETNMI token
000000r 1               TK_RETURN	= TK_RETNMI+1		; RETURN token
000000r 1               TK_REM		= TK_RETURN+1		; REM token
000000r 1               TK_STOP		= TK_REM+1		; STOP token
000000r 1               TK_ON		= TK_STOP+1		; ON token
000000r 1               TK_NULL		= TK_ON+1		; NULL token
000000r 1               TK_INC		= TK_NULL+1		; INC token
000000r 1               TK_WAIT		= TK_INC+1		; WAIT token
000000r 1               TK_LOAD		= TK_WAIT+1		; LOAD token
000000r 1               TK_SAVE		= TK_LOAD+1		; SAVE token
000000r 1               TK_DEF		= TK_SAVE+1		; DEF token
000000r 1               TK_POKE		= TK_DEF+1		; POKE token
000000r 1               TK_DOKE		= TK_POKE+1		; DOKE token
000000r 1               TK_CALL		= TK_DOKE+1		; CALL token
000000r 1               TK_DO		= TK_CALL+1		; DO token
000000r 1               TK_LOOP		= TK_DO+1		; LOOP token
000000r 1               TK_PRINT	= TK_LOOP+1		; PRINT token
000000r 1               TK_CONT		= TK_PRINT+1		; CONT token
000000r 1               TK_LIST		= TK_CONT+1		; LIST token
000000r 1               TK_CLEAR	= TK_LIST+1		; CLEAR token
000000r 1               TK_NEW		= TK_CLEAR+1		; NEW token
000000r 1               TK_WIDTH	= TK_NEW+1		; WIDTH token
000000r 1               TK_GET		= TK_WIDTH+1		; GET token
000000r 1               TK_SWAP		= TK_GET+1		; SWAP token
000000r 1               TK_BITSET	= TK_SWAP+1		; BITSET token
000000r 1               TK_BITCLR	= TK_BITSET+1		; BITCLR token
000000r 1               TK_IRQ		= TK_BITCLR+1		; IRQ token
000000r 1               TK_NMI		= TK_IRQ+1		; NMI token
000000r 1               
000000r 1               ; secondary command tokens, can't start a statement
000000r 1               
000000r 1               TK_TAB		= TK_NMI+1		; TAB token
000000r 1               TK_TO		= TK_TAB+1		; TO token
000000r 1               TK_FN		= TK_TO+1		; FN token
000000r 1               TK_SPC		= TK_FN+1		; SPC token
000000r 1               TK_THEN		= TK_SPC+1		; THEN token
000000r 1               TK_NOT		= TK_THEN+1		; NOT token
000000r 1               TK_STEP		= TK_NOT+1		; STEP token
000000r 1               TK_UNTIL	= TK_STEP+1		; UNTIL token
000000r 1               TK_WHILE	= TK_UNTIL+1		; WHILE token
000000r 1               TK_OFF		= TK_WHILE+1		; OFF token
000000r 1               
000000r 1               ; opperator tokens
000000r 1               
000000r 1               TK_PLUS		= TK_OFF+1		; + token
000000r 1               TK_MINUS	= TK_PLUS+1		; - token
000000r 1               TK_MUL		= TK_MINUS+1		; * token
000000r 1               TK_DIV		= TK_MUL+1		; / token
000000r 1               TK_POWER	= TK_DIV+1		; ^ token
000000r 1               TK_AND		= TK_POWER+1		; AND token
000000r 1               TK_EOR		= TK_AND+1		; EOR token
000000r 1               TK_OR		= TK_EOR+1		; OR token
000000r 1               TK_RSHIFT	= TK_OR+1		; RSHIFT token
000000r 1               TK_LSHIFT	= TK_RSHIFT+1		; LSHIFT token
000000r 1               TK_GT		= TK_LSHIFT+1		; > token
000000r 1               TK_EQUAL	= TK_GT+1		; = token
000000r 1               TK_LT		= TK_EQUAL+1		; < token
000000r 1               
000000r 1               ; functions tokens
000000r 1               
000000r 1               TK_SGN		= TK_LT+1		; SGN token
000000r 1               TK_INT		= TK_SGN+1		; INT token
000000r 1               TK_ABS		= TK_INT+1		; ABS token
000000r 1               TK_USR		= TK_ABS+1		; USR token
000000r 1               TK_FRE		= TK_USR+1		; FRE token
000000r 1               TK_POS		= TK_FRE+1		; POS token
000000r 1               TK_SQR		= TK_POS+1		; SQR token
000000r 1               TK_RND		= TK_SQR+1		; RND token
000000r 1               TK_LOG		= TK_RND+1		; LOG token
000000r 1               TK_EXP		= TK_LOG+1		; EXP token
000000r 1               TK_COS		= TK_EXP+1		; COS token
000000r 1               TK_SIN		= TK_COS+1		; SIN token
000000r 1               TK_TAN		= TK_SIN+1		; TAN token
000000r 1               TK_ATN		= TK_TAN+1		; ATN token
000000r 1               TK_PEEK		= TK_ATN+1		; PEEK token
000000r 1               TK_DEEK		= TK_PEEK+1		; DEEK token
000000r 1               TK_SADD		= TK_DEEK+1		; SADD token
000000r 1               TK_LEN		= TK_SADD+1		; LEN token
000000r 1               TK_STRS		= TK_LEN+1		; STR$ token
000000r 1               TK_VAL		= TK_STRS+1		; VAL token
000000r 1               TK_ASC		= TK_VAL+1		; ASC token
000000r 1               TK_UCASES	= TK_ASC+1		; UCASE$ token
000000r 1               TK_LCASES	= TK_UCASES+1		; LCASE$ token
000000r 1               TK_CHRS		= TK_LCASES+1		; CHR$ token
000000r 1               TK_HEXS		= TK_CHRS+1		; HEX$ token
000000r 1               TK_BINS		= TK_HEXS+1		; BIN$ token
000000r 1               TK_BITTST	= TK_BINS+1		; BITTST token
000000r 1               TK_MAX		= TK_BITTST+1		; MAX token
000000r 1               TK_MIN		= TK_MAX+1		; MIN token
000000r 1               TK_PI		= TK_MIN+1		; PI token
000000r 1               TK_TWOPI	= TK_PI+1		; TWOPI token
000000r 1               TK_VPTR		= TK_TWOPI+1		; VARPTR token
000000r 1               TK_LEFTS	= TK_VPTR+1		; LEFT$ token
000000r 1               TK_RIGHTS	= TK_LEFTS+1		; RIGHT$ token
000000r 1               TK_MIDS		= TK_RIGHTS+1		; MID$ token
000000r 1               
000000r 1               ; offsets from a base of X or Y
000000r 1               
000000r 1               PLUS_0		= $00		; X or Y plus 0
000000r 1               PLUS_1		= $01		; X or Y plus 1
000000r 1               PLUS_2		= $02		; X or Y plus 2
000000r 1               PLUS_3		= $03		; X or Y plus 3
000000r 1               
000000r 1               LAB_STAK	= $0100		; stack bottom, no offset
000000r 1               
000000r 1               LAB_SKFE	= LAB_STAK+$FE	; flushed stack address
000000r 1               LAB_SKFF	= LAB_STAK+$FF	; flushed stack address
000000r 1               
000000r 1               ccflag		= $0300		; BASIC CTRL-C flag, 00 = enabled, 01 = dis
000000r 1               ccbyte		= ccflag+1	; BASIC CTRL-C byte
000000r 1               ccnull		= ccbyte+1	; BASIC CTRL-C byte timeout
000000r 1               
000000r 1               VEC_CC		= ccnull+1	; ctrl c check vector
000000r 1               
000000r 1               VEC_IN		= VEC_CC+2	; input vector
000000r 1               VEC_OUT		= VEC_IN+2	; output vector
000000r 1               VEC_LD		= VEC_OUT+2	; load vector
000000r 1               VEC_SV		= VEC_LD+2	; save vector
000000r 1               
000000r 1               IRQ_vec	= 	VEC_SV+2	; IRQ code vector (from monitor)
000000r 1               NMI_vec	= 	IRQ_vec+$0A	; NMI code vector (from monitor)
000000r 1               
000000r 1               ; Ibuffs can now be anywhere in RAM, ensure that the max length is < $80
000000r 1               
000000r 1               Ibuffs		= IRQ_vec+$14
000000r 1               				; start of input buffer after IRQ/NMI code
000000r 1               Ibuffe		= Ibuffs+$47	; end of input buffer
000000r 1               
000000r 1               Ram_base	= $0400	; start of user RAM (set as needed, should be page aligned)
000000r 1               Ram_top		= ini	; end of user RAM+1 (set as needed, should be page aligned)
000000r 1               
000000r 1               ; This start can be changed to suit your system
000000r 1               
000000r 1               	.code	; Starts @ $b700
000000r 1  B0 CA        ini:	.byte	$B0,$CA
000002r 1  rr rr        	.word	boot
000004r 1  rr rr        	.word	boot
000006r 1  DE 27        	.word	fini-boot
000008r 1               ;	init hardware and relocate code
000008r 1               ; Setup system things
000008r 1  20 0F FF     boot:	jsr	$FF0F	;cls
00000Br 1  4C rr rr     	jmp	LAB_COLD
00000Er 1               
00000Er 1               ; BASIC cold start entry point
00000Er 1               
00000Er 1               ; new page 2 initialisation, copy block to ccflag on
00000Er 1               
00000Er 1               LAB_COLD:
00000Er 1               ;----------------------------------------------------------------------
00000Er 1               ;-----------------------------------------------------------------------
00000Er 1  A0 0C        	LDY	#PG2_TABE-PG2_TABS-1
000010r 1               					; byte count-1
000010r 1               LAB_2D13:
000010r 1  B9 rr rr     	LDA	PG2_TABS,Y		; get byte
000013r 1  99 00 03     	STA	ccflag,Y		; store in page 2
000016r 1  88           	DEY				; decrement count
000017r 1  10 F7        	BPL	LAB_2D13		; loop if not done
000019r 1               
000019r 1  A2 FF        	LDX	#$FF			; set byte
00001Br 1  86 88        	STX	Clineh		; set current line high byte (set immediate mode)
00001Dr 1  9A           	TXS				; reset stack pointer
00001Er 1               
00001Er 1  A9 4C        	LDA	#$4C			; code for JMP
000020r 1  85 A1        	STA	Fnxjmp		; save for jump vector for functions
000022r 1               
000022r 1               ; copy block from LAB_2CEE to $00BC - $00D3
000022r 1               
000022r 1  A2 18        	LDX	#StrTab-LAB_2CEE	; set byte count
000024r 1               LAB_2D4E:
000024r 1  BD rr rr     	LDA	LAB_2CEE-1,X	; get byte from table
000027r 1  95 BB        	STA	LAB_IGBY-1,X	; save byte in page zero
000029r 1  CA           	DEX				; decrement count
00002Ar 1  D0 F8        	BNE	LAB_2D4E		; loop if not all done
00002Cr 1               
00002Cr 1               ; copy block from StrTab to $0000 - $0012
00002Cr 1               
00002Cr 1               LAB_GMEM:
00002Cr 1  A2 12        	LDX	#EndTab-StrTab-1	; set byte count-1
00002Er 1               TabLoop:
00002Er 1  BD rr rr     	LDA	StrTab,X		; get byte from table
000031r 1  95 30        	STA	LAB_WARM,x	;PLUS_0,X		; save byte in page zero
000033r 1  CA           	DEX				; decrement count
000034r 1  10 F8        	BPL	TabLoop		; loop if not all done
000036r 1               
000036r 1               ; set-up start values
000036r 1               
000036r 1  A9 00        	LDA	#$00			; clear A
000038r 1  85 D8        	STA	NmiBase		; clear NMI handler enabled flag
00003Ar 1  85 DB        	STA	IrqBase		; clear IRQ handler enabled flag
00003Cr 1  85 B2        	STA	FAC1_o		; clear FAC1 overflow byte
00003Er 1  85 67        	STA	last_sh		; clear descriptor stack top item pointer high byte
000040r 1               
000040r 1  A9 0E        	LDA	#$0E			; set default tab size
000042r 1  85 64        	STA	TabSiz		; save it
000044r 1  A9 03        	LDA	#$03			; set garbage collect step size for descriptor stack
000046r 1  85 A0        	STA	g_step		; save it
000048r 1  A2 68        	LDX	#des_sk		; descriptor stack start
00004Ar 1  86 65        	STX	next_s		; set descriptor stack pointer
00004Cr 1  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
00004Fr 1  A9 rr        	LDA	#<LAB_MSZM		; point to memory size message (low addr)
000051r 1  A0 rr        	LDY	#>LAB_MSZM		; point to memory size message (high addr)
000053r 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000056r 1  20 rr rr     	JSR	LAB_INLN		; print "? " and get BASIC input
000059r 1  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
00005Br 1  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
00005Dr 1  20 C2 00     	JSR	LAB_GBYT		; get last byte back
000060r 1               
000060r 1  D0 1F        	BNE	LAB_2DAA		; branch if not null (user typed something)
000062r 1               
000062r 1  A0 00        	LDY	#$00			; else clear Y
000064r 1               					; character was null so get memory size the hard way
000064r 1               					; we get here with Y=0 and Itempl/h = Ram_base
000064r 1               LAB_2D93:
000064r 1  E6 41        	INC	Itempl		; increment temporary integer low byte
000066r 1  D0 08        	BNE	LAB_2D99		; branch if no overflow
000068r 1               
000068r 1  E6 42        	INC	Itemph		; increment temporary integer high byte
00006Ar 1  A5 42        	LDA	Itemph		; get high byte
00006Cr 1  C9 rr        	CMP	#>Ram_top		; compare with top of RAM+1
00006Er 1  F0 1D        	BEQ	LAB_2DB6		; branch if match (end of user RAM)
000070r 1               
000070r 1               LAB_2D99:
000070r 1  A9 55        	LDA	#$55			; set test byte
000072r 1  91 41        	STA	(Itempl),Y		; save via temporary integer
000074r 1  D1 41        	CMP	(Itempl),Y		; compare via temporary integer
000076r 1  D0 15        	BNE	LAB_2DB6		; branch if fail
000078r 1               
000078r 1  0A           	ASL				; shift test byte left (now $AA)
000079r 1  91 41        	STA	(Itempl),Y		; save via temporary integer
00007Br 1  D1 41        	CMP	(Itempl),Y		; compare via temporary integer
00007Dr 1  F0 E5        	BEQ	LAB_2D93		; if ok go do next byte
00007Fr 1               
00007Fr 1  D0 0C        	BNE	LAB_2DB6		; branch if fail
000081r 1               
000081r 1               LAB_2DAA:
000081r 1  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
000084r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000086r 1  C9 98        	CMP	#$98			; compare with exponent = 2^24
000088r 1  B0 A2        	BCS	LAB_GMEM		; if too large go try again
00008Ar 1               
00008Ar 1  20 rr rr     	JSR	LAB_F2FU		; save integer part of FAC1 in temporary integer
00008Dr 1               					; (no range check)
00008Dr 1               
00008Dr 1               LAB_2DB6:
00008Dr 1  A5 41        	LDA	Itempl		; get temporary integer low byte
00008Fr 1  A4 42        	LDY	Itemph		; get temporary integer high byte
000091r 1  C0 01        	CPY	#<Ram_base+1	; compare with start of RAM+$100 high byte
000093r 1  90 97        	BCC	LAB_GMEM		; if too small go try again
000095r 1               
000095r 1               
000095r 1               ; uncomment these lines if you want to check on the high limit of memory. Note if
000095r 1               ; Ram_top is set too low then this will fail. default is ignore it and assume the
000095r 1               ; users know what they're doing!
000095r 1               
000095r 1               ;	CPY	#>Ram_top		; compare with top of RAM high byte
000095r 1               ;	BCC	MEM_OK		; branch if < RAM top
000095r 1               
000095r 1               ;	BNE	LAB_GMEM		; if too large go try again
000095r 1               					; else was = so compare low bytes
000095r 1               ;	CMP	#<Ram_top		; compare with top of RAM low byte
000095r 1               ;	BEQ	MEM_OK		; branch if = RAM top
000095r 1               
000095r 1               ;	BCS	LAB_GMEM		; if too large go try again
000095r 1               
000095r 1               ;MEM_OK
000095r 1  85 85        	STA	Ememl			; set end of mem low byte
000097r 1  84 86        	STY	Ememh			; set end of mem high byte
000099r 1  85 81        	STA	Sstorl		; set bottom of string space low byte
00009Br 1  84 82        	STY	Sstorh		; set bottom of string space high byte
00009Dr 1               
00009Dr 1  A0 00        	LDY	#<Ram_base		; set start addr low byte
00009Fr 1  A2 04        	LDX	#>Ram_base		; set start addr high byte
0000A1r 1  84 79        	STY	Smeml			; save start of mem low byte
0000A3r 1  86 7A        	STX	Smemh			; save start of mem high byte
0000A5r 1               
0000A5r 1               ; this line is only needed if Ram_base is not $xx00
0000A5r 1               
0000A5r 1               ;	LDY	#$00			; clear Y
0000A5r 1  98           	TYA				; clear A
0000A6r 1  91 79        	STA	(Smeml),Y		; clear first byte
0000A8r 1  E6 79        	INC	Smeml			; increment start of mem low byte
0000AAr 1               
0000AAr 1               ; these two lines are only needed if Ram_base is $xxFF
0000AAr 1               
0000AAr 1               ;	BNE	LAB_2E05		; branch if no rollover
0000AAr 1               
0000AAr 1               ;	INC	Smemh			; increment start of mem high byte
0000AAr 1               LAB_2E05:
0000AAr 1  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
0000ADr 1  20 rr rr     	JSR	LAB_1463		; do "NEW" and "CLEAR"
0000B0r 1  A5 85        	LDA	Ememl			; get end of mem low byte
0000B2r 1  38           	SEC				; set carry for subtract
0000B3r 1  E5 79        	SBC	Smeml			; subtract start of mem low byte
0000B5r 1  AA           	TAX				; copy to X
0000B6r 1  A5 86        	LDA	Ememh			; get end of mem high byte
0000B8r 1  E5 7A        	SBC	Smemh			; subtract start of mem high byte
0000BAr 1  20 rr rr     	JSR	LAB_295E		; print XA as unsigned integer (bytes free)
0000BDr 1  A9 rr        	LDA	#<LAB_SMSG		; point to sign-on message (low addr)
0000BFr 1  A0 rr        	LDY	#>LAB_SMSG		; point to sign-on message (high addr)
0000C1r 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
0000C4r 1  A9 rr        	LDA	#<LAB_1274		; warm start vector low byte
0000C6r 1  A0 rr        	LDY	#>LAB_1274		; warm start vector high byte
0000C8r 1  85 31        	STA	Wrmjpl		; save warm start vector low byte
0000CAr 1  84 32        	STY	Wrmjph		; save warm start vector high byte
0000CCr 1  6C 31 00     	JMP	(Wrmjpl)		; go do warm start
0000CFr 1               
0000CFr 1               ; open up space in memory
0000CFr 1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
0000CFr 1               
0000CFr 1               ; Nbendl,Nbendh - new block end address (A/Y)
0000CFr 1               ; Obendl,Obendh - old block end address
0000CFr 1               ; Ostrtl,Ostrth - old block start address
0000CFr 1               
0000CFr 1               ; returns with ..
0000CFr 1               
0000CFr 1               ; Nbendl,Nbendh - new block start address (high byte - $100)
0000CFr 1               ; Obendl,Obendh - old block start address (high byte - $100)
0000CFr 1               ; Ostrtl,Ostrth - old block start address (unchanged)
0000CFr 1               
0000CFr 1               LAB_11CF:
0000CFr 1  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
0000D2r 1               					; addr to check is in AY (low/high)
0000D2r 1  85 7F        	STA	Earryl		; save new array mem end low byte
0000D4r 1  84 80        	STY	Earryh		; save new array mem end high byte
0000D6r 1               
0000D6r 1               ; open up space in memory
0000D6r 1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
0000D6r 1               ; don't set array end
0000D6r 1               
0000D6r 1               LAB_11D6:
0000D6r 1  38           	SEC				; set carry for subtract
0000D7r 1  A5 A6        	LDA	Obendl		; get block end low byte
0000D9r 1  E5 AA        	SBC	Ostrtl		; subtract block start low byte
0000DBr 1  A8           	TAY				; copy MOD(block length/$100) byte to Y
0000DCr 1  A5 A7        	LDA	Obendh		; get block end high byte
0000DEr 1  E5 AB        	SBC	Ostrth		; subtract block start high byte
0000E0r 1  AA           	TAX				; copy block length high byte to X
0000E1r 1  E8           	INX				; +1 to allow for count=0 exit
0000E2r 1  98           	TYA				; copy block length low byte to A
0000E3r 1  F0 24        	BEQ	LAB_120A		; branch if length low byte=0
0000E5r 1               
0000E5r 1               					; block is (X-1)*256+Y bytes, do the Y bytes first
0000E5r 1               
0000E5r 1  38           	SEC				; set carry for add + 1, two's complement
0000E6r 1  49 FF        	EOR	#$FF			; invert low byte for subtract
0000E8r 1  65 A6        	ADC	Obendl		; add block end low byte
0000EAr 1               
0000EAr 1  85 A6        	STA	Obendl		; save corrected old block end low byte
0000ECr 1  B0 03        	BCS	LAB_11F3		; branch if no underflow
0000EEr 1               
0000EEr 1  C6 A7        	DEC	Obendh		; else decrement block end high byte
0000F0r 1  38           	SEC				; set carry for add + 1, two's complement
0000F1r 1               LAB_11F3:
0000F1r 1  98           	TYA				; get MOD(block length/$100) byte
0000F2r 1  49 FF        	EOR	#$FF			; invert low byte for subtract
0000F4r 1  65 A4        	ADC	Nbendl		; add destination end low byte
0000F6r 1  85 A4        	STA	Nbendl		; save modified new block end low byte
0000F8r 1  B0 08        	BCS	LAB_1203		; branch if no underflow
0000FAr 1               
0000FAr 1  C6 A5        	DEC	Nbendh		; else decrement block end high byte
0000FCr 1  90 04        	BCC	LAB_1203		; branch always
0000FEr 1               
0000FEr 1               LAB_11FF:
0000FEr 1  B1 A6        	LDA	(Obendl),Y		; get byte from source
000100r 1  91 A4        	STA	(Nbendl),Y		; copy byte to destination
000102r 1               LAB_1203:
000102r 1  88           	DEY				; decrement index
000103r 1  D0 F9        	BNE	LAB_11FF		; loop until Y=0
000105r 1               
000105r 1               					; now do Y=0 indexed byte
000105r 1  B1 A6        	LDA	(Obendl),Y		; get byte from source
000107r 1  91 A4        	STA	(Nbendl),Y		; save byte to destination
000109r 1               LAB_120A:
000109r 1  C6 A7        	DEC	Obendh		; decrement source pointer high byte
00010Br 1  C6 A5        	DEC	Nbendh		; decrement destination pointer high byte
00010Dr 1  CA           	DEX				; decrement block count
00010Er 1  D0 F2        	BNE	LAB_1203		; loop until count = $0
000110r 1               
000110r 1  60           	RTS
000111r 1               
000111r 1               ; check room on stack for A bytes
000111r 1               ; stack too deep? do OM error
000111r 1               
000111r 1               LAB_1212:
000111r 1  85 78        	STA	TempB			; save result in temp byte
000113r 1  BA           	TSX				; copy stack
000114r 1  E4 78        	CPX	TempB			; compare new "limit" with stack
000116r 1  90 30        	BCC	LAB_OMER		; if stack < limit do "Out of memory" error then warm start
000118r 1               
000118r 1  60           	RTS
000119r 1               
000119r 1               ; check available memory, "Out of memory" error if no room
000119r 1               ; addr to check is in AY (low/high)
000119r 1               
000119r 1               LAB_121F:
000119r 1  C4 82        	CPY	Sstorh		; compare bottom of string mem high byte
00011Br 1  90 2A        	BCC	LAB_124B		; if less then exit (is ok)
00011Dr 1               
00011Dr 1  D0 04        	BNE	LAB_1229		; skip next test if greater (tested <)
00011Fr 1               
00011Fr 1               					; high byte was =, now do low byte
00011Fr 1  C5 81        	CMP	Sstorl		; compare with bottom of string mem low byte
000121r 1  90 24        	BCC	LAB_124B		; if less then exit (is ok)
000123r 1               
000123r 1               					; addr is > string storage ptr (oops!)
000123r 1               LAB_1229:
000123r 1  48           	PHA				; push addr low byte
000124r 1  A2 08        	LDX	#$08			; set index to save Adatal to expneg inclusive
000126r 1  98           	TYA				; copy addr high byte (to push on stack)
000127r 1               
000127r 1               					; save misc numeric work area
000127r 1               LAB_122D:
000127r 1  48           	PHA				; push byte
000128r 1  B5 A3        	LDA	Adatal-1,X		; get byte from Adatal to expneg ( ,$00 not pushed)
00012Ar 1  CA           	DEX				; decrement index
00012Br 1  10 FA        	BPL	LAB_122D		; loop until all done
00012Dr 1               
00012Dr 1  20 rr rr     	JSR	LAB_GARB		; garbage collection routine
000130r 1               
000130r 1               					; restore misc numeric work area
000130r 1  A2 00        	LDX	#$00			; clear the index to restore bytes
000132r 1               LAB_1238:
000132r 1  68           	PLA				; pop byte
000133r 1  95 A4        	STA	Adatal,X		; save byte to Adatal to expneg
000135r 1  E8           	INX				; increment index
000136r 1  E0 08        	CPX	#$08			; compare with end + 1
000138r 1  30 F8        	BMI	LAB_1238		; loop if more to do
00013Ar 1               
00013Ar 1  68           	PLA				; pop addr high byte
00013Br 1  A8           	TAY				; copy back to Y
00013Cr 1  68           	PLA				; pop addr low byte
00013Dr 1  C4 82        	CPY	Sstorh		; compare bottom of string mem high byte
00013Fr 1  90 06        	BCC	LAB_124B		; if less then exit (is ok)
000141r 1               
000141r 1  D0 05        	BNE	LAB_OMER		; if greater do "Out of memory" error then warm start
000143r 1               
000143r 1               					; high byte was =, now do low byte
000143r 1  C5 81        	CMP	Sstorl		; compare with bottom of string mem low byte
000145r 1  B0 01        	BCS	LAB_OMER		; if >= do "Out of memory" error then warm start
000147r 1               
000147r 1               					; ok exit, carry clear
000147r 1               LAB_124B:
000147r 1  60           	RTS
000148r 1               
000148r 1               ; do "Out of memory" error then warm start
000148r 1               
000148r 1               LAB_OMER:
000148r 1  A2 0C        	LDX	#$0C			; error code $0C ("Out of memory" error)
00014Ar 1               
00014Ar 1               ; do error #X, then warm start
00014Ar 1               
00014Ar 1               LAB_XERR:
00014Ar 1  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
00014Dr 1               
00014Dr 1  BD rr rr     	LDA	LAB_BAER,X		; get error message pointer low byte
000150r 1  BC rr rr     	LDY	LAB_BAER+1,X	; get error message pointer high byte
000153r 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000156r 1               
000156r 1  20 rr rr     	JSR	LAB_1491		; flush stack and clear continue flag
000159r 1  A9 rr        	LDA	#<LAB_EMSG		; point to " Error" low addr
00015Br 1  A0 rr        	LDY	#>LAB_EMSG		; point to " Error" high addr
00015Dr 1               LAB_1269:
00015Dr 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000160r 1  A4 88        	LDY	Clineh		; get current line high byte
000162r 1  C8           	INY				; increment it
000163r 1  F0 03        	BEQ	LAB_1274		; go do warm start (was immediate mode)
000165r 1               
000165r 1               					; else print line number
000165r 1  20 rr rr     	JSR	LAB_2953		; print " in line [LINE #]"
000168r 1               
000168r 1               ; BASIC warm start entry point
000168r 1               ; wait for Basic command
000168r 1               
000168r 1               LAB_1274:
000168r 1               					; clear ON IRQ/NMI bytes
000168r 1  A9 00        	LDA	#$00			; clear A
00016Ar 1  85 DB        	STA	IrqBase		; clear enabled byte
00016Cr 1  85 D8        	STA	NmiBase		; clear enabled byte
00016Er 1  A9 rr        	LDA	#<LAB_RMSG		; point to "Ready" message low byte
000170r 1  A0 rr        	LDY	#>LAB_RMSG		; point to "Ready" message high byte
000172r 1               
000172r 1  20 rr rr     	JSR	LAB_18C3		; go do print string
000175r 1               
000175r 1               ; wait for Basic command (no "Ready")
000175r 1               
000175r 1               LAB_127D:
000175r 1  20 rr rr     	JSR	LAB_1357		; call for BASIC input
000178r 1               LAB_1280:
000178r 1  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
00017Ar 1  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
00017Cr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
00017Fr 1  F0 F4        	BEQ	LAB_127D		; loop while null
000181r 1               
000181r 1               ; got to interpret input line now ..
000181r 1               
000181r 1  A2 FF        	LDX	#$FF			; current line to null value
000183r 1  86 88        	STX	Clineh		; set current line high byte
000185r 1  90 06        	BCC	LAB_1295		; branch if numeric character (handle new BASIC line)
000187r 1               
000187r 1               					; no line number .. immediate mode
000187r 1  20 rr rr     	JSR	LAB_13A6		; crunch keywords into Basic tokens
00018Ar 1  4C rr rr     	JMP	LAB_15F6		; go scan and interpret code
00018Dr 1               
00018Dr 1               ; handle new BASIC line
00018Dr 1               
00018Dr 1               LAB_1295:
00018Dr 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
000190r 1  20 rr rr     	JSR	LAB_13A6		; crunch keywords into Basic tokens
000193r 1  84 5D        	STY	Ibptr			; save index pointer to end of crunched line
000195r 1  20 rr rr     	JSR	LAB_SSLN		; search BASIC for temp integer line number
000198r 1  90 44        	BCC	LAB_12E6		; branch if not found
00019Ar 1               
00019Ar 1               					; aroooogah! line # already exists! delete it
00019Ar 1  A0 01        	LDY	#$01			; set index to next line pointer high byte
00019Cr 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
00019Er 1  85 72        	STA	ut1_ph		; save it
0001A0r 1  A5 7B        	LDA	Svarl			; get start of vars low byte
0001A2r 1  85 71        	STA	ut1_pl		; save it
0001A4r 1  A5 AB        	LDA	Baslnh		; get found line pointer high byte
0001A6r 1  85 74        	STA	ut2_ph		; save it
0001A8r 1  A5 AA        	LDA	Baslnl		; get found line pointer low byte
0001AAr 1  88           	DEY				; decrement index
0001ABr 1  F1 AA        	SBC	(Baslnl),Y		; subtract next line pointer low byte
0001ADr 1  18           	CLC				; clear carry for add
0001AEr 1  65 7B        	ADC	Svarl			; add start of vars low byte
0001B0r 1  85 7B        	STA	Svarl			; save new start of vars low byte
0001B2r 1  85 73        	STA	ut2_pl		; save destination pointer low byte
0001B4r 1  A5 7C        	LDA	Svarh			; get start of vars high byte
0001B6r 1  69 FF        	ADC	#$FF			; -1 + carry
0001B8r 1  85 7C        	STA	Svarh			; save start of vars high byte
0001BAr 1  E5 AB        	SBC	Baslnh		; subtract found line pointer high byte
0001BCr 1  AA           	TAX				; copy to block count
0001BDr 1  38           	SEC				; set carry for subtract
0001BEr 1  A5 AA        	LDA	Baslnl		; get found line pointer low byte
0001C0r 1  E5 7B        	SBC	Svarl			; subtract start of vars low byte
0001C2r 1  A8           	TAY				; copy to bytes in first block count
0001C3r 1  B0 03        	BCS	LAB_12D0		; branch if overflow
0001C5r 1               
0001C5r 1  E8           	INX				; increment block count (correct for =0 loop exit)
0001C6r 1  C6 74        	DEC	ut2_ph		; decrement destination high byte
0001C8r 1               LAB_12D0:
0001C8r 1  18           	CLC				; clear carry for add
0001C9r 1  65 71        	ADC	ut1_pl		; add source pointer low byte
0001CBr 1  90 03        	BCC	LAB_12D8		; branch if no overflow
0001CDr 1               
0001CDr 1  C6 72        	DEC	ut1_ph		; else decrement source pointer high byte
0001CFr 1  18           	CLC				; clear carry
0001D0r 1               
0001D0r 1               					; close up memory to delete old line
0001D0r 1               LAB_12D8:
0001D0r 1  B1 71        	LDA	(ut1_pl),Y		; get byte from source
0001D2r 1  91 73        	STA	(ut2_pl),Y		; copy to destination
0001D4r 1  C8           	INY				; increment index
0001D5r 1  D0 F9        	BNE	LAB_12D8		; while <> 0 do this block
0001D7r 1               
0001D7r 1  E6 72        	INC	ut1_ph		; increment source pointer high byte
0001D9r 1  E6 74        	INC	ut2_ph		; increment destination pointer high byte
0001DBr 1  CA           	DEX				; decrement block count
0001DCr 1  D0 F2        	BNE	LAB_12D8		; loop until all done
0001DEr 1               
0001DEr 1               					; got new line in buffer and no existing same #
0001DEr 1               LAB_12E6:
0001DEr 1  AD 21 03     	LDA	Ibuffs		; get byte from start if input buffer
0001E1r 1  F0 3F        	BEQ	LAB_1319		; if null line just go flush stack/vars and exit
0001E3r 1               
0001E3r 1               					; got new line and it isn't empty line
0001E3r 1  A5 85        	LDA	Ememl			; get end of mem low byte
0001E5r 1  A4 86        	LDY	Ememh			; get end of mem high byte
0001E7r 1  85 81        	STA	Sstorl		; set bottom of string space low byte
0001E9r 1  84 82        	STY	Sstorh		; set bottom of string space high byte
0001EBr 1  A5 7B        	LDA	Svarl			; get start of vars low byte	(end of BASIC)
0001EDr 1  85 A6        	STA	Obendl		; save old block end low byte
0001EFr 1  A4 7C        	LDY	Svarh			; get start of vars high byte	(end of BASIC)
0001F1r 1  84 A7        	STY	Obendh		; save old block end high byte
0001F3r 1  65 5D        	ADC	Ibptr			; add input buffer pointer	(also buffer length)
0001F5r 1  90 01        	BCC	LAB_1301		; branch if no overflow from add
0001F7r 1               
0001F7r 1  C8           	INY				; else increment high byte
0001F8r 1               LAB_1301:
0001F8r 1  85 A4        	STA	Nbendl		; save new block end low byte	(move to, low byte)
0001FAr 1  84 A5        	STY	Nbendh		; save new block end high byte
0001FCr 1  20 rr rr     	JSR	LAB_11CF		; open up space in memory
0001FFr 1               					; old start pointer Ostrtl,Ostrth set by the find line call
0001FFr 1  A5 7F        	LDA	Earryl		; get array mem end low byte
000201r 1  A4 80        	LDY	Earryh		; get array mem end high byte
000203r 1  85 7B        	STA	Svarl			; save start of vars low byte
000205r 1  84 7C        	STY	Svarh			; save start of vars high byte
000207r 1  A4 5D        	LDY	Ibptr			; get input buffer pointer	(also buffer length)
000209r 1  88           	DEY				; adjust for loop type
00020Ar 1               LAB_1311:
00020Ar 1  B9 1D 03     	LDA	Ibuffs-4,Y		; get byte from crunched line
00020Dr 1  91 AA        	STA	(Baslnl),Y		; save it to program memory
00020Fr 1  88           	DEY				; decrement count
000210r 1  C0 03        	CPY	#$03			; compare with first byte-1
000212r 1  D0 F6        	BNE	LAB_1311		; continue while count <> 3
000214r 1               
000214r 1  A5 42        	LDA	Itemph		; get line # high byte
000216r 1  91 AA        	STA	(Baslnl),Y		; save it to program memory
000218r 1  88           	DEY				; decrement count
000219r 1  A5 41        	LDA	Itempl		; get line # low byte
00021Br 1  91 AA        	STA	(Baslnl),Y		; save it to program memory
00021Dr 1  88           	DEY				; decrement count
00021Er 1  A9 FF        	LDA	#$FF			; set byte to allow chain rebuild. if you didn't set this
000220r 1               					; byte then a zero already here would stop the chain rebuild
000220r 1               					; as it would think it was the [EOT] marker.
000220r 1  91 AA        	STA	(Baslnl),Y		; save it to program memory
000222r 1               
000222r 1               LAB_1319:
000222r 1  20 rr rr     	JSR	LAB_1477		; reset execution to start, clear vars and flush stack
000225r 1  A6 79        	LDX	Smeml			; get start of mem low byte
000227r 1  A5 7A        	LDA	Smemh			; get start of mem high byte
000229r 1  A0 01        	LDY	#$01			; index to high byte of next line pointer
00022Br 1               LAB_1325:
00022Br 1  86 71        	STX	ut1_pl		; set line start pointer low byte
00022Dr 1  85 72        	STA	ut1_ph		; set line start pointer high byte
00022Fr 1  B1 71        	LDA	(ut1_pl),Y		; get it
000231r 1  F0 18        	BEQ	LAB_133E		; exit if end of program
000233r 1               
000233r 1               ; rebuild chaining of Basic lines
000233r 1               
000233r 1  A0 04        	LDY	#$04			; point to first code byte of line
000235r 1               					; there is always 1 byte + [EOL] as null entries are deleted
000235r 1               LAB_1330:
000235r 1  C8           	INY				; next code byte
000236r 1  B1 71        	LDA	(ut1_pl),Y		; get byte
000238r 1  D0 FB        	BNE	LAB_1330		; loop if not [EOL]
00023Ar 1               
00023Ar 1  38           	SEC				; set carry for add + 1
00023Br 1  98           	TYA				; copy end index
00023Cr 1  65 71        	ADC	ut1_pl		; add to line start pointer low byte
00023Er 1  AA           	TAX				; copy to X
00023Fr 1  A0 00        	LDY	#$00			; clear index, point to this line's next line pointer
000241r 1  91 71        	STA	(ut1_pl),Y		; set next line pointer low byte
000243r 1  98           	TYA				; clear A
000244r 1  65 72        	ADC	ut1_ph		; add line start pointer high byte + carry
000246r 1  C8           	INY				; increment index to high byte
000247r 1  91 71        	STA	(ut1_pl),Y		; save next line pointer low byte
000249r 1  90 E0        	BCC	LAB_1325		; go do next line, branch always, carry clear
00024Br 1               
00024Br 1               
00024Br 1               LAB_133E:
00024Br 1  4C rr rr     	JMP	LAB_127D		; else we just wait for Basic command, no "Ready"
00024Er 1               
00024Er 1               ; print "? " and get BASIC input
00024Er 1               
00024Er 1               LAB_INLN:
00024Er 1  20 rr rr     	JSR	LAB_18E3		; print "?" character
000251r 1  20 rr rr     	JSR	LAB_18E0		; print " "
000254r 1  D0 05        	BNE	LAB_1357		; call for BASIC input and return
000256r 1               
000256r 1               ; receive line from keyboard
000256r 1               
000256r 1               					; $08 as delete key (BACKSPACE on standard keyboard)
000256r 1               LAB_134B:
000256r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
000259r 1  CA           	DEX				; decrement the buffer counter (delete)
00025Ar 1  2C           	.byte	$2C			; make LDX into BIT abs
00025Br 1               
00025Br 1               ; call for BASIC input (main entry point)
00025Br 1               
00025Br 1               LAB_1357:
00025Br 1  A2 00        	LDX	#$00			; clear BASIC line buffer pointer
00025Dr 1               LAB_1359:
00025Dr 1  20 rr rr     	JSR	V_INPT		; call scan input device
000260r 1  90 FB        	BCC	LAB_1359		; loop if no byte
000262r 1               
000262r 1  F0 F9        	BEQ	LAB_1359		; loop until valid input (ignore NULLs)
000264r 1               
000264r 1  C9 07        	CMP	#$07			; compare with [BELL]
000266r 1  F0 10        	BEQ	LAB_1378		; branch if [BELL]
000268r 1               
000268r 1  C9 0D        	CMP	#$0D			; compare with [CR]
00026Ar 1  F0 19        	BEQ	LAB_1384		; do CR/LF exit if [CR]
00026Cr 1               
00026Cr 1  E0 00        	CPX	#$00			; compare pointer with $00
00026Er 1  D0 04        	BNE	LAB_1374		; branch if not empty
000270r 1               
000270r 1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
000270r 1               
000270r 1  C9 21        	CMP	#$21			; compare with [SP]+1
000272r 1  90 E9        	BCC	LAB_1359		; if < ignore character
000274r 1               
000274r 1               LAB_1374:
000274r 1  C9 08        	CMP	#$08			; compare with [BACKSPACE] (delete last character)
000276r 1  F0 DE        	BEQ	LAB_134B		; go delete last character
000278r 1               
000278r 1               LAB_1378:
000278r 1  E0 47        	CPX	#Ibuffe-Ibuffs	; compare character count with max
00027Ar 1  B0 0C        	BCS	LAB_138E		; skip store and do [BELL] if buffer full
00027Cr 1               
00027Cr 1  9D 21 03     	STA	Ibuffs,X		; else store in buffer
00027Fr 1  E8           	INX				; increment pointer
000280r 1               LAB_137F:
000280r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
000283r 1  D0 D8        	BNE	LAB_1359		; always loop for next character
000285r 1               
000285r 1               LAB_1384:
000285r 1  4C rr rr     	JMP	LAB_1866		; do CR/LF exit to BASIC
000288r 1               
000288r 1               ; announce buffer full
000288r 1               
000288r 1               LAB_138E:
000288r 1  A9 07        	LDA	#$07			; [BELL] character into A
00028Ar 1  D0 F4        	BNE	LAB_137F		; go print the [BELL] but ignore input character
00028Cr 1               					; branch always
00028Cr 1               
00028Cr 1               ; crunch keywords into Basic tokens
00028Cr 1               ; position independent buffer version ..
00028Cr 1               ; faster, dictionary search version ....
00028Cr 1               
00028Cr 1               LAB_13A6:
00028Cr 1  A0 FF        	LDY	#$FF			; set save index (makes for easy math later)
00028Er 1               
00028Er 1  38           	SEC				; set carry for subtract
00028Fr 1  A5 C3        	LDA	Bpntrl		; get basic execute pointer low byte
000291r 1  E9 21        	SBC	#<Ibuffs		; subtract input buffer start pointer
000293r 1  AA           	TAX				; copy result to X (index past line # if any)
000294r 1               
000294r 1  86 60        	STX	Oquote		; clear open quote/DATA flag
000296r 1               LAB_13AC:
000296r 1  BD 21 03     	LDA	Ibuffs,X		; get byte from input buffer
000299r 1  F0 51        	BEQ	LAB_13EC		; if null save byte then exit
00029Br 1               
00029Br 1  C9 5F        	CMP	#'_'			; compare with "_"
00029Dr 1  B0 4D        	BCS	LAB_13EC		; if >= go save byte then continue crunching
00029Fr 1               
00029Fr 1  C9 3C        	CMP	#'<'			; compare with "<"
0002A1r 1  B0 0E        	BCS	LAB_13CC		; if >= go crunch now
0002A3r 1               
0002A3r 1  C9 30        	CMP	#'0'			; compare with "0"
0002A5r 1  B0 45        	BCS	LAB_13EC		; if >= go save byte then continue crunching
0002A7r 1               
0002A7r 1  85 5C        	STA	Scnquo		; save buffer byte as search character
0002A9r 1  C9 22        	CMP	#$22			; is it quote character?
0002ABr 1  F0 61        	BEQ	LAB_1410		; branch if so (copy quoted string)
0002ADr 1               
0002ADr 1  C9 2A        	CMP	#'*'			; compare with "*"
0002AFr 1  90 3B        	BCC	LAB_13EC		; if < go save byte then continue crunching
0002B1r 1               
0002B1r 1               					; else crunch now
0002B1r 1               LAB_13CC:
0002B1r 1  24 60        	BIT	Oquote		; get open quote/DATA token flag
0002B3r 1  70 37        	BVS	LAB_13EC		; branch if b6 of Oquote set (was DATA)
0002B5r 1               					; go save byte then continue crunching
0002B5r 1               
0002B5r 1  86 78        	STX	TempB			; save buffer read index
0002B7r 1  84 BA        	STY	csidx			; copy buffer save index
0002B9r 1  A0 rr        	LDY	#<TAB_1STC		; get keyword first character table low address
0002BBr 1  84 73        	STY	ut2_pl		; save pointer low byte
0002BDr 1  A0 rr        	LDY	#>TAB_1STC		; get keyword first character table high address
0002BFr 1  84 74        	STY	ut2_ph		; save pointer high byte
0002C1r 1  A0 00        	LDY	#$00			; clear table pointer
0002C3r 1               
0002C3r 1               LAB_13D0:
0002C3r 1  D1 73        	CMP	(ut2_pl),Y		; compare with keyword first character table byte
0002C5r 1  F0 05        	BEQ	LAB_13D1		; go do word_table_chr if match
0002C7r 1               
0002C7r 1  90 21        	BCC	LAB_13EA		; if < keyword first character table byte go restore
0002C9r 1               					; Y and save to crunched
0002C9r 1               
0002C9r 1  C8           	INY				; else increment pointer
0002CAr 1  D0 F7        	BNE	LAB_13D0		; and loop (branch always)
0002CCr 1               
0002CCr 1               ; have matched first character of some keyword
0002CCr 1               
0002CCr 1               LAB_13D1:
0002CCr 1  98           	TYA				; copy matching index
0002CDr 1  0A           	ASL				; *2 (bytes per pointer)
0002CEr 1  AA           	TAX				; copy to new index
0002CFr 1  BD rr rr     	LDA	TAB_CHRT,X		; get keyword table pointer low byte
0002D2r 1  85 73        	STA	ut2_pl		; save pointer low byte
0002D4r 1  BD rr rr     	LDA	TAB_CHRT+1,X	; get keyword table pointer high byte
0002D7r 1  85 74        	STA	ut2_ph		; save pointer high byte
0002D9r 1               
0002D9r 1  A0 FF        	LDY	#$FF			; clear table pointer (make -1 for start)
0002DBr 1               
0002DBr 1  A6 78        	LDX	TempB			; restore buffer read index
0002DDr 1               
0002DDr 1               LAB_13D6:
0002DDr 1  C8           	INY				; next table byte
0002DEr 1  B1 73        	LDA	(ut2_pl),Y		; get byte from table
0002E0r 1               LAB_13D8:
0002E0r 1  30 08        	BMI	LAB_13EA		; all bytes matched so go save token
0002E2r 1               
0002E2r 1  E8           	INX				; next buffer byte
0002E3r 1  DD 21 03     	CMP	Ibuffs,X		; compare with byte from input buffer
0002E6r 1  F0 F5        	BEQ	LAB_13D6		; go compare next if match
0002E8r 1               
0002E8r 1  D0 2B        	BNE	LAB_1417		; branch if >< (not found keyword)
0002EAr 1               
0002EAr 1               LAB_13EA:
0002EAr 1  A4 BA        	LDY	csidx			; restore save index
0002ECr 1               
0002ECr 1               					; save crunched to output
0002ECr 1               LAB_13EC:
0002ECr 1  E8           	INX				; increment buffer index (to next input byte)
0002EDr 1  C8           	INY				; increment save index (to next output byte)
0002EEr 1  99 21 03     	STA	Ibuffs,Y		; save byte to output
0002F1r 1  C9 00        	CMP	#$00			; set the flags, set carry
0002F3r 1  F0 32        	BEQ	LAB_142A		; do exit if was null [EOL]
0002F5r 1               
0002F5r 1               					; A holds token or byte here
0002F5r 1  E9 3A        	SBC	#':'			; subtract ":" (carry set by CMP #00)
0002F7r 1  F0 04        	BEQ	LAB_13FF		; branch if it was ":" (is now $00)
0002F9r 1               
0002F9r 1               					; A now holds token-$3A
0002F9r 1  C9 49        	CMP	#TK_DATA-$3A	; compare with DATA token - $3A
0002FBr 1  D0 02        	BNE	LAB_1401		; branch if not DATA
0002FDr 1               
0002FDr 1               					; token was : or DATA
0002FDr 1               LAB_13FF:
0002FDr 1  85 60        	STA	Oquote		; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
0002FFr 1               LAB_1401:
0002FFr 1  49 57        	EOR	#TK_REM-$3A		; effectively subtract REM token offset
000301r 1  D0 93        	BNE	LAB_13AC		; If wasn't REM then go crunch rest of line
000303r 1               
000303r 1  85 5C        	STA	Asrch			; else was REM so set search for [EOL]
000305r 1               
000305r 1               					; loop for REM, "..." etc.
000305r 1               LAB_1408:
000305r 1  BD 21 03     	LDA	Ibuffs,X		; get byte from input buffer
000308r 1  F0 E2        	BEQ	LAB_13EC		; branch if null [EOL]
00030Ar 1               
00030Ar 1  C5 5C        	CMP	Asrch			; compare with stored character
00030Cr 1  F0 DE        	BEQ	LAB_13EC		; branch if match (end quote)
00030Er 1               
00030Er 1               					; entry for copy string in quotes, don't crunch
00030Er 1               LAB_1410:
00030Er 1  C8           	INY				; increment buffer save index
00030Fr 1  99 21 03     	STA	Ibuffs,Y		; save byte to output
000312r 1  E8           	INX				; increment buffer read index
000313r 1  D0 F0        	BNE	LAB_1408		; loop while <> 0 (should never be 0!)
000315r 1               
000315r 1               					; not found keyword this go
000315r 1               LAB_1417:
000315r 1  A6 78        	LDX	TempB			; compare has failed, restore buffer index (start byte!)
000317r 1               
000317r 1               					; now find the end of this word in the table
000317r 1               LAB_141B:
000317r 1  B1 73        	LDA	(ut2_pl),Y		; get table byte
000319r 1  08           	PHP				; save status
00031Ar 1  C8           	INY				; increment table index
00031Br 1  28           	PLP				; restore byte status
00031Cr 1  10 F9        	BPL	LAB_141B		; if not end of keyword go do next
00031Er 1               
00031Er 1  B1 73        	LDA	(ut2_pl),Y		; get byte from keyword table
000320r 1  D0 BE        	BNE	LAB_13D8		; go test next word if not zero byte (end of table)
000322r 1               
000322r 1               					; reached end of table with no match
000322r 1  BD 21 03     	LDA	Ibuffs,X		; restore byte from input buffer
000325r 1  10 C3        	BPL	LAB_13EA		; branch always (all bytes in buffer are $00-$7F)
000327r 1               					; go save byte in output and continue crunching
000327r 1               
000327r 1               					; reached [EOL]
000327r 1               LAB_142A:
000327r 1  C8           	INY				; increment pointer
000328r 1  C8           	INY				; increment pointer (makes it next line pointer high byte)
000329r 1  99 21 03     	STA	Ibuffs,Y		; save [EOL] (marks [EOT] in immediate mode)
00032Cr 1  C8           	INY				; adjust for line copy
00032Dr 1  C8           	INY				; adjust for line copy
00032Er 1  C8           	INY				; adjust for line copy
00032Fr 1  C6 C3        	DEC	Bpntrl		; allow for increment (change if buffer starts at $xxFF)
000331r 1  60           	RTS
000332r 1               
000332r 1               ; search Basic for temp integer line number from start of mem
000332r 1               
000332r 1               LAB_SSLN:
000332r 1  A5 79        	LDA	Smeml			; get start of mem low byte
000334r 1  A6 7A        	LDX	Smemh			; get start of mem high byte
000336r 1               
000336r 1               ; search Basic for temp integer line number from AX
000336r 1               ; returns carry set if found
000336r 1               ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
000336r 1               
000336r 1               ; old 541 new 507
000336r 1               
000336r 1               LAB_SHLN:
000336r 1  A0 01        	LDY	#$01			; set index
000338r 1  85 AA        	STA	Baslnl		; save low byte as current
00033Ar 1  86 AB        	STX	Baslnh		; save high byte as current
00033Cr 1  B1 AA        	LDA	(Baslnl),Y		; get pointer high byte from addr
00033Er 1  F0 1A        	BEQ	LAB_145F		; pointer was zero so we're done, do 'not found' exit
000340r 1               
000340r 1  A0 03        	LDY	#$03			; set index to line # high byte
000342r 1  B1 AA        	LDA	(Baslnl),Y		; get line # high byte
000344r 1  88           	DEY				; decrement index (point to low byte)
000345r 1  C5 42        	CMP	Itemph		; compare with temporary integer high byte
000347r 1  D0 04        	BNE	LAB_1455		; if <> skip low byte check
000349r 1               
000349r 1  B1 AA        	LDA	(Baslnl),Y		; get line # low byte
00034Br 1  C5 41        	CMP	Itempl		; compare with temporary integer low byte
00034Dr 1               LAB_1455:
00034Dr 1  B0 09        	BCS	LAB_145E		; else if temp < this line, exit (passed line#)
00034Fr 1               
00034Fr 1               LAB_1456:
00034Fr 1  88           	DEY				; decrement index to next line ptr high byte
000350r 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
000352r 1  AA           	TAX				; copy to X
000353r 1  88           	DEY				; decrement index to next line ptr low byte
000354r 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer low byte
000356r 1  90 DE        	BCC	LAB_SHLN		; go search for line # in temp (Itempl/Itemph) from AX
000358r 1               					; (carry always clear)
000358r 1               
000358r 1               LAB_145E:
000358r 1  F0 01        	BEQ	LAB_1460		; exit if temp = found line #, carry is set
00035Ar 1               
00035Ar 1               LAB_145F:
00035Ar 1  18           	CLC				; clear found flag
00035Br 1               LAB_1460:
00035Br 1  60           	RTS
00035Cr 1               
00035Cr 1               ; perform NEW
00035Cr 1               
00035Cr 1               LAB_NEW:
00035Cr 1  D0 FD        	BNE	LAB_1460		; exit if not end of statement (to do syntax error)
00035Er 1               
00035Er 1               LAB_1463:
00035Er 1  A9 00        	LDA	#$00			; clear A
000360r 1  A8           	TAY				; clear Y
000361r 1  91 79        	STA	(Smeml),Y		; clear first line, next line pointer, low byte
000363r 1  C8           	INY				; increment index
000364r 1  91 79        	STA	(Smeml),Y		; clear first line, next line pointer, high byte
000366r 1  18           	CLC				; clear carry
000367r 1  A5 79        	LDA	Smeml			; get start of mem low byte
000369r 1  69 02        	ADC	#$02			; calculate end of BASIC low byte
00036Br 1  85 7B        	STA	Svarl			; save start of vars low byte
00036Dr 1  A5 7A        	LDA	Smemh			; get start of mem high byte
00036Fr 1  69 00        	ADC	#$00			; add any carry
000371r 1  85 7C        	STA	Svarh			; save start of vars high byte
000373r 1               
000373r 1               ; reset execution to start, clear vars and flush stack
000373r 1               
000373r 1               LAB_1477:
000373r 1  18           	CLC				; clear carry
000374r 1  A5 79        	LDA	Smeml			; get start of mem low byte
000376r 1  69 FF        	ADC	#$FF			; -1
000378r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
00037Ar 1  A5 7A        	LDA	Smemh			; get start of mem high byte
00037Cr 1  69 FF        	ADC	#$FF			; -1+carry
00037Er 1  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000380r 1               
000380r 1               ; "CLEAR" command gets here
000380r 1               
000380r 1               LAB_147A:
000380r 1  A5 85        	LDA	Ememl			; get end of mem low byte
000382r 1  A4 86        	LDY	Ememh			; get end of mem high byte
000384r 1  85 81        	STA	Sstorl		; set bottom of string space low byte
000386r 1  84 82        	STY	Sstorh		; set bottom of string space high byte
000388r 1  A5 7B        	LDA	Svarl			; get start of vars low byte
00038Ar 1  A4 7C        	LDY	Svarh			; get start of vars high byte
00038Cr 1  85 7D        	STA	Sarryl		; save var mem end low byte
00038Er 1  84 7E        	STY	Sarryh		; save var mem end high byte
000390r 1  85 7F        	STA	Earryl		; save array mem end low byte
000392r 1  84 80        	STY	Earryh		; save array mem end high byte
000394r 1  20 rr rr     	JSR	LAB_161A		; perform RESTORE command
000397r 1               
000397r 1               ; flush stack and clear continue flag
000397r 1               
000397r 1               LAB_1491:
000397r 1  A2 68        	LDX	#des_sk		; set descriptor stack pointer
000399r 1  86 65        	STX	next_s		; save descriptor stack pointer
00039Br 1  68           	PLA				; pull return address low byte
00039Cr 1  AA           	TAX				; copy return address low byte
00039Dr 1  68           	PLA				; pull return address high byte
00039Er 1  8E FE 01     	STX	LAB_SKFE		; save to cleared stack
0003A1r 1  8D FF 01     	STA	LAB_SKFF		; save to cleared stack
0003A4r 1  A2 FD        	LDX	#$FD			; new stack pointer
0003A6r 1  9A           	TXS				; reset stack
0003A7r 1  A9 00        	LDA	#$00			; clear byte
0003A9r 1  85 8C        	STA	Cpntrh		; clear continue pointer high byte
0003ABr 1  85 61        	STA	Sufnxf		; clear subscript/FNX flag
0003ADr 1               LAB_14A6:
0003ADr 1  60           	RTS
0003AEr 1               
0003AEr 1               ; perform CLEAR
0003AEr 1               
0003AEr 1               LAB_CLEAR:
0003AEr 1  F0 D0        	BEQ	LAB_147A		; if no following token go do "CLEAR"
0003B0r 1               
0003B0r 1               					; else there was a following token (go do syntax error)
0003B0r 1  60           	RTS
0003B1r 1               
0003B1r 1               ; perform LIST [n][-m]
0003B1r 1               ; bigger, faster version (a _lot_ faster)
0003B1r 1               
0003B1r 1               LAB_LIST:
0003B1r 1  90 06        	BCC	LAB_14BD		; branch if next character numeric (LIST n..)
0003B3r 1               
0003B3r 1  F0 04        	BEQ	LAB_14BD		; branch if next character [NULL] (LIST)
0003B5r 1               
0003B5r 1  C9 B6        	CMP	#TK_MINUS		; compare with token for -
0003B7r 1  D0 F4        	BNE	LAB_14A6		; exit if not - (LIST -m)
0003B9r 1               
0003B9r 1               					; LIST [[n][-m]]
0003B9r 1               					; this bit sets the n , if present, as the start and end
0003B9r 1               LAB_14BD:
0003B9r 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0003BCr 1  20 rr rr     	JSR	LAB_SSLN		; search BASIC for temp integer line number
0003BFr 1               					; (pointer in Baslnl/Baslnh)
0003BFr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0003C2r 1  F0 0C        	BEQ	LAB_14D4		; branch if no more characters
0003C4r 1               
0003C4r 1               					; this bit checks the - is present
0003C4r 1  C9 B6        	CMP	#TK_MINUS		; compare with token for -
0003C6r 1  D0 93        	BNE	LAB_1460		; return if not "-" (will be Syntax error)
0003C8r 1               
0003C8r 1               					; LIST [n]-m
0003C8r 1               					; the - was there so set m as the end value
0003C8r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0003CBr 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0003CEr 1  D0 8B        	BNE	LAB_1460		; exit if not ok
0003D0r 1               
0003D0r 1               LAB_14D4:
0003D0r 1  A5 41        	LDA	Itempl		; get temporary integer low byte
0003D2r 1  05 42        	ORA	Itemph		; OR temporary integer high byte
0003D4r 1  D0 06        	BNE	LAB_14E2		; branch if start set
0003D6r 1               
0003D6r 1  A9 FF        	LDA	#$FF			; set for -1
0003D8r 1  85 41        	STA	Itempl		; set temporary integer low byte
0003DAr 1  85 42        	STA	Itemph		; set temporary integer high byte
0003DCr 1               LAB_14E2:
0003DCr 1  A0 01        	LDY	#$01			; set index for line
0003DEr 1  84 60        	STY	Oquote		; clear open quote flag
0003E0r 1  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
0003E3r 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
0003E5r 1               					; pointer initially set by search at LAB_14BD
0003E5r 1  F0 3E        	BEQ	LAB_152B		; if null all done so exit
0003E7r 1  20 rr rr     	JSR	LAB_1629		; do CRTL-C check vector
0003EAr 1               
0003EAr 1  C8           	INY				; increment index for line
0003EBr 1  B1 AA        	LDA	(Baslnl),Y		; get line # low byte
0003EDr 1  AA           	TAX				; copy to X
0003EEr 1  C8           	INY				; increment index
0003EFr 1  B1 AA        	LDA	(Baslnl),Y		; get line # high byte
0003F1r 1  C5 42        	CMP	Itemph		; compare with temporary integer high byte
0003F3r 1  D0 04        	BNE	LAB_14FF		; branch if no high byte match
0003F5r 1               
0003F5r 1  E4 41        	CPX	Itempl		; compare with temporary integer low byte
0003F7r 1  F0 02        	BEQ	LAB_1501		; branch if = last line to do (< will pass next branch)
0003F9r 1               
0003F9r 1               LAB_14FF:				; else ..
0003F9r 1  B0 2A        	BCS	LAB_152B		; if greater all done so exit
0003FBr 1               
0003FBr 1               LAB_1501:
0003FBr 1  84 97        	STY	Tidx1			; save index for line
0003FDr 1  20 rr rr     	JSR	LAB_295E		; print XA as unsigned integer
000400r 1  A9 20        	LDA	#$20			; space is the next character
000402r 1               LAB_1508:
000402r 1  A4 97        	LDY	Tidx1			; get index for line
000404r 1  29 7F        	AND	#$7F			; mask top out bit of character
000406r 1               LAB_150C:
000406r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
000409r 1  C9 22        	CMP	#$22			; was it " character
00040Br 1  D0 06        	BNE	LAB_1519		; branch if not
00040Dr 1               
00040Dr 1               					; we are either entering or leaving a pair of quotes
00040Dr 1  A5 60        	LDA	Oquote		; get open quote flag
00040Fr 1  49 FF        	EOR	#$FF			; toggle it
000411r 1  85 60        	STA	Oquote		; save it back
000413r 1               LAB_1519:
000413r 1  C8           	INY				; increment index
000414r 1  B1 AA        	LDA	(Baslnl),Y		; get next byte
000416r 1  D0 0E        	BNE	LAB_152E		; branch if not [EOL] (go print character)
000418r 1  A8           	TAY				; else clear index
000419r 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer low byte
00041Br 1  AA           	TAX				; copy to X
00041Cr 1  C8           	INY				; increment index
00041Dr 1  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
00041Fr 1  86 AA        	STX	Baslnl		; set pointer to line low byte
000421r 1  85 AB        	STA	Baslnh		; set pointer to line high byte
000423r 1  D0 B7        	BNE	LAB_14E2		; go do next line if not [EOT]
000425r 1               					; else ..
000425r 1               LAB_152B:
000425r 1  60           	RTS
000426r 1               
000426r 1               LAB_152E:
000426r 1  10 DE        	BPL	LAB_150C		; just go print it if not token byte
000428r 1               
000428r 1               					; else was token byte so uncrunch it (maybe)
000428r 1  24 60        	BIT	Oquote		; test the open quote flag
00042Ar 1  30 DA        	BMI	LAB_150C		; just go print character if open quote set
00042Cr 1               
00042Cr 1  A2 rr        	LDX	#>LAB_KEYT		; get table address high byte
00042Er 1  0A           	ASL				; *2
00042Fr 1  0A           	ASL				; *4
000430r 1  90 02        	BCC	LAB_152F		; branch if no carry
000432r 1               
000432r 1  E8           	INX				; else increment high byte
000433r 1  18           	CLC				; clear carry for add
000434r 1               LAB_152F:
000434r 1  69 rr        	ADC	#<LAB_KEYT		; add low byte
000436r 1  90 01        	BCC	LAB_1530		; branch if no carry
000438r 1               
000438r 1  E8           	INX				; else increment high byte
000439r 1               LAB_1530:
000439r 1  85 73        	STA	ut2_pl		; save table pointer low byte
00043Br 1  86 74        	STX	ut2_ph		; save table pointer high byte
00043Dr 1  84 97        	STY	Tidx1			; save index for line
00043Fr 1  A0 00        	LDY	#$00			; clear index
000441r 1  B1 73        	LDA	(ut2_pl),Y		; get length
000443r 1  AA           	TAX				; copy length
000444r 1  C8           	INY				; increment index
000445r 1  B1 73        	LDA	(ut2_pl),Y		; get 1st character
000447r 1  CA           	DEX				; decrement length
000448r 1  F0 B8        	BEQ	LAB_1508		; if no more characters exit and print
00044Ar 1               
00044Ar 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
00044Dr 1  C8           	INY				; increment index
00044Er 1  B1 73        	LDA	(ut2_pl),Y		; get keyword address low byte
000450r 1  48           	PHA				; save it for now
000451r 1  C8           	INY				; increment index
000452r 1  B1 73        	LDA	(ut2_pl),Y		; get keyword address high byte
000454r 1  A0 00        	LDY	#$00
000456r 1  85 74        	STA	ut2_ph		; save keyword pointer high byte
000458r 1  68           	PLA				; pull low byte
000459r 1  85 73        	STA	ut2_pl		; save keyword pointer low byte
00045Br 1               LAB_1540:
00045Br 1  B1 73        	LDA	(ut2_pl),Y		; get character
00045Dr 1  CA           	DEX				; decrement character count
00045Er 1  F0 A2        	BEQ	LAB_1508		; if last character exit and print
000460r 1               
000460r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
000463r 1  C8           	INY				; increment index
000464r 1  D0 F5        	BNE	LAB_1540		; loop for next character
000466r 1               
000466r 1               ; perform FOR
000466r 1               
000466r 1               LAB_FOR:
000466r 1  A9 80        	LDA	#$80			; set FNX
000468r 1  85 61        	STA	Sufnxf		; set subscript/FNX flag
00046Ar 1  20 rr rr     	JSR	LAB_LET		; go do LET
00046Dr 1  68           	PLA				; pull return address
00046Er 1  68           	PLA				; pull return address
00046Fr 1  A9 10        	LDA	#$10			; we need 16d bytes !
000471r 1  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
000474r 1  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
000477r 1  18           	CLC				; clear carry for add
000478r 1  98           	TYA				; copy index to A
000479r 1  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
00047Br 1  48           	PHA				; push onto stack
00047Cr 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
00047Er 1  69 00        	ADC	#$00			; add carry
000480r 1  48           	PHA				; push onto stack
000481r 1  A5 88        	LDA	Clineh		; get current line high byte
000483r 1  48           	PHA				; push onto stack
000484r 1  A5 87        	LDA	Clinel		; get current line low byte
000486r 1  48           	PHA				; push onto stack
000487r 1  A9 AC        	LDA	#TK_TO		; get "TO" token
000489r 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A) , else do syntax error then warm start
00048Cr 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
00048Fr 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
000492r 1               					; else do type mismatch
000492r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000494r 1  09 7F        	ORA	#$7F			; set all non sign bits
000496r 1  25 AD        	AND	FAC1_1		; and FAC1 mantissa1
000498r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
00049Ar 1  A9 rr        	LDA	#<LAB_159F		; set return address low byte
00049Cr 1  A0 rr        	LDY	#>LAB_159F		; set return address high byte
00049Er 1  85 71        	STA	ut1_pl		; save return address low byte
0004A0r 1  84 72        	STY	ut1_ph		; save return address high byte
0004A2r 1  4C rr rr     	JMP	LAB_1B66		; round FAC1 and put on stack (returns to next instruction)
0004A5r 1               
0004A5r 1               LAB_159F:
0004A5r 1  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low addr (default step size)
0004A7r 1  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high addr
0004A9r 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
0004ACr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0004AFr 1  C9 B1        	CMP	#TK_STEP		; compare with STEP token
0004B1r 1  D0 06        	BNE	LAB_15B3		; jump if not "STEP"
0004B3r 1               
0004B3r 1               					;.was step so ..
0004B3r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0004B6r 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0004B9r 1               					; else do type mismatch
0004B9r 1               LAB_15B3:
0004B9r 1  20 rr rr     	JSR	LAB_27CA		; return A=FF,C=1/-ve A=01,C=0/+ve
0004BCr 1  85 B0        	STA	FAC1_s		; set FAC1 sign (b7)
0004BEr 1               					; this is +1 for +ve step and -1 for -ve step, in NEXT we
0004BEr 1               					; compare the FOR value and the TO value and return +1 if
0004BEr 1               					; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
0004BEr 1               					; here (+/-1) is then compared to that result and if they
0004BEr 1               					; are the same (+ve and FOR > TO or -ve and FOR < TO) then
0004BEr 1               					; the loop is done
0004BEr 1  20 rr rr     	JSR	LAB_1B5B		; push sign, round FAC1 and put on stack
0004C1r 1  A5 98        	LDA	Frnxth		; get var pointer for FOR/NEXT high byte
0004C3r 1  48           	PHA				; push on stack
0004C4r 1  A5 97        	LDA	Frnxtl		; get var pointer for FOR/NEXT low byte
0004C6r 1  48           	PHA				; push on stack
0004C7r 1  A9 81        	LDA	#TK_FOR		; get FOR token
0004C9r 1  48           	PHA				; push on stack
0004CAr 1               
0004CAr 1               ; interpreter inner loop
0004CAr 1               
0004CAr 1               LAB_15C2:
0004CAr 1  20 rr rr     	JSR	LAB_1629		; do CRTL-C check vector
0004CDr 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0004CFr 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
0004D1r 1               
0004D1r 1  A6 88        	LDX	Clineh		; continue line is $FFxx for immediate mode
0004D3r 1               					; ($00xx for RUN from immediate mode)
0004D3r 1  E8           	INX				; increment it (now $00 if immediate mode)
0004D4r 1  F0 04        	BEQ	LAB_15D1		; branch if null (immediate mode)
0004D6r 1               
0004D6r 1  85 8B        	STA	Cpntrl		; save continue pointer low byte
0004D8r 1  84 8C        	STY	Cpntrh		; save continue pointer high byte
0004DAr 1               LAB_15D1:
0004DAr 1  A0 00        	LDY	#$00			; clear index
0004DCr 1  B1 C3        	LDA	(Bpntrl),Y		; get next byte
0004DEr 1  F0 07        	BEQ	LAB_15DC		; branch if null [EOL]
0004E0r 1               
0004E0r 1  C9 3A        	CMP	#':'			; compare with ":"
0004E2r 1  F0 1D        	BEQ	LAB_15F6		; branch if = (statement separator)
0004E4r 1               
0004E4r 1               LAB_15D9:
0004E4r 1  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
0004E7r 1               
0004E7r 1               					; have reached [EOL]
0004E7r 1               LAB_15DC:
0004E7r 1  A0 02        	LDY	#$02			; set index
0004E9r 1  B1 C3        	LDA	(Bpntrl),Y		; get next line pointer high byte
0004EBr 1  18           	CLC				; clear carry for no "BREAK" message
0004ECr 1  F0 56        	BEQ	LAB_1651		; if null go to immediate mode (was immediate or [EOT]
0004EEr 1               					; marker)
0004EEr 1               
0004EEr 1  C8           	INY				; increment index
0004EFr 1  B1 C3        	LDA	(Bpntrl),Y		; get line # low byte
0004F1r 1  85 87        	STA	Clinel		; save current line low byte
0004F3r 1  C8           	INY				; increment index
0004F4r 1  B1 C3        	LDA	(Bpntrl),Y		; get line # high byte
0004F6r 1  85 88        	STA	Clineh		; save current line high byte
0004F8r 1  98           	TYA				; A now = 4
0004F9r 1  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
0004FBr 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
0004FDr 1  90 02        	BCC	LAB_15F6		; branch if no overflow
0004FFr 1               
0004FFr 1  E6 C4        	INC	Bpntrh		; else increment BASIC execute pointer high byte
000501r 1               LAB_15F6:
000501r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000504r 1               
000504r 1               LAB_15F9:
000504r 1  20 rr rr     	JSR	LAB_15FF		; go interpret BASIC code from (Bpntrl)
000507r 1               
000507r 1               LAB_15FC:
000507r 1  4C rr rr     	JMP	LAB_15C2		; loop
00050Ar 1               
00050Ar 1               ; interpret BASIC code from (Bpntrl)
00050Ar 1               
00050Ar 1               LAB_15FF:
00050Ar 1  F0 54        	BEQ	LAB_1628		; exit if zero [EOL]
00050Cr 1               
00050Cr 1               LAB_1602:
00050Cr 1  0A           	ASL				; *2 bytes per vector and normalise token
00050Dr 1  B0 03        	BCS	LAB_1609		; branch if was token
00050Fr 1               
00050Fr 1  4C rr rr     	JMP	LAB_LET		; else go do implied LET
000512r 1               
000512r 1               LAB_1609:
000512r 1  C9 56        	CMP	#(TK_TAB-$80)*2	; compare normalised token * 2 with TAB
000514r 1  B0 CE        	BCS	LAB_15D9		; branch if A>=TAB (do syntax error then warm start)
000516r 1               					; only tokens before TAB can start a line
000516r 1  A8           	TAY				; copy to index
000517r 1  B9 rr rr     	LDA	LAB_CTBL+1,Y	; get vector high byte
00051Ar 1  48           	PHA				; onto stack
00051Br 1  B9 rr rr     	LDA	LAB_CTBL,Y		; get vector low byte
00051Er 1  48           	PHA				; onto stack
00051Fr 1  4C BC 00     	JMP	LAB_IGBY		; jump to increment and scan memory
000522r 1               					; then "return" to vector
000522r 1               
000522r 1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
000522r 1               ; key press is detected.
000522r 1               
000522r 1               LAB_1629:
000522r 1  6C 03 03     	JMP	(VEC_CC)		; ctrl c check vector
000525r 1               
000525r 1               ; if there was a key press it gets back here ..
000525r 1               
000525r 1               LAB_1636:
000525r 1  C9 18        	CMP	#('X'-64)			; compare with CTRL-X
000527r 1               
000527r 1               ; perform STOP
000527r 1               
000527r 1               LAB_STOP:
000527r 1  B0 01        	BCS	LAB_163B		; branch if token follows STOP
000529r 1               					; else just END
000529r 1               ; END
000529r 1               
000529r 1               LAB_END:
000529r 1  18           	CLC				; clear carry (indicate program end)
00052Ar 1               LAB_163B:
00052Ar 1  D0 67        	BNE	LAB_167A		; return if wasn't CTRL-C
00052Cr 1               
00052Cr 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
00052Er 1  49 03        	EOR	#>Ibuffs		; compare with buffer address high byte (Cb unchanged)
000530r 1  F0 10        	BEQ	LAB_164F		; branch if BASIC pointer is in buffer
000532r 1               					; (can't continue in immediate mode)
000532r 1               
000532r 1               					; else ..
000532r 1  49 03        	EOR	#>Ibuffs		; correct the bits
000534r 1  A4 C3        	LDY	Bpntrl		; get BASIC execute pointer low byte
000536r 1  84 8B        	STY	Cpntrl		; save continue pointer low byte
000538r 1  85 8C        	STA	Cpntrh		; save continue pointer high byte
00053Ar 1               LAB_1647:
00053Ar 1  A5 87        	LDA	Clinel		; get current line low byte
00053Cr 1  A4 88        	LDY	Clineh		; get current line high byte
00053Er 1  85 89        	STA	Blinel		; save break line low byte
000540r 1  84 8A        	STY	Blineh		; save break line high byte
000542r 1               LAB_164F:
000542r 1  68           	PLA				; pull return address low
000543r 1  68           	PLA				; pull return address high
000544r 1               LAB_1651:
000544r 1  90 07        	BCC	LAB_165E		; jump if was program end
000546r 1               
000546r 1  A9 rr        	LDA	#<LAB_BMSG		; point to "Break" (low byte)
000548r 1  A0 rr        	LDY	#>LAB_BMSG		; point to "Break" (high byte)
00054Ar 1  4C rr rr     	JMP	LAB_1269		; print "Break" and do warm start
00054Dr 1               
00054Dr 1               LAB_165E:
00054Dr 1  4C rr rr     	JMP	LAB_1274		; go do warm start
000550r 1               
000550r 1               ; perform RESTORE
000550r 1               
000550r 1               LAB_RESTORE:
000550r 1  D0 0F        	BNE	LAB_RESTOREn	; branch if next character not null (RESTORE n)
000552r 1               
000552r 1               LAB_161A:
000552r 1  38           	SEC				; set carry for subtract
000553r 1  A5 79        	LDA	Smeml			; get start of mem low byte
000555r 1  E9 01        	SBC	#$01			; -1
000557r 1  A4 7A        	LDY	Smemh			; get start of mem high byte
000559r 1  B0 01        	BCS	LAB_1624		; branch if no underflow
00055Br 1               
00055Br 1               LAB_uflow:
00055Br 1  88           	DEY				; else decrement high byte
00055Cr 1               LAB_1624:
00055Cr 1  85 8F        	STA	Dptrl			; save DATA pointer low byte
00055Er 1  84 90        	STY	Dptrh			; save DATA pointer high byte
000560r 1               LAB_1628:
000560r 1  60           	RTS
000561r 1               
000561r 1               					; is RESTORE n
000561r 1               LAB_RESTOREn:
000561r 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
000564r 1  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
000567r 1  A5 88        	LDA	Clineh		; get current line high byte
000569r 1  C5 42        	CMP	Itemph		; compare with temporary integer high byte
00056Br 1  B0 0B        	BCS	LAB_reset_search	; branch if >= (start search from beginning)
00056Dr 1               
00056Dr 1  98           	TYA				; else copy line index to A
00056Er 1  38           	SEC				; set carry (+1)
00056Fr 1  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
000571r 1  A6 C4        	LDX	Bpntrh		; get BASIC execute pointer high byte
000573r 1  90 07        	BCC	LAB_go_search	; branch if no overflow to high byte
000575r 1               
000575r 1  E8           	INX				; increment high byte
000576r 1  B0 04        	BCS	LAB_go_search	; branch always (can never be carry clear)
000578r 1               
000578r 1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000578r 1               
000578r 1               LAB_reset_search:
000578r 1  A5 79        	LDA	Smeml			; get start of mem low byte
00057Ar 1  A6 7A        	LDX	Smemh			; get start of mem high byte
00057Cr 1               
00057Cr 1               ; search for line # in temp (Itempl/Itemph) from (AX)
00057Cr 1               
00057Cr 1               LAB_go_search:
00057Cr 1               
00057Cr 1  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
00057Fr 1  B0 03        	BCS	LAB_line_found	; if carry set go set pointer
000581r 1               
000581r 1  4C rr rr     	JMP	LAB_16F7		; else go do "Undefined statement" error
000584r 1               
000584r 1               LAB_line_found:
000584r 1               					; carry already set for subtract
000584r 1  A5 AA        	LDA	Baslnl		; get pointer low byte
000586r 1  E9 01        	SBC	#$01			; -1
000588r 1  A4 AB        	LDY	Baslnh		; get pointer high byte
00058Ar 1  B0 D0        	BCS	LAB_1624		; branch if no underflow (save DATA pointer and return)
00058Cr 1               
00058Cr 1  90 CD        	BCC	LAB_uflow		; else decrement high byte then save DATA pointer and
00058Er 1               					; return (branch always)
00058Er 1               
00058Er 1               ; perform NULL
00058Er 1               
00058Er 1               LAB_NULL:
00058Er 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
000591r 1  86 3D        	STX	Nullct		; save new NULL count
000593r 1               LAB_167A:
000593r 1  60           	RTS
000594r 1               
000594r 1               ; perform CONT
000594r 1               
000594r 1               LAB_CONT:
000594r 1  D0 FD        	BNE	LAB_167A		; if following byte exit to do syntax error
000596r 1               
000596r 1  A4 8C        	LDY	Cpntrh		; get continue pointer high byte
000598r 1  D0 05        	BNE	LAB_166C		; go do continue if we can
00059Ar 1               
00059Ar 1  A2 1E        	LDX	#$1E			; error code $1E ("Can't continue" error)
00059Cr 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
00059Fr 1               
00059Fr 1               					; we can continue so ..
00059Fr 1               LAB_166C:
00059Fr 1  A9 93        	LDA	#TK_ON		; set token for ON
0005A1r 1  20 rr rr     	JSR	LAB_IRQ		; set IRQ flags
0005A4r 1  A9 93        	LDA	#TK_ON		; set token for ON
0005A6r 1  20 rr rr     	JSR	LAB_NMI		; set NMI flags
0005A9r 1               
0005A9r 1  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
0005ABr 1  A5 8B        	LDA	Cpntrl		; get continue pointer low byte
0005ADr 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
0005AFr 1  A5 89        	LDA	Blinel		; get break line low byte
0005B1r 1  A4 8A        	LDY	Blineh		; get break line high byte
0005B3r 1  85 87        	STA	Clinel		; set current line low byte
0005B5r 1  84 88        	STY	Clineh		; set current line high byte
0005B7r 1  60           	RTS
0005B8r 1               
0005B8r 1               ; perform RUN
0005B8r 1               
0005B8r 1               LAB_RUN:
0005B8r 1  D0 03        	BNE	LAB_1696		; branch if RUN n
0005BAr 1  4C rr rr     	JMP	LAB_1477		; reset execution to start, clear variables, flush stack and
0005BDr 1               					; return
0005BDr 1               
0005BDr 1               ; does RUN n
0005BDr 1               
0005BDr 1               LAB_1696:
0005BDr 1  20 rr rr     	JSR	LAB_147A		; go do "CLEAR"
0005C0r 1  F0 2E        	BEQ	LAB_16B0		; get n and do GOTO n (branch always as CLEAR sets Z=1)
0005C2r 1               
0005C2r 1               ; perform DO
0005C2r 1               
0005C2r 1               LAB_DO:
0005C2r 1  A9 05        	LDA	#$05			; need 5 bytes for DO
0005C4r 1  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
0005C7r 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0005C9r 1  48           	PHA				; push on stack
0005CAr 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0005CCr 1  48           	PHA				; push on stack
0005CDr 1  A5 88        	LDA	Clineh		; get current line high byte
0005CFr 1  48           	PHA				; push on stack
0005D0r 1  A5 87        	LDA	Clinel		; get current line low byte
0005D2r 1  48           	PHA				; push on stack
0005D3r 1  A9 9D        	LDA	#TK_DO		; token for DO
0005D5r 1  48           	PHA				; push on stack
0005D6r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0005D9r 1  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
0005DCr 1               
0005DCr 1               ; perform GOSUB
0005DCr 1               
0005DCr 1               LAB_GOSUB:
0005DCr 1  A9 05        	LDA	#$05			; need 5 bytes for GOSUB
0005DEr 1  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
0005E1r 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0005E3r 1  48           	PHA				; push on stack
0005E4r 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0005E6r 1  48           	PHA				; push on stack
0005E7r 1  A5 88        	LDA	Clineh		; get current line high byte
0005E9r 1  48           	PHA				; push on stack
0005EAr 1  A5 87        	LDA	Clinel		; get current line low byte
0005ECr 1  48           	PHA				; push on stack
0005EDr 1  A9 8D        	LDA	#TK_GOSUB		; token for GOSUB
0005EFr 1  48           	PHA				; push on stack
0005F0r 1               LAB_16B0:
0005F0r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0005F3r 1  20 rr rr     	JSR	LAB_GOTO		; perform GOTO n
0005F6r 1  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
0005F9r 1               					; (can't RTS, we used the stack!)
0005F9r 1               
0005F9r 1               ; perform GOTO
0005F9r 1               
0005F9r 1               LAB_GOTO:
0005F9r 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0005FCr 1  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
0005FFr 1  A5 88        	LDA	Clineh		; get current line high byte
000601r 1  C5 42        	CMP	Itemph		; compare with temporary integer high byte
000603r 1  B0 0B        	BCS	LAB_16D0		; branch if >= (start search from beginning)
000605r 1               
000605r 1  98           	TYA				; else copy line index to A
000606r 1  38           	SEC				; set carry (+1)
000607r 1  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
000609r 1  A6 C4        	LDX	Bpntrh		; get BASIC execute pointer high byte
00060Br 1  90 07        	BCC	LAB_16D4		; branch if no overflow to high byte
00060Dr 1               
00060Dr 1  E8           	INX				; increment high byte
00060Er 1  B0 04        	BCS	LAB_16D4		; branch always (can never be carry)
000610r 1               
000610r 1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000610r 1               
000610r 1               LAB_16D0:
000610r 1  A5 79        	LDA	Smeml			; get start of mem low byte
000612r 1  A6 7A        	LDX	Smemh			; get start of mem high byte
000614r 1               
000614r 1               ; search for line # in temp (Itempl/Itemph) from (AX)
000614r 1               
000614r 1               LAB_16D4:
000614r 1  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
000617r 1  90 67        	BCC	LAB_16F7		; if carry clear go do "Undefined statement" error
000619r 1               					; (unspecified statement)
000619r 1               
000619r 1               					; carry already set for subtract
000619r 1  A5 AA        	LDA	Baslnl		; get pointer low byte
00061Br 1  E9 01        	SBC	#$01			; -1
00061Dr 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
00061Fr 1  A5 AB        	LDA	Baslnh		; get pointer high byte
000621r 1  E9 00        	SBC	#$00			; subtract carry
000623r 1  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000625r 1               LAB_16E5:
000625r 1  60           	RTS
000626r 1               
000626r 1               LAB_DONOK:
000626r 1  A2 22        	LDX	#$22			; error code $22 ("LOOP without DO" error)
000628r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
00062Br 1               
00062Br 1               ; perform LOOP
00062Br 1               
00062Br 1               LAB_LOOP:
00062Br 1  A8           	TAY				; save following token
00062Cr 1  BA           	TSX				; copy stack pointer
00062Dr 1  BD 03 01     	LDA	LAB_STAK+3,X	; get token byte from stack
000630r 1  C9 9D        	CMP	#TK_DO		; compare with DO token
000632r 1  D0 F2        	BNE	LAB_DONOK		; branch if no matching DO
000634r 1               
000634r 1  E8           	INX				; dump calling routine return address
000635r 1  E8           	INX				; dump calling routine return address
000636r 1  9A           	TXS				; correct stack
000637r 1  98           	TYA				; get saved following token back
000638r 1  F0 20        	BEQ	LoopAlways		; if no following token loop forever
00063Ar 1               					; (stack pointer in X)
00063Ar 1               
00063Ar 1  C9 3A        	CMP	#':'			; could be ':'
00063Cr 1  F0 1C        	BEQ	LoopAlways		; if :... loop forever
00063Er 1               
00063Er 1  E9 B2        	SBC	#TK_UNTIL		; subtract token for UNTIL, we know carry is set here
000640r 1  AA           	TAX				; copy to X (if it was UNTIL then Y will be correct)
000641r 1  F0 04        	BEQ	DoRest		; branch if was UNTIL
000643r 1               
000643r 1  CA           	DEX				; decrement result
000644r 1  D0 62        	BNE	LAB_16FC		; if not WHILE go do syntax error and warm start
000646r 1               					; only if the token was WHILE will this fail
000646r 1               
000646r 1  CA           	DEX				; set invert result byte
000647r 1               DoRest:
000647r 1  86 98        	STX	Frnxth		; save invert result byte
000649r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
00064Cr 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
00064Fr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000651r 1  F0 02        	BEQ	DoCmp			; if =0 go do straight compare
000653r 1               
000653r 1  A9 FF        	LDA	#$FF			; else set all bits
000655r 1               DoCmp:
000655r 1  BA           	TSX				; copy stack pointer
000656r 1  45 98        	EOR	Frnxth		; EOR with invert byte
000658r 1  D0 1A        	BNE	LoopDone		; if <> 0 clear stack and back to interpreter loop
00065Ar 1               
00065Ar 1               					; loop condition wasn't met so do it again
00065Ar 1               LoopAlways:
00065Ar 1  BD 02 01     	LDA	LAB_STAK+2,X	; get current line low byte
00065Dr 1  85 87        	STA	Clinel		; save current line low byte
00065Fr 1  BD 03 01     	LDA	LAB_STAK+3,X	; get current line high byte
000662r 1  85 88        	STA	Clineh		; save current line high byte
000664r 1  BD 04 01     	LDA	LAB_STAK+4,X	; get BASIC execute pointer low byte
000667r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000669r 1  BD 05 01     	LDA	LAB_STAK+5,X	; get BASIC execute pointer high byte
00066Cr 1  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
00066Er 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000671r 1  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
000674r 1               
000674r 1               					; clear stack and back to interpreter loop
000674r 1               LoopDone:
000674r 1  E8           	INX				; dump DO token
000675r 1  E8           	INX				; dump current line low byte
000676r 1  E8           	INX				; dump current line high byte
000677r 1  E8           	INX				; dump BASIC execute pointer low byte
000678r 1  E8           	INX				; dump BASIC execute pointer high byte
000679r 1  9A           	TXS				; correct stack
00067Ar 1  4C rr rr     	JMP	LAB_DATA		; go perform DATA (find : or [EOL])
00067Dr 1               
00067Dr 1               ; do the return without gosub error
00067Dr 1               
00067Dr 1               LAB_16F4:
00067Dr 1  A2 04        	LDX	#$04			; error code $04 ("RETURN without GOSUB" error)
00067Fr 1  2C           	.byte	$2C			; makes next line BIT LAB_0EA2
000680r 1               
000680r 1               LAB_16F7:				; do undefined statement error
000680r 1  A2 0E        	LDX	#$0E			; error code $0E ("Undefined statement" error)
000682r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000685r 1               
000685r 1               ; perform RETURN
000685r 1               
000685r 1               LAB_RETURN:
000685r 1  D0 9E        	BNE	LAB_16E5		; exit if following token (to allow syntax error)
000687r 1               
000687r 1               LAB_16E8:
000687r 1  68           	PLA				; dump calling routine return address
000688r 1  68           	PLA				; dump calling routine return address
000689r 1  68           	PLA				; pull token
00068Ar 1  C9 8D        	CMP	#TK_GOSUB		; compare with GOSUB token
00068Cr 1  D0 EF        	BNE	LAB_16F4		; branch if no matching GOSUB
00068Er 1               
00068Er 1               LAB_16FF:
00068Er 1  68           	PLA				; pull current line low byte
00068Fr 1  85 87        	STA	Clinel		; save current line low byte
000691r 1  68           	PLA				; pull current line high byte
000692r 1  85 88        	STA	Clineh		; save current line high byte
000694r 1  68           	PLA				; pull BASIC execute pointer low byte
000695r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000697r 1  68           	PLA				; pull BASIC execute pointer high byte
000698r 1  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
00069Ar 1               
00069Ar 1               					; now do the DATA statement as we could be returning into
00069Ar 1               					; the middle of an ON <var> GOSUB n,m,p,q line
00069Ar 1               					; (the return address used by the DATA statement is the one
00069Ar 1               					; pushed before the GOSUB was executed!)
00069Ar 1               
00069Ar 1               ; perform DATA
00069Ar 1               
00069Ar 1               LAB_DATA:
00069Ar 1  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
00069Dr 1               
00069Dr 1               					; set BASIC execute pointer
00069Dr 1               LAB_170F:
00069Dr 1  98           	TYA				; copy index to A
00069Er 1  18           	CLC				; clear carry for add
00069Fr 1  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
0006A1r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
0006A3r 1  90 02        	BCC	LAB_1719		; skip next if no carry
0006A5r 1               
0006A5r 1  E6 C4        	INC	Bpntrh		; else increment BASIC execute pointer high byte
0006A7r 1               LAB_1719:
0006A7r 1  60           	RTS
0006A8r 1               
0006A8r 1               LAB_16FC:
0006A8r 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
0006ABr 1               
0006ABr 1               ; scan for next BASIC statement ([:] or [EOL])
0006ABr 1               ; returns Y as index to [:] or [EOL]
0006ABr 1               
0006ABr 1               LAB_SNBS:
0006ABr 1  A2 3A        	LDX	#':'			; set look for character = ":"
0006ADr 1  2C           	.byte	$2C			; makes next line BIT $00A2
0006AEr 1               
0006AEr 1               ; scan for next BASIC line
0006AEr 1               ; returns Y as index to [EOL]
0006AEr 1               
0006AEr 1               LAB_SNBL:
0006AEr 1  A2 00        	LDX	#$00			; set alt search character = [EOL]
0006B0r 1  A0 00        	LDY	#$00			; set search character = [EOL]
0006B2r 1  84 5C        	STY	Asrch			; store search character
0006B4r 1               LAB_1725:
0006B4r 1  8A           	TXA				; get alt search character
0006B5r 1  45 5C        	EOR	Asrch			; toggle search character, effectively swap with $00
0006B7r 1  85 5C        	STA	Asrch			; save swapped search character
0006B9r 1               LAB_172D:
0006B9r 1  B1 C3        	LDA	(Bpntrl),Y		; get next byte
0006BBr 1  F0 EA        	BEQ	LAB_1719		; exit if null [EOL]
0006BDr 1               
0006BDr 1  C5 5C        	CMP	Asrch			; compare with search character
0006BFr 1  F0 E6        	BEQ	LAB_1719		; exit if found
0006C1r 1               
0006C1r 1  C8           	INY				; increment index
0006C2r 1  C9 22        	CMP	#$22			; compare current character with open quote
0006C4r 1  D0 F3        	BNE	LAB_172D		; if not open quote go get next character
0006C6r 1               
0006C6r 1  F0 EC        	BEQ	LAB_1725		; if found go swap search character for alt search character
0006C8r 1               
0006C8r 1               ; perform IF
0006C8r 1               
0006C8r 1               LAB_IF:
0006C8r 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
0006CBr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0006CEr 1  C9 89        	CMP	#TK_GOTO		; compare with "GOTO" token
0006D0r 1  F0 05        	BEQ	LAB_174B		; jump if was "GOTO"
0006D2r 1               
0006D2r 1               					; wasn't IF .. GOTO so must be IF .. THEN
0006D2r 1  A9 AF        	LDA	#TK_THEN		; get THEN token
0006D4r 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A) , else do syntax error then warm start
0006D7r 1               LAB_174B:
0006D7r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0006D9r 1  D0 05        	BNE	LAB_1754		; branch if result was non zero
0006DBr 1               					; else ..
0006DBr 1               
0006DBr 1               ; perform REM, skip (rest of) line
0006DBr 1               
0006DBr 1               LAB_REM:
0006DBr 1  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
0006DEr 1  F0 BD        	BEQ	LAB_170F		; go set BASIC execute pointer and return, branch always
0006E0r 1               
0006E0r 1               					; result was non zero so do rest of line
0006E0r 1               LAB_1754:
0006E0r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0006E3r 1  B0 03        	BCS	LAB_175C		; branch if not numeric character (is var or keyword)
0006E5r 1               
0006E5r 1  4C rr rr     	JMP	LAB_GOTO		; else do GOTO n (was numeric)
0006E8r 1               
0006E8r 1               					; is var or keyword
0006E8r 1               LAB_175C:
0006E8r 1  4C rr rr     	JMP	LAB_15FF		; interpret BASIC code from (Bpntrl)
0006EBr 1               
0006EBr 1               ; perform ON
0006EBr 1               
0006EBr 1               LAB_ON:
0006EBr 1  C9 A9        	CMP	#TK_IRQ		; was it IRQ token ?
0006EDr 1  D0 03        	BNE	LAB_NOIN		; if not go check NMI
0006EFr 1               
0006EFr 1  4C rr rr     	JMP	LAB_SIRQ		; else go set-up IRQ
0006F2r 1               
0006F2r 1               LAB_NOIN:
0006F2r 1  C9 AA        	CMP	#TK_NMI		; was it NMI token ?
0006F4r 1  D0 03        	BNE	LAB_NONM		; if not go do normal ON command
0006F6r 1               
0006F6r 1  4C rr rr     	JMP	LAB_SNMI		; else go set-up NMI
0006F9r 1               
0006F9r 1               LAB_NONM:
0006F9r 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
0006FCr 1  48           	PHA				; push GOTO/GOSUB token
0006FDr 1  C9 8D        	CMP	#TK_GOSUB		; compare with GOSUB token
0006FFr 1  F0 04        	BEQ	LAB_176B		; branch if GOSUB
000701r 1               
000701r 1  C9 89        	CMP	#TK_GOTO		; compare with GOTO token
000703r 1               LAB_1767:
000703r 1  D0 A3        	BNE	LAB_16FC		; if not GOTO do syntax error then warm start
000705r 1               
000705r 1               
000705r 1               ; next character was GOTO or GOSUB
000705r 1               
000705r 1               LAB_176B:
000705r 1  C6 AF        	DEC	FAC1_3		; decrement index (byte value)
000707r 1  D0 04        	BNE	LAB_1773		; branch if not zero
000709r 1               
000709r 1  68           	PLA				; pull GOTO/GOSUB token
00070Ar 1  4C rr rr     	JMP	LAB_1602		; go execute it
00070Dr 1               
00070Dr 1               LAB_1773:
00070Dr 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000710r 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer (skip this n)
000713r 1               					; (we could LDX #',' and JSR LAB_SNBL+2, then we
000713r 1               					; just BNE LAB_176B for the loop. should be quicker ..
000713r 1               					; no we can't, what if we meet a colon or [EOL]?)
000713r 1  C9 2C        	CMP	#$2C			; compare next character with ","
000715r 1  F0 EE        	BEQ	LAB_176B		; loop if ","
000717r 1               
000717r 1               LAB_177E:
000717r 1  68           	PLA				; else pull keyword token (run out of options)
000718r 1               					; also dump +/-1 pointer low byte and exit
000718r 1               LAB_177F:
000718r 1  60           	RTS
000719r 1               
000719r 1               ; takes n * 106 + 11 cycles where n is the number of digits
000719r 1               
000719r 1               ; get fixed-point number into temp integer
000719r 1               
000719r 1               LAB_GFPN:
000719r 1               
000719r 1  A2 00        	LDX	#$00			; clear reg
00071Br 1  86 41        	STX	Itempl		; clear temporary integer low byte
00071Dr 1               LAB_1785:
00071Dr 1  86 42        	STX	Itemph		; save temporary integer high byte
00071Fr 1  B0 F7        	BCS	LAB_177F		; return if carry set, end of scan, character was
000721r 1               					; not 0-9
000721r 1               
000721r 1  E0 19        	CPX	#$19			; compare high byte with $19
000723r 1  A8           	TAY				; ensure Zb = 0 if the branch is taken
000724r 1  B0 DD        	BCS	LAB_1767		; branch if >=, makes max line # 63999 because next
000726r 1               					; bit does *$0A, = 64000, compare at target will fail
000726r 1               					; and do syntax error
000726r 1               
000726r 1  E9 2F        	SBC	#'0'-1		; subtract "0", $2F + carry, from byte
000728r 1  A8           	TAY				; copy binary digit
000729r 1  A5 41        	LDA	Itempl		; get temporary integer low byte
00072Br 1  0A           	ASL				; *2 low byte
00072Cr 1  26 42        	ROL	Itemph		; *2 high byte
00072Er 1  0A           	ASL				; *2 low byte
00072Fr 1  26 42        	ROL	Itemph		; *2 high byte, *4
000731r 1  65 41        	ADC	Itempl		; + low byte, *5
000733r 1  85 41        	STA	Itempl		; save it
000735r 1  8A           	TXA				; get high byte copy to A
000736r 1  65 42        	ADC	Itemph		; + high byte, *5
000738r 1  06 41        	ASL	Itempl		; *2 low byte, *10d
00073Ar 1  2A           	ROL				; *2 high byte, *10d
00073Br 1  AA           	TAX				; copy high byte back to X
00073Cr 1  98           	TYA				; get binary digit back
00073Dr 1  65 41        	ADC	Itempl		; add number low byte
00073Fr 1  85 41        	STA	Itempl		; save number low byte
000741r 1  90 01        	BCC	LAB_17B3		; if no overflow to high byte get next character
000743r 1               
000743r 1  E8           	INX				; else increment high byte
000744r 1               LAB_17B3:
000744r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000747r 1  4C rr rr     	JMP	LAB_1785		; loop for next character
00074Ar 1               
00074Ar 1               ; perform DEC
00074Ar 1               
00074Ar 1               LAB_DEC:
00074Ar 1  A9 rr        	LDA	#<LAB_2AFD		; set -1 pointer low byte
00074Cr 1  2C           	.byte	$2C			; BIT abs to skip the LDA below
00074Dr 1               
00074Dr 1               ; perform INC
00074Dr 1               
00074Dr 1               LAB_INC:
00074Dr 1  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
00074Fr 1               LAB_17B5:
00074Fr 1  48           	PHA				; save +/-1 pointer low byte
000750r 1               LAB_17B7:
000750r 1  20 rr rr     	JSR	LAB_GVAR		; get var address
000753r 1  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
000755r 1  30 1E        	BMI	IncrErr		; exit if string
000757r 1               
000757r 1  85 97        	STA	Lvarpl		; save var address low byte
000759r 1  84 98        	STY	Lvarph		; save var address high byte
00075Br 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
00075Er 1  68           	PLA				; get +/-1 pointer low byte
00075Fr 1  48           	PHA				; save +/-1 pointer low byte
000760r 1  A0 rr        	LDY	#>LAB_259C		; set +/-1 pointer high byte (both the same)
000762r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
000765r 1  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into variable (Lvarpl)
000768r 1               
000768r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
00076Br 1  C9 2C        	CMP	#','			; compare with ","
00076Dr 1  D0 A8        	BNE	LAB_177E		; exit if not "," (either end or error)
00076Fr 1               
00076Fr 1               					; was "," so another INCR variable to do
00076Fr 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000772r 1  4C rr rr     	JMP	LAB_17B7		; go do next var
000775r 1               
000775r 1               IncrErr:
000775r 1  4C rr rr     	JMP	LAB_1ABC		; do "Type mismatch" error then warm start
000778r 1               
000778r 1               ; perform LET
000778r 1               
000778r 1               LAB_LET:
000778r 1  20 rr rr     	JSR	LAB_GVAR		; get var address
00077Br 1  85 97        	STA	Lvarpl		; save var address low byte
00077Dr 1  84 98        	STY	Lvarph		; save var address high byte
00077Fr 1  A9 C0        	LDA	#TK_EQUAL		; get = token
000781r 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000784r 1  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
000786r 1  48           	PHA				; push data type flag
000787r 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
00078Ar 1  68           	PLA				; pop data type flag
00078Br 1  2A           	ROL				; set carry if type = string
00078Cr 1  20 rr rr     	JSR	LAB_CKTM		; type match check, set C for string
00078Fr 1  D0 03        	BNE	LAB_17D5		; branch if string
000791r 1               
000791r 1  4C rr rr     	JMP	LAB_PFAC		; pack FAC1 into variable (Lvarpl) and return
000794r 1               
000794r 1               ; string LET
000794r 1               
000794r 1               LAB_17D5:
000794r 1  A0 02        	LDY	#$02			; set index to pointer high byte
000796r 1  B1 AE        	LDA	(des_pl),Y		; get string pointer high byte
000798r 1  C5 82        	CMP	Sstorh		; compare bottom of string space high byte
00079Ar 1  90 17        	BCC	LAB_17F4		; if less assign value and exit (was in program memory)
00079Cr 1               
00079Cr 1  D0 07        	BNE	LAB_17E6		; branch if >
00079Er 1               					; else was equal so compare low bytes
00079Er 1  88           	DEY				; decrement index
00079Fr 1  B1 AE        	LDA	(des_pl),Y		; get pointer low byte
0007A1r 1  C5 81        	CMP	Sstorl		; compare bottom of string space low byte
0007A3r 1  90 0E        	BCC	LAB_17F4		; if less assign value and exit (was in program memory)
0007A5r 1               
0007A5r 1               					; pointer was >= to bottom of string space pointer
0007A5r 1               LAB_17E6:
0007A5r 1  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
0007A7r 1  C4 7C        	CPY	Svarh			; compare start of vars high byte
0007A9r 1  90 08        	BCC	LAB_17F4		; branch if less (descriptor is on stack)
0007ABr 1               
0007ABr 1  D0 0D        	BNE	LAB_17FB		; branch if greater (descriptor is not on stack)
0007ADr 1               
0007ADr 1               					; else high bytes were equal so ..
0007ADr 1  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
0007AFr 1  C5 7B        	CMP	Svarl			; compare start of vars low byte
0007B1r 1  B0 07        	BCS	LAB_17FB		; branch if >= (descriptor is not on stack)
0007B3r 1               
0007B3r 1               LAB_17F4:
0007B3r 1  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
0007B5r 1  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
0007B7r 1  4C rr rr     	JMP	LAB_1811		; clean stack, copy descriptor to variable and return
0007BAr 1               
0007BAr 1               					; make space and copy string
0007BAr 1               LAB_17FB:
0007BAr 1  A0 00        	LDY	#$00			; index to length
0007BCr 1  B1 AE        	LDA	(des_pl),Y		; get string length
0007BEr 1  20 rr rr     	JSR	LAB_209C		; copy string
0007C1r 1  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
0007C3r 1  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
0007C5r 1  85 B8        	STA	ssptr_l		; save descriptor pointer low byte
0007C7r 1  84 B9        	STY	ssptr_h		; save descriptor pointer high byte
0007C9r 1  20 rr rr     	JSR	LAB_228A		; copy string from descriptor (sdescr) to (Sutill)
0007CCr 1  A9 AC        	LDA	#<FAC1_e		; set descriptor pointer low byte
0007CEr 1  A0 00        	LDY	#>FAC1_e		; get descriptor pointer high byte
0007D0r 1               
0007D0r 1               					; clean stack and assign value to string variable
0007D0r 1               LAB_1811:
0007D0r 1  85 9E        	STA	des_2l		; save descriptor_2 pointer low byte
0007D2r 1  84 9F        	STY	des_2h		; save descriptor_2 pointer high byte
0007D4r 1  20 rr rr     	JSR	LAB_22EB		; clean descriptor stack, YA = pointer
0007D7r 1  A0 00        	LDY	#$00			; index to length
0007D9r 1  B1 9E        	LDA	(des_2l),Y		; get string length
0007DBr 1  91 97        	STA	(Lvarpl),Y		; copy to let string variable
0007DDr 1  C8           	INY				; index to string pointer low byte
0007DEr 1  B1 9E        	LDA	(des_2l),Y		; get string pointer low byte
0007E0r 1  91 97        	STA	(Lvarpl),Y		; copy to let string variable
0007E2r 1  C8           	INY				; index to string pointer high byte
0007E3r 1  B1 9E        	LDA	(des_2l),Y		; get string pointer high byte
0007E5r 1  91 97        	STA	(Lvarpl),Y		; copy to let string variable
0007E7r 1  60           	RTS
0007E8r 1               
0007E8r 1               ; perform GET
0007E8r 1               
0007E8r 1               LAB_GET:
0007E8r 1  20 rr rr     	JSR	LAB_GVAR		; get var address
0007EBr 1  85 97        	STA	Lvarpl		; save var address low byte
0007EDr 1  84 98        	STY	Lvarph		; save var address high byte
0007EFr 1  20 rr rr     	JSR	INGET			; get input byte
0007F2r 1  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
0007F4r 1  30 07        	BMI	LAB_GETS		; go get string character
0007F6r 1               
0007F6r 1               					; was numeric get
0007F6r 1  A8           	TAY				; copy character to Y
0007F7r 1  20 rr rr     	JSR	LAB_1FD0		; convert Y to byte in FAC1
0007FAr 1  4C rr rr     	JMP	LAB_PFAC		; pack FAC1 into variable (Lvarpl) and return
0007FDr 1               
0007FDr 1               LAB_GETS:
0007FDr 1  48           	PHA				; save character
0007FEr 1  A9 01        	LDA	#$01			; string is single byte
000800r 1  B0 01        	BCS	LAB_IsByte		; branch if byte received
000802r 1               
000802r 1  68           	PLA				; string is null
000803r 1               LAB_IsByte:
000803r 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
000806r 1               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
000806r 1  F0 05        	BEQ	LAB_NoSt		; skip store if null string
000808r 1               
000808r 1  68           	PLA				; get character back
000809r 1  A0 00        	LDY	#$00			; clear index
00080Br 1  91 AD        	STA	(str_pl),Y		; save byte in string (byte IS string!)
00080Dr 1               LAB_NoSt:
00080Dr 1  20 rr rr     	JSR	LAB_RTST		; check for space on descriptor stack then put address
000810r 1               					; and length on descriptor stack and update stack pointers
000810r 1               
000810r 1  4C rr rr     	JMP	LAB_17D5		; do string LET and return
000813r 1               
000813r 1               ; perform PRINT
000813r 1               
000813r 1               LAB_1829:
000813r 1  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
000816r 1               LAB_182C:
000816r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000819r 1               
000819r 1               ; PRINT
000819r 1               
000819r 1               LAB_PRINT:
000819r 1  F0 3B        	BEQ	LAB_CRLF		; if nothing following just print CR/LF
00081Br 1               
00081Br 1               LAB_1831:
00081Br 1  C9 AB        	CMP	#TK_TAB		; compare with TAB( token
00081Dr 1  F0 56        	BEQ	LAB_18A2		; go do TAB/SPC
00081Fr 1               
00081Fr 1  C9 AE        	CMP	#TK_SPC		; compare with SPC( token
000821r 1  F0 52        	BEQ	LAB_18A2		; go do TAB/SPC
000823r 1               
000823r 1  C9 2C        	CMP	#','			; compare with ","
000825r 1  F0 38        	BEQ	LAB_188B		; go do move to next TAB mark
000827r 1               
000827r 1  C9 3B        	CMP	#';'			; compare with ";"
000829r 1  F0 66        	BEQ	LAB_18BD		; if ";" continue with PRINT processing
00082Br 1               
00082Br 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
00082Er 1  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000830r 1  30 E1        	BMI	LAB_1829		; branch if string
000832r 1               
000832r 1  20 rr rr     	JSR	LAB_296E		; convert FAC1 to string
000835r 1  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
000838r 1  A0 00        	LDY	#$00			; clear index
00083Ar 1               
00083Ar 1               ; don't check fit if terminal width byte is zero
00083Ar 1               
00083Ar 1  A5 3F        	LDA	TWidth		; get terminal width byte
00083Cr 1  F0 0A        	BEQ	LAB_185E		; skip check if zero
00083Er 1               
00083Er 1  38           	SEC				; set carry for subtract
00083Fr 1  E5 3E        	SBC	TPos			; subtract terminal position
000841r 1  F1 AE        	SBC	(des_pl),Y		; subtract string length
000843r 1  B0 03        	BCS	LAB_185E		; branch if less than terminal width
000845r 1               
000845r 1  20 rr rr     	JSR	LAB_CRLF		; else print CR/LF
000848r 1               LAB_185E:
000848r 1  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
00084Br 1  F0 C9        	BEQ	LAB_182C		; always go continue processing line
00084Dr 1               
00084Dr 1               ; CR/LF return to BASIC from BASIC input handler
00084Dr 1               
00084Dr 1               LAB_1866:
00084Dr 1  A9 00        	LDA	#$00			; clear byte
00084Fr 1  9D 21 03     	STA	Ibuffs,X		; null terminate input
000852r 1  A2 21        	LDX	#<Ibuffs		; set X to buffer start-1 low byte
000854r 1  A0 03        	LDY	#>Ibuffs		; set Y to buffer start-1 high byte
000856r 1               
000856r 1               ; print CR/LF
000856r 1               
000856r 1               LAB_CRLF:
000856r 1  A9 0D        	LDA	#$0D			; load [CR]
000858r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
00085Br 1  A9 0A        	LDA	#$0A			; load [LF]
00085Dr 1  D0 52        	BNE	LAB_PRNA		; go print the character and return, branch always
00085Fr 1               
00085Fr 1               LAB_188B:
00085Fr 1  A5 3E        	LDA	TPos			; get terminal position
000861r 1  C5 40        	CMP	Iclim			; compare with input column limit
000863r 1  90 05        	BCC	LAB_1897		; branch if less
000865r 1               
000865r 1  20 rr rr     	JSR	LAB_CRLF		; else print CR/LF (next line)
000868r 1  D0 27        	BNE	LAB_18BD		; continue with PRINT processing (branch always)
00086Ar 1               
00086Ar 1               LAB_1897:
00086Ar 1  38           	SEC				; set carry for subtract
00086Br 1               LAB_1898:
00086Br 1  E5 64        	SBC	TabSiz		; subtract TAB size
00086Dr 1  B0 FC        	BCS	LAB_1898		; loop if result was +ve
00086Fr 1               
00086Fr 1  49 FF        	EOR	#$FF			; complement it
000871r 1  69 01        	ADC	#$01			; +1 (twos complement)
000873r 1  D0 12        	BNE	LAB_18B6		; always print A spaces (result is never $00)
000875r 1               
000875r 1               					; do TAB/SPC
000875r 1               LAB_18A2:
000875r 1  48           	PHA				; save token
000876r 1  20 rr rr     	JSR	LAB_SGBY		; scan and get byte parameter
000879r 1  C9 29        	CMP	#$29			; is next character )
00087Br 1  D0 7B        	BNE	LAB_1910		; if not do syntax error then warm start
00087Dr 1               
00087Dr 1  68           	PLA				; get token back
00087Er 1  C9 AB        	CMP	#TK_TAB		; was it TAB ?
000880r 1  D0 06        	BNE	LAB_18B7		; if not go do SPC
000882r 1               
000882r 1               					; calculate TAB offset
000882r 1  8A           	TXA				; copy integer value to A
000883r 1  E5 3E        	SBC	TPos			; subtract terminal position
000885r 1  90 0A        	BCC	LAB_18BD		; branch if result was < 0 (can't TAB backwards)
000887r 1               
000887r 1               					; print A spaces
000887r 1               LAB_18B6:
000887r 1  AA           	TAX				; copy result to X
000888r 1               LAB_18B7:
000888r 1  8A           	TXA				; set flags on size for SPC
000889r 1  F0 06        	BEQ	LAB_18BD		; branch if result was = $0, already here
00088Br 1               
00088Br 1               					; print X spaces
00088Br 1               LAB_18BA:
00088Br 1  20 rr rr     	JSR	LAB_18E0		; print " "
00088Er 1  CA           	DEX				; decrement count
00088Fr 1  D0 FA        	BNE	LAB_18BA		; loop if not all done
000891r 1               
000891r 1               					; continue with PRINT processing
000891r 1               LAB_18BD:
000891r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000894r 1  D0 85        	BNE	LAB_1831		; if more to print go do it
000896r 1               
000896r 1  60           	RTS
000897r 1               
000897r 1               ; print null terminated string from memory
000897r 1               
000897r 1               LAB_18C3:
000897r 1  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
00089Ar 1               
00089Ar 1               ; print string from Sutill/Sutilh
00089Ar 1               
00089Ar 1               LAB_18C6:
00089Ar 1  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
00089Dr 1               					; space returns with A = length, X=$71=pointer low byte,
00089Dr 1               					; Y=$72=pointer high byte
00089Dr 1  A0 00        	LDY	#$00			; reset index
00089Fr 1  AA           	TAX				; copy length to X
0008A0r 1  F0 49        	BEQ	LAB_188C		; exit (RTS) if null string
0008A2r 1               
0008A2r 1               LAB_18CD:
0008A2r 1               
0008A2r 1  B1 71        	LDA	(ut1_pl),Y		; get next byte
0008A4r 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
0008A7r 1  C8           	INY				; increment index
0008A8r 1  CA           	DEX				; decrement count
0008A9r 1  D0 F7        	BNE	LAB_18CD		; loop if not done yet
0008ABr 1               
0008ABr 1  60           	RTS
0008ACr 1               
0008ACr 1               					; Print single format character
0008ACr 1               ; print " "
0008ACr 1               
0008ACr 1               LAB_18E0:
0008ACr 1  A9 20        	LDA	#$20			; load " "
0008AEr 1  2C           	.byte	$2C			; change next line to BIT LAB_3FA9
0008AFr 1               
0008AFr 1               ; print "?" character
0008AFr 1               
0008AFr 1               LAB_18E3:
0008AFr 1  A9 3F        	LDA	#$3F			; load "?" character
0008B1r 1               
0008B1r 1               ; print character in A
0008B1r 1               ; now includes the null handler
0008B1r 1               ; also includes infinite line length code
0008B1r 1               ; note! some routines expect this one to exit with Zb=0
0008B1r 1               
0008B1r 1               LAB_PRNA:
0008B1r 1  C9 20        	CMP	#' '			; compare with " "
0008B3r 1  90 19        	BCC	LAB_18F9		; branch if less (non printing)
0008B5r 1               
0008B5r 1               					; else printable character
0008B5r 1  48           	PHA				; save the character
0008B6r 1               
0008B6r 1               ; don't check fit if terminal width byte is zero
0008B6r 1               
0008B6r 1  A5 3F        	LDA	TWidth		; get terminal width
0008B8r 1  D0 0A        	BNE	LAB_18F0		; branch if not zero (not infinite length)
0008BAr 1               
0008BAr 1               ; is "infinite line" so check TAB position
0008BAr 1               
0008BAr 1  A5 3E        	LDA	TPos			; get position
0008BCr 1  E5 64        	SBC	TabSiz		; subtract TAB size, carry set by CMP #$20 above
0008BEr 1  D0 0B        	BNE	LAB_18F7		; skip reset if different
0008C0r 1               
0008C0r 1  85 3E        	STA	TPos			; else reset position
0008C2r 1  F0 07        	BEQ	LAB_18F7		; go print character
0008C4r 1               
0008C4r 1               LAB_18F0:
0008C4r 1  C5 3E        	CMP	TPos			; compare with terminal character position
0008C6r 1  D0 03        	BNE	LAB_18F7		; branch if not at end of line
0008C8r 1               
0008C8r 1  20 rr rr     	JSR	LAB_CRLF		; else print CR/LF
0008CBr 1               LAB_18F7:
0008CBr 1  E6 3E        	INC	TPos			; increment terminal position
0008CDr 1  68           	PLA				; get character back
0008CEr 1               LAB_18F9:
0008CEr 1  20 rr rr     	JSR	V_OUTP		; output byte via output vector
0008D1r 1  C9 0D        	CMP	#$0D			; compare with [CR]
0008D3r 1  D0 14        	BNE	LAB_188A		; branch if not [CR]
0008D5r 1               
0008D5r 1               					; else print nullct nulls after the [CR]
0008D5r 1  86 78        	STX	TempB			; save buffer index
0008D7r 1  A6 3D        	LDX	Nullct		; get null count
0008D9r 1  F0 0A        	BEQ	LAB_1886		; branch if no nulls
0008DBr 1               
0008DBr 1  A9 00        	LDA	#$00			; load [NULL]
0008DDr 1               LAB_1880:
0008DDr 1  20 rr rr     	JSR	LAB_PRNA		; go print the character
0008E0r 1  CA           	DEX				; decrement count
0008E1r 1  D0 FA        	BNE	LAB_1880		; loop if not all done
0008E3r 1               
0008E3r 1  A9 0D        	LDA	#$0D			; restore the character (and set the flags)
0008E5r 1               LAB_1886:
0008E5r 1  86 3E        	STX	TPos			; clear terminal position (X always = zero when we get here)
0008E7r 1  A6 78        	LDX	TempB			; restore buffer index
0008E9r 1               LAB_188A:
0008E9r 1  29 FF        	AND	#$FF			; set the flags
0008EBr 1               LAB_188C:
0008EBr 1  60           	RTS
0008ECr 1               
0008ECr 1               ; handle bad input data
0008ECr 1               
0008ECr 1               LAB_1904:
0008ECr 1  A5 62        	LDA	Imode			; get input mode flag, $00=INPUT, $00=READ
0008EEr 1  10 0B        	BPL	LAB_1913		; branch if INPUT (go do redo)
0008F0r 1               
0008F0r 1  A5 8D        	LDA	Dlinel		; get current DATA line low byte
0008F2r 1  A4 8E        	LDY	Dlineh		; get current DATA line high byte
0008F4r 1  85 87        	STA	Clinel		; save current line low byte
0008F6r 1  84 88        	STY	Clineh		; save current line high byte
0008F8r 1               LAB_1910:
0008F8r 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
0008FBr 1               
0008FBr 1               					; mode was INPUT
0008FBr 1               LAB_1913:
0008FBr 1  A9 rr        	LDA	#<LAB_REDO		; point to redo message (low addr)
0008FDr 1  A0 rr        	LDY	#>LAB_REDO		; point to redo message (high addr)
0008FFr 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000902r 1  A5 8B        	LDA	Cpntrl		; get continue pointer low byte
000904r 1  A4 8C        	LDY	Cpntrh		; get continue pointer high byte
000906r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000908r 1  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
00090Ar 1  60           	RTS
00090Br 1               
00090Br 1               ; perform INPUT
00090Br 1               
00090Br 1               LAB_INPUT:
00090Br 1  C9 22        	CMP	#$22			; compare next byte with open quote
00090Dr 1  D0 0B        	BNE	LAB_1934		; branch if no prompt string
00090Fr 1               
00090Fr 1  20 rr rr     	JSR	LAB_1BC1		; print "..." string
000912r 1  A9 3B        	LDA	#$3B			; load A with ";"
000914r 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000917r 1  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
00091Ar 1               
00091Ar 1               					; done with prompt, now get data
00091Ar 1               LAB_1934:
00091Ar 1  20 rr rr     	JSR	LAB_CKRN		; check not Direct, back here if ok
00091Dr 1  20 rr rr     	JSR	LAB_INLN		; print "? " and get BASIC input
000920r 1  A9 00        	LDA	#$00			; set mode = INPUT
000922r 1  CD 21 03     	CMP	Ibuffs		; test first byte in buffer
000925r 1  D0 0A        	BNE	LAB_1953		; branch if not null input
000927r 1               
000927r 1  18           	CLC				; was null input so clear carry to exit program
000928r 1  4C rr rr     	JMP	LAB_1647		; go do BREAK exit
00092Br 1               
00092Br 1               ; perform READ
00092Br 1               
00092Br 1               LAB_READ:
00092Br 1  A6 8F        	LDX	Dptrl			; get DATA pointer low byte
00092Dr 1  A4 90        	LDY	Dptrh			; get DATA pointer high byte
00092Fr 1  A9 80        	LDA	#$80			; set mode = READ
000931r 1               
000931r 1               LAB_1953:
000931r 1  85 62        	STA	Imode			; set input mode flag, $00=INPUT, $80=READ
000933r 1  86 91        	STX	Rdptrl		; save READ pointer low byte
000935r 1  84 92        	STY	Rdptrh		; save READ pointer high byte
000937r 1               
000937r 1               					; READ or INPUT next variable from list
000937r 1               LAB_195B:
000937r 1  20 rr rr     	JSR	LAB_GVAR		; get (var) address
00093Ar 1  85 97        	STA	Lvarpl		; save address low byte
00093Cr 1  84 98        	STY	Lvarph		; save address high byte
00093Er 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
000940r 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
000942r 1  85 41        	STA	Itempl		; save as temporary integer low byte
000944r 1  84 42        	STY	Itemph		; save as temporary integer high byte
000946r 1  A6 91        	LDX	Rdptrl		; get READ pointer low byte
000948r 1  A4 92        	LDY	Rdptrh		; get READ pointer high byte
00094Ar 1  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
00094Cr 1  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
00094Er 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000951r 1  D0 11        	BNE	LAB_1988		; branch if not null
000953r 1               
000953r 1               					; pointer was to null entry
000953r 1  24 62        	BIT	Imode			; test input mode flag, $00=INPUT, $80=READ
000955r 1  30 65        	BMI	LAB_19DD		; branch if READ
000957r 1               
000957r 1               					; mode was INPUT
000957r 1  20 rr rr     	JSR	LAB_18E3		; print "?" character (double ? for extended input)
00095Ar 1  20 rr rr     	JSR	LAB_INLN		; print "? " and get BASIC input
00095Dr 1  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
00095Fr 1  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
000961r 1               LAB_1985:
000961r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000964r 1               LAB_1988:
000964r 1  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000966r 1  10 24        	BPL	LAB_19B0		; branch if numeric
000968r 1               
000968r 1               					; else get string
000968r 1  85 5B        	STA	Srchc			; save search character
00096Ar 1  C9 22        	CMP	#$22			; was it " ?
00096Cr 1  F0 07        	BEQ	LAB_1999		; branch if so
00096Er 1               
00096Er 1  A9 3A        	LDA	#':'			; else search character is ":"
000970r 1  85 5B        	STA	Srchc			; set new search character
000972r 1  A9 2C        	LDA	#','			; other search character is ","
000974r 1  18           	CLC				; clear carry for add
000975r 1               LAB_1999:
000975r 1  85 5C        	STA	Asrch			; set second search character
000977r 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
000979r 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
00097Br 1               
00097Br 1  69 00        	ADC	#$00			; c is =1 if we came via the BEQ LAB_1999, else =0
00097Dr 1  90 01        	BCC	LAB_19A4		; branch if no execute pointer low byte rollover
00097Fr 1               
00097Fr 1  C8           	INY				; else increment high byte
000980r 1               LAB_19A4:
000980r 1  20 rr rr     	JSR	LAB_20B4		; print Srchc or Asrch terminated string to Sutill/Sutilh
000983r 1  20 rr rr     	JSR	LAB_23F3		; restore BASIC execute pointer from temp (Btmpl/Btmph)
000986r 1  20 rr rr     	JSR	LAB_17D5		; go do string LET
000989r 1  4C rr rr     	JMP	LAB_19B6		; go check string terminator
00098Cr 1               
00098Cr 1               					; get numeric INPUT
00098Cr 1               LAB_19B0:
00098Cr 1  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
00098Fr 1  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into (Lvarpl)
000992r 1               LAB_19B6:
000992r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000995r 1  F0 0A        	BEQ	LAB_19C5		; branch if null (last entry)
000997r 1               
000997r 1  C9 2C        	CMP	#','			; else compare with ","
000999r 1  F0 03        	BEQ	LAB_19C2		; branch if ","
00099Br 1               
00099Br 1  4C rr rr     	JMP	LAB_1904		; else go handle bad input data
00099Er 1               
00099Er 1               					; got good input data
00099Er 1               LAB_19C2:
00099Er 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0009A1r 1               LAB_19C5:
0009A1r 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte (temp READ/INPUT ptr)
0009A3r 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte (temp READ/INPUT ptr)
0009A5r 1  85 91        	STA	Rdptrl		; save for now
0009A7r 1  84 92        	STY	Rdptrh		; save for now
0009A9r 1  A5 41        	LDA	Itempl		; get temporary integer low byte (temp BASIC execute ptr)
0009ABr 1  A4 42        	LDY	Itemph		; get temporary integer high byte (temp BASIC execute ptr)
0009ADr 1  85 C3        	STA	Bpntrl		; set BASIC execute pointer low byte
0009AFr 1  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
0009B1r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0009B4r 1  F0 2C        	BEQ	LAB_1A03		; if null go do extra ignored message
0009B6r 1               
0009B6r 1  20 rr rr     	JSR	LAB_1C01		; else scan for "," , else do syntax error then warm start
0009B9r 1  4C rr rr     	JMP	LAB_195B		; go INPUT next variable from list
0009BCr 1               
0009BCr 1               					; find next DATA statement or do "Out of DATA" error
0009BCr 1               LAB_19DD:
0009BCr 1  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
0009BFr 1  C8           	INY				; increment index
0009C0r 1  AA           	TAX				; copy character ([:] or [EOL])
0009C1r 1  D0 12        	BNE	LAB_19F6		; branch if [:]
0009C3r 1               
0009C3r 1  A2 06        	LDX	#$06			; set for "Out of DATA" error
0009C5r 1  C8           	INY				; increment index, now points to next line pointer high byte
0009C6r 1  B1 C3        	LDA	(Bpntrl),Y		; get next line pointer high byte
0009C8r 1  F0 73        	BEQ	LAB_1A54		; branch if end (eventually does error X)
0009CAr 1               
0009CAr 1  C8           	INY				; increment index
0009CBr 1  B1 C3        	LDA	(Bpntrl),Y		; get next line # low byte
0009CDr 1  85 8D        	STA	Dlinel		; save current DATA line low byte
0009CFr 1  C8           	INY				; increment index
0009D0r 1  B1 C3        	LDA	(Bpntrl),Y		; get next line # high byte
0009D2r 1  C8           	INY				; increment index
0009D3r 1  85 8E        	STA	Dlineh		; save current DATA line high byte
0009D5r 1               LAB_19F6:
0009D5r 1  B1 C3        	LDA	(Bpntrl),Y		; get byte
0009D7r 1  C8           	INY				; increment index
0009D8r 1  AA           	TAX				; copy to X
0009D9r 1  20 rr rr     	JSR	LAB_170F		; set BASIC execute pointer
0009DCr 1  E0 83        	CPX	#TK_DATA		; compare with "DATA" token
0009DEr 1  F0 81        	BEQ	LAB_1985		; was "DATA" so go do next READ
0009E0r 1               
0009E0r 1  D0 DA        	BNE	LAB_19DD		; go find next statement if not "DATA"
0009E2r 1               
0009E2r 1               ; end of INPUT/READ routine
0009E2r 1               
0009E2r 1               LAB_1A03:
0009E2r 1  A5 91        	LDA	Rdptrl		; get temp READ pointer low byte
0009E4r 1  A4 92        	LDY	Rdptrh		; get temp READ pointer high byte
0009E6r 1  A6 62        	LDX	Imode			; get input mode flag, $00=INPUT, $80=READ
0009E8r 1  10 03        	BPL	LAB_1A0E		; branch if INPUT
0009EAr 1               
0009EAr 1  4C rr rr     	JMP	LAB_1624		; save AY as DATA pointer and return
0009EDr 1               
0009EDr 1               					; we were getting INPUT
0009EDr 1               LAB_1A0E:
0009EDr 1  A0 00        	LDY	#$00			; clear index
0009EFr 1  B1 91        	LDA	(Rdptrl),Y		; get next byte
0009F1r 1  D0 01        	BNE	LAB_1A1B		; error if not end of INPUT
0009F3r 1               
0009F3r 1  60           	RTS
0009F4r 1               
0009F4r 1               					; user typed too much
0009F4r 1               LAB_1A1B:
0009F4r 1  A9 rr        	LDA	#<LAB_IMSG		; point to extra ignored message (low addr)
0009F6r 1  A0 rr        	LDY	#>LAB_IMSG		; point to extra ignored message (high addr)
0009F8r 1  4C rr rr     	JMP	LAB_18C3		; print null terminated string from memory and return
0009FBr 1               
0009FBr 1               ; search the stack for FOR activity
0009FBr 1               ; exit with z=1 if FOR else exit with z=0
0009FBr 1               
0009FBr 1               LAB_11A1:
0009FBr 1  BA           	TSX				; copy stack pointer
0009FCr 1  E8           	INX				; +1 pass return address
0009FDr 1  E8           	INX				; +2 pass return address
0009FEr 1  E8           	INX				; +3 pass calling routine return address
0009FFr 1  E8           	INX				; +4 pass calling routine return address
000A00r 1               LAB_11A6:
000A00r 1  BD 01 01     	LDA	LAB_STAK+1,X	; get token byte from stack
000A03r 1  C9 81        	CMP	#TK_FOR		; is it FOR token
000A05r 1  D0 21        	BNE	LAB_11CE		; exit if not FOR token
000A07r 1               
000A07r 1               					; was FOR token
000A07r 1  A5 98        	LDA	Frnxth		; get var pointer for FOR/NEXT high byte
000A09r 1  D0 0A        	BNE	LAB_11BB		; branch if not null
000A0Br 1               
000A0Br 1  BD 02 01     	LDA	LAB_STAK+2,X	; get FOR variable pointer low byte
000A0Er 1  85 97        	STA	Frnxtl		; save var pointer for FOR/NEXT low byte
000A10r 1  BD 03 01     	LDA	LAB_STAK+3,X	; get FOR variable pointer high byte
000A13r 1  85 98        	STA	Frnxth		; save var pointer for FOR/NEXT high byte
000A15r 1               LAB_11BB:
000A15r 1  DD 03 01     	CMP	LAB_STAK+3,X	; compare var pointer with stacked var pointer (high byte)
000A18r 1  D0 07        	BNE	LAB_11C7		; branch if no match
000A1Ar 1               
000A1Ar 1  A5 97        	LDA	Frnxtl		; get var pointer for FOR/NEXT low byte
000A1Cr 1  DD 02 01     	CMP	LAB_STAK+2,X	; compare var pointer with stacked var pointer (low byte)
000A1Fr 1  F0 07        	BEQ	LAB_11CE		; exit if match found
000A21r 1               
000A21r 1               LAB_11C7:
000A21r 1  8A           	TXA				; copy index
000A22r 1  18           	CLC				; clear carry for add
000A23r 1  69 10        	ADC	#$10			; add FOR stack use size
000A25r 1  AA           	TAX				; copy back to index
000A26r 1  D0 D8        	BNE	LAB_11A6		; loop if not at start of stack
000A28r 1               
000A28r 1               LAB_11CE:
000A28r 1  60           	RTS
000A29r 1               
000A29r 1               ; perform NEXT
000A29r 1               
000A29r 1               LAB_NEXT:
000A29r 1  D0 04        	BNE	LAB_1A46		; branch if NEXT var
000A2Br 1               
000A2Br 1  A0 00        	LDY	#$00			; else clear Y
000A2Dr 1  F0 03        	BEQ	LAB_1A49		; branch always (no variable to search for)
000A2Fr 1               
000A2Fr 1               ; NEXT var
000A2Fr 1               
000A2Fr 1               LAB_1A46:
000A2Fr 1  20 rr rr     	JSR	LAB_GVAR		; get variable address
000A32r 1               LAB_1A49:
000A32r 1  85 97        	STA	Frnxtl		; store variable pointer low byte
000A34r 1  84 98        	STY	Frnxth		; store variable pointer high byte
000A36r 1               					; (both cleared if no variable defined)
000A36r 1  20 rr rr     	JSR	LAB_11A1		; search the stack for FOR activity
000A39r 1  F0 04        	BEQ	LAB_1A56		; branch if found
000A3Br 1               
000A3Br 1  A2 00        	LDX	#$00			; else set error $00 ("NEXT without FOR" error)
000A3Dr 1               LAB_1A54:
000A3Dr 1  F0 63        	BEQ	LAB_1ABE		; do error #X, then warm start
000A3Fr 1               
000A3Fr 1               LAB_1A56:
000A3Fr 1  9A           	TXS				; set stack pointer, X set by search, dumps return addresses
000A40r 1               
000A40r 1  8A           	TXA				; copy stack pointer
000A41r 1  38           	SEC				; set carry for subtract
000A42r 1  E9 F7        	SBC	#$F7			; point to TO var
000A44r 1  85 73        	STA	ut2_pl		; save pointer to TO var for compare
000A46r 1  69 FB        	ADC	#$FB			; point to STEP var
000A48r 1               
000A48r 1  A0 01        	LDY	#>LAB_STAK		; point to stack page high byte
000A4Ar 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (STEP value) into FAC1
000A4Dr 1  BA           	TSX				; get stack pointer back
000A4Er 1  BD 08 01     	LDA	LAB_STAK+8,X	; get step sign
000A51r 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
000A53r 1  A5 97        	LDA	Frnxtl		; get FOR variable pointer low byte
000A55r 1  A4 98        	LDY	Frnxth		; get FOR variable pointer high byte
000A57r 1  20 rr rr     	JSR	LAB_246C		; add (FOR variable) to FAC1
000A5Ar 1  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into (FOR variable)
000A5Dr 1  A0 01        	LDY	#>LAB_STAK		; point to stack page high byte
000A5Fr 1  20 rr rr     	JSR	LAB_27FA		; compare FAC1 with (Y,ut2_pl) (TO value)
000A62r 1  BA           	TSX				; get stack pointer back
000A63r 1  DD 08 01     	CMP	LAB_STAK+8,X	; compare step sign
000A66r 1  F0 17        	BEQ	LAB_1A9B		; branch if = (loop complete)
000A68r 1               
000A68r 1               					; loop back and do it all again
000A68r 1  BD 0D 01     	LDA	LAB_STAK+$0D,X	; get FOR line low byte
000A6Br 1  85 87        	STA	Clinel		; save current line low byte
000A6Dr 1  BD 0E 01     	LDA	LAB_STAK+$0E,X	; get FOR line high byte
000A70r 1  85 88        	STA	Clineh		; save current line high byte
000A72r 1  BD 10 01     	LDA	LAB_STAK+$10,X	; get BASIC execute pointer low byte
000A75r 1  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000A77r 1  BD 0F 01     	LDA	LAB_STAK+$0F,X	; get BASIC execute pointer high byte
000A7Ar 1  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000A7Cr 1               LAB_1A98:
000A7Cr 1  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
000A7Fr 1               
000A7Fr 1               					; loop complete so carry on
000A7Fr 1               LAB_1A9B:
000A7Fr 1  8A           	TXA				; stack copy to A
000A80r 1  69 0F        	ADC	#$0F			; add $10 ($0F+carry) to dump FOR structure
000A82r 1  AA           	TAX				; copy back to index
000A83r 1  9A           	TXS				; copy to stack pointer
000A84r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000A87r 1  C9 2C        	CMP	#','			; compare with ","
000A89r 1  D0 F1        	BNE	LAB_1A98		; branch if not "," (go do interpreter inner loop)
000A8Br 1               
000A8Br 1               					; was "," so another NEXT variable to do
000A8Br 1  20 BC 00     	JSR	LAB_IGBY		; else increment and scan memory
000A8Er 1  20 rr rr     	JSR	LAB_1A46		; do NEXT (var)
000A91r 1               
000A91r 1               ; evaluate expression and check is numeric, else do type mismatch
000A91r 1               
000A91r 1               LAB_EVNM:
000A91r 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
000A94r 1               
000A94r 1               ; check if source is numeric, else do type mismatch
000A94r 1               
000A94r 1               LAB_CTNM:
000A94r 1  18           	CLC				; destination is numeric
000A95r 1  24           	.byte	$24			; makes next line BIT $38
000A96r 1               
000A96r 1               ; check if source is string, else do type mismatch
000A96r 1               
000A96r 1               LAB_CTST:
000A96r 1  38           	SEC				; required type is string
000A97r 1               
000A97r 1               ; type match check, set C for string, clear C for numeric
000A97r 1               
000A97r 1               LAB_CKTM:
000A97r 1  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000A99r 1  30 03        	BMI	LAB_1ABA		; branch if data type is string
000A9Br 1               
000A9Br 1               					; else data type was numeric
000A9Br 1  B0 03        	BCS	LAB_1ABC		; if required type is string do type mismatch error
000A9Dr 1               LAB_1AB9:
000A9Dr 1  60           	RTS
000A9Er 1               
000A9Er 1               					; data type was string, now check required type
000A9Er 1               LAB_1ABA:
000A9Er 1  B0 FD        	BCS	LAB_1AB9		; exit if required type is string
000AA0r 1               
000AA0r 1               					; else do type mismatch error
000AA0r 1               LAB_1ABC:
000AA0r 1  A2 18        	LDX	#$18			; error code $18 ("Type mismatch" error)
000AA2r 1               LAB_1ABE:
000AA2r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000AA5r 1               
000AA5r 1               ; evaluate expression
000AA5r 1               
000AA5r 1               LAB_EVEX:
000AA5r 1  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
000AA7r 1  D0 02        	BNE	LAB_1AC7		; skip next if not zero
000AA9r 1               
000AA9r 1  C6 C4        	DEC	Bpntrh		; else decrement BASIC execute pointer high byte
000AABr 1               LAB_1AC7:
000AABr 1  C6 C3        	DEC	Bpntrl		; decrement BASIC execute pointer low byte
000AADr 1               
000AADr 1               LAB_EVEZ:
000AADr 1  A9 00        	LDA	#$00			; set null precedence (flag done)
000AAFr 1               LAB_1ACC:
000AAFr 1  48           	PHA				; push precedence byte
000AB0r 1  A9 02        	LDA	#$02			; 2 bytes
000AB2r 1  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
000AB5r 1  20 rr rr     	JSR	LAB_GVAL		; get value from line
000AB8r 1  A9 00        	LDA	#$00			; clear A
000ABAr 1  85 9B        	STA	comp_f		; clear compare function flag
000ABCr 1               LAB_1ADB:
000ABCr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000ABFr 1               LAB_1ADE:
000ABFr 1  38           	SEC				; set carry for subtract
000AC0r 1  E9 BF        	SBC	#TK_GT		; subtract token for > (lowest comparison function)
000AC2r 1  90 17        	BCC	LAB_1AFA		; branch if < TK_GT
000AC4r 1               
000AC4r 1  C9 03        	CMP	#$03			; compare with ">" to "<" tokens
000AC6r 1  B0 13        	BCS	LAB_1AFA		; branch if >= TK_SGN (highest evaluation function +1)
000AC8r 1               
000AC8r 1               					; was token for > = or < (A = 0, 1 or 2)
000AC8r 1  C9 01        	CMP	#$01			; compare with token for =
000ACAr 1  2A           	ROL				; *2, b0 = carry (=1 if token was = or <)
000ACBr 1               					; (A = 0, 3 or 5)
000ACBr 1  49 01        	EOR	#$01			; toggle b0
000ACDr 1               					; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
000ACDr 1  45 9B        	EOR	comp_f		; EOR with compare function flag bits
000ACFr 1  C5 9B        	CMP	comp_f		; compare with compare function flag
000AD1r 1  90 67        	BCC	LAB_1B53		; if <(comp_f) do syntax error then warm start
000AD3r 1               					; was more than one <, = or >)
000AD3r 1               
000AD3r 1  85 9B        	STA	comp_f		; save new compare function flag
000AD5r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000AD8r 1  4C rr rr     	JMP	LAB_1ADE		; go do next character
000ADBr 1               
000ADBr 1               					; token is < ">" or > "<" tokens
000ADBr 1               LAB_1AFA:
000ADBr 1  A6 9B        	LDX	comp_f		; get compare function flag
000ADDr 1  D0 2C        	BNE	LAB_1B2A		; branch if compare function
000ADFr 1               
000ADFr 1  B0 79        	BCS	LAB_1B78		; go do functions
000AE1r 1               
000AE1r 1               					; else was <  TK_GT so is operator or lower
000AE1r 1  69 0A        	ADC	#TK_GT-TK_PLUS	; add # of operators (+, -, *, /, ^, AND, OR or EOR)
000AE3r 1  90 75        	BCC	LAB_1B78		; branch if < + operator
000AE5r 1               
000AE5r 1               					; carry was set so token was +, -, *, /, ^, AND, OR or EOR
000AE5r 1  D0 07        	BNE	LAB_1B0B		; branch if not + token
000AE7r 1               
000AE7r 1  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000AE9r 1  10 03        	BPL	LAB_1B0B		; branch if not string
000AEBr 1               
000AEBr 1               					; will only be $00 if type is string and token was +
000AEBr 1  4C rr rr     	JMP	LAB_224D		; add strings, string 1 is in descriptor des_pl, string 2
000AEEr 1               					; is in line, and return
000AEEr 1               
000AEEr 1               LAB_1B0B:
000AEEr 1  85 71        	STA	ut1_pl		; save it
000AF0r 1  0A           	ASL				; *2
000AF1r 1  65 71        	ADC	ut1_pl		; *3
000AF3r 1  A8           	TAY				; copy to index
000AF4r 1               LAB_1B13:
000AF4r 1  68           	PLA				; pull previous precedence
000AF5r 1  D9 rr rr     	CMP	LAB_OPPT,Y		; compare with precedence byte
000AF8r 1  B0 65        	BCS	LAB_1B7D		; branch if A >=
000AFAr 1               
000AFAr 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000AFDr 1               LAB_1B1C:
000AFDr 1  48           	PHA				; save precedence
000AFEr 1               LAB_1B1D:
000AFEr 1  20 rr rr     	JSR	LAB_1B43		; get vector, execute function then continue evaluation
000B01r 1  68           	PLA				; restore precedence
000B02r 1  A4 99        	LDY	prstk			; get precedence stacked flag
000B04r 1  10 19        	BPL	LAB_1B3C		; branch if stacked values
000B06r 1               
000B06r 1  AA           	TAX				; copy precedence (set flags)
000B07r 1  F0 76        	BEQ	LAB_1B9D		; exit if done
000B09r 1               
000B09r 1  D0 5D        	BNE	LAB_1B86		; else pop FAC2 and return, branch always
000B0Br 1               
000B0Br 1               LAB_1B2A:
000B0Br 1  26 5F        	ROL	Dtypef		; shift data type flag into Cb
000B0Dr 1  8A           	TXA				; copy compare function flag
000B0Er 1  85 5F        	STA	Dtypef		; clear data type flag, X is 0xxx xxxx
000B10r 1  2A           	ROL				; shift data type into compare function byte b0
000B11r 1  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
000B13r 1  D0 02        	BNE	LAB_1B34		; branch if no underflow
000B15r 1               
000B15r 1  C6 C4        	DEC	Bpntrh		; else decrement BASIC execute pointer high byte
000B17r 1               LAB_1B34:
000B17r 1  C6 C3        	DEC	Bpntrl		; decrement BASIC execute pointer low byte
000B19r 1               TK_LT_PLUS	= TK_LT-TK_PLUS
000B19r 1  A0 24        	LDY	#TK_LT_PLUS*3	; set offset to last operator entry
000B1Br 1  85 9B        	STA	comp_f		; save new compare function flag
000B1Dr 1  D0 D5        	BNE	LAB_1B13		; branch always
000B1Fr 1               
000B1Fr 1               LAB_1B3C:
000B1Fr 1  D9 rr rr     	CMP	LAB_OPPT,Y		;.compare with stacked function precedence
000B22r 1  B0 44        	BCS	LAB_1B86		; branch if A >=, pop FAC2 and return
000B24r 1               
000B24r 1  90 D7        	BCC	LAB_1B1C		; branch always
000B26r 1               
000B26r 1               ;.get vector, execute function then continue evaluation
000B26r 1               
000B26r 1               LAB_1B43:
000B26r 1  B9 rr rr     	LDA	LAB_OPPT+2,Y	; get function vector high byte
000B29r 1  48           	PHA				; onto stack
000B2Ar 1  B9 rr rr     	LDA	LAB_OPPT+1,Y	; get function vector low byte
000B2Dr 1  48           	PHA				; onto stack
000B2Er 1               					; now push sign, round FAC1 and put on stack
000B2Er 1  20 rr rr     	JSR	LAB_1B5B		; function will return here, then the next RTS will call
000B31r 1               					; the function
000B31r 1  A5 9B        	LDA	comp_f		; get compare function flag
000B33r 1  48           	PHA				; push compare evaluation byte
000B34r 1  B9 rr rr     	LDA	LAB_OPPT,Y		; get precedence byte
000B37r 1  4C rr rr     	JMP	LAB_1ACC		; continue evaluating expression
000B3Ar 1               
000B3Ar 1               LAB_1B53:
000B3Ar 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
000B3Dr 1               
000B3Dr 1               ; push sign, round FAC1 and put on stack
000B3Dr 1               
000B3Dr 1               LAB_1B5B:
000B3Dr 1  68           	PLA				; get return addr low byte
000B3Er 1  85 71        	STA	ut1_pl		; save it
000B40r 1  E6 71        	INC	ut1_pl		; increment it (was ret-1 pushed? yes!)
000B42r 1               					; note! no check is made on the high byte! if the calling
000B42r 1               					; routine assembles to a page edge then this all goes
000B42r 1               					; horribly wrong !!!
000B42r 1  68           	PLA				; get return addr high byte
000B43r 1  85 72        	STA	ut1_ph		; save it
000B45r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000B47r 1  48           	PHA				; push sign
000B48r 1               
000B48r 1               ; round FAC1 and put on stack
000B48r 1               
000B48r 1               LAB_1B66:
000B48r 1  20 rr rr     	JSR	LAB_27BA		; round FAC1
000B4Br 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000B4Dr 1  48           	PHA				; push on stack
000B4Er 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000B50r 1  48           	PHA				; push on stack
000B51r 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
000B53r 1  48           	PHA				; push on stack
000B54r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000B56r 1  48           	PHA				; push on stack
000B57r 1  6C 71 00     	JMP	(ut1_pl)		; return, sort of
000B5Ar 1               
000B5Ar 1               ; do functions
000B5Ar 1               
000B5Ar 1               LAB_1B78:
000B5Ar 1  A0 FF        	LDY	#$FF			; flag function
000B5Cr 1  68           	PLA				; pull precedence byte
000B5Dr 1               LAB_1B7B:
000B5Dr 1  F0 20        	BEQ	LAB_1B9D		; exit if done
000B5Fr 1               
000B5Fr 1               LAB_1B7D:
000B5Fr 1  C9 64        	CMP	#$64			; compare previous precedence with $64
000B61r 1  F0 03        	BEQ	LAB_1B84		; branch if was $64 (< function)
000B63r 1               
000B63r 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000B66r 1               LAB_1B84:
000B66r 1  84 99        	STY	prstk			; save precedence stacked flag
000B68r 1               
000B68r 1               					; pop FAC2 and return
000B68r 1               LAB_1B86:
000B68r 1  68           	PLA				; pop byte
000B69r 1  4A           	LSR				; shift out comparison evaluation lowest bit
000B6Ar 1  85 63        	STA	Cflag			; save comparison evaluation flag
000B6Cr 1  68           	PLA				; pop exponent
000B6Dr 1  85 B3        	STA	FAC2_e		; save FAC2 exponent
000B6Fr 1  68           	PLA				; pop mantissa1
000B70r 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
000B72r 1  68           	PLA				; pop mantissa2
000B73r 1  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
000B75r 1  68           	PLA				; pop mantissa3
000B76r 1  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
000B78r 1  68           	PLA				; pop sign
000B79r 1  85 B7        	STA	FAC2_s		; save FAC2 sign (b7)
000B7Br 1  45 B0        	EOR	FAC1_s		; EOR FAC1 sign (b7)
000B7Dr 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
000B7Fr 1               LAB_1B9D:
000B7Fr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000B81r 1  60           	RTS
000B82r 1               
000B82r 1               ; print "..." string to string util area
000B82r 1               
000B82r 1               LAB_1BC1:
000B82r 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
000B84r 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
000B86r 1  69 00        	ADC	#$00			; add carry to low byte
000B88r 1  90 01        	BCC	LAB_1BCA		; branch if no overflow
000B8Ar 1               
000B8Ar 1  C8           	INY				; increment high byte
000B8Br 1               LAB_1BCA:
000B8Br 1  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
000B8Er 1  4C rr rr     	JMP	LAB_23F3		; restore BASIC execute pointer from temp and return
000B91r 1               
000B91r 1               ; get value from line
000B91r 1               
000B91r 1               LAB_GVAL:
000B91r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000B94r 1  B0 03        	BCS	LAB_1BAC		; branch if not numeric character
000B96r 1               
000B96r 1               					; else numeric string found (e.g. 123)
000B96r 1               LAB_1BA9:
000B96r 1  4C rr rr     	JMP	LAB_2887		; get FAC1 from string and return
000B99r 1               
000B99r 1               ; get value from line .. continued
000B99r 1               
000B99r 1               					; wasn't a number so ..
000B99r 1               LAB_1BAC:
000B99r 1  AA           	TAX				; set the flags
000B9Ar 1  30 2F        	BMI	LAB_1BD0		; if -ve go test token values
000B9Cr 1               
000B9Cr 1               					; else it is either a string, number, variable or (<expr>)
000B9Cr 1  C9 24        	CMP	#'$'			; compare with "$"
000B9Er 1  F0 F6        	BEQ	LAB_1BA9		; branch if "$", hex number
000BA0r 1               
000BA0r 1  C9 25        	CMP	#'%'			; else compare with "%"
000BA2r 1  F0 F2        	BEQ	LAB_1BA9		; branch if "%", binary number
000BA4r 1               
000BA4r 1  C9 2E        	CMP	#'.'			; compare with "."
000BA6r 1  F0 EE        	BEQ	LAB_1BA9		; if so get FAC1 from string and return (e.g. was .123)
000BA8r 1               
000BA8r 1               					; it wasn't any sort of number so ..
000BA8r 1  C9 22        	CMP	#$22			; compare with "
000BAAr 1  F0 D6        	BEQ	LAB_1BC1		; branch if open quote
000BACr 1               
000BACr 1               					; wasn't any sort of number so ..
000BACr 1               
000BACr 1               ; evaluate expression within parentheses
000BACr 1               
000BACr 1  C9 28        	CMP	#'('			; compare with "("
000BAEr 1  D0 4F        	BNE	LAB_1C18		; if not "(" get (var), return value in FAC1 and $ flag
000BB0r 1               
000BB0r 1               LAB_1BF7:
000BB0r 1  20 rr rr     	JSR	LAB_EVEZ		; evaluate expression, no decrement
000BB3r 1               
000BB3r 1               ; all the 'scan for' routines return the character after the sought character
000BB3r 1               
000BB3r 1               ; scan for ")" , else do syntax error then warm start
000BB3r 1               
000BB3r 1               LAB_1BFB:
000BB3r 1  A9 29        	LDA	#$29			; load A with ")"
000BB5r 1               
000BB5r 1               ; scan for CHR$(A) , else do syntax error then warm start
000BB5r 1               
000BB5r 1               LAB_SCCA:
000BB5r 1  A0 00        	LDY	#$00			; clear index
000BB7r 1  D1 C3        	CMP	(Bpntrl),Y		; check next byte is = A
000BB9r 1  D0 0B        	BNE	LAB_SNER		; if not do syntax error then warm start
000BBBr 1               
000BBBr 1  4C BC 00     	JMP	LAB_IGBY		; increment and scan memory then return
000BBEr 1               
000BBEr 1               ; scan for "(" , else do syntax error then warm start
000BBEr 1               
000BBEr 1               LAB_1BFE:
000BBEr 1  A9 28        	LDA	#$28			; load A with "("
000BC0r 1  D0 F3        	BNE	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000BC2r 1               					; (branch always)
000BC2r 1               
000BC2r 1               ; scan for "," , else do syntax error then warm start
000BC2r 1               
000BC2r 1               LAB_1C01:
000BC2r 1  A9 2C        	LDA	#$2C			; load A with ","
000BC4r 1  D0 EF        	BNE	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000BC6r 1               					; (branch always)
000BC6r 1               
000BC6r 1               ; syntax error then warm start
000BC6r 1               
000BC6r 1               LAB_SNER:
000BC6r 1  A2 02        	LDX	#$02			; error code $02 ("Syntax" error)
000BC8r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000BCBr 1               
000BCBr 1               ; get value from line .. continued
000BCBr 1               ; do tokens
000BCBr 1               
000BCBr 1               LAB_1BD0:
000BCBr 1  C9 B6        	CMP	#TK_MINUS		; compare with token for -
000BCDr 1  F0 29        	BEQ	LAB_1C11		; branch if - token (do set-up for functions)
000BCFr 1               
000BCFr 1               					; wasn't -n so ..
000BCFr 1  C9 B5        	CMP	#TK_PLUS		; compare with token for +
000BD1r 1  F0 BE        	BEQ	LAB_GVAL		; branch if + token (+n = n so ignore leading +)
000BD3r 1               
000BD3r 1  C9 B0        	CMP	#TK_NOT		; compare with token for NOT
000BD5r 1  D0 13        	BNE	LAB_1BE7		; branch if not token for NOT
000BD7r 1               
000BD7r 1               					; was NOT token
000BD7r 1               TK_EQUAL_PLUS	= TK_EQUAL-TK_PLUS
000BD7r 1  A0 21        	LDY	#TK_EQUAL_PLUS*3	; offset to NOT function
000BD9r 1  D0 1F        	BNE	LAB_1C13		; do set-up for function then execute (branch always)
000BDBr 1               
000BDBr 1               ; do = compare
000BDBr 1               
000BDBr 1               LAB_EQUAL:
000BDBr 1  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000BDEr 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000BE0r 1  49 FF        	EOR	#$FF			; invert it
000BE2r 1  A8           	TAY				; copy it
000BE3r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000BE5r 1  49 FF        	EOR	#$FF			; invert it
000BE7r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000BEAr 1               
000BEAr 1               ; get value from line .. continued
000BEAr 1               
000BEAr 1               					; wasn't +, -, or NOT so ..
000BEAr 1               LAB_1BE7:
000BEAr 1  C9 AD        	CMP	#TK_FN		; compare with token for FN
000BECr 1  D0 03        	BNE	LAB_1BEE		; branch if not token for FN
000BEEr 1               
000BEEr 1  4C rr rr     	JMP	LAB_201E		; go evaluate FNx
000BF1r 1               
000BF1r 1               ; get value from line .. continued
000BF1r 1               
000BF1r 1               					; wasn't +, -, NOT or FN so ..
000BF1r 1               LAB_1BEE:
000BF1r 1  E9 C2        	SBC	#TK_SGN		; subtract with token for SGN
000BF3r 1  B0 19        	BCS	LAB_1C27		; if a function token go do it
000BF5r 1               
000BF5r 1  4C rr rr     	JMP	LAB_SNER		; else do syntax error
000BF8r 1               
000BF8r 1               ; set-up for functions
000BF8r 1               
000BF8r 1               LAB_1C11:
000BF8r 1               TK_GT_PLUS	= TK_GT-TK_PLUS
000BF8r 1  A0 1E        	LDY	#TK_GT_PLUS*3	; set offset from base to > operator
000BFAr 1               LAB_1C13:
000BFAr 1  68           	PLA				; dump return address low byte
000BFBr 1  68           	PLA				; dump return address high byte
000BFCr 1  4C rr rr     	JMP	LAB_1B1D		; execute function then continue evaluation
000BFFr 1               
000BFFr 1               ; variable name set-up
000BFFr 1               ; get (var), return value in FAC_1 and $ flag
000BFFr 1               
000BFFr 1               LAB_1C18:
000BFFr 1  20 rr rr     	JSR	LAB_GVAR		; get (var) address
000C02r 1  85 AE        	STA	FAC1_2		; save address low byte in FAC1 mantissa2
000C04r 1  84 AF        	STY	FAC1_3		; save address high byte in FAC1 mantissa3
000C06r 1  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
000C08r 1  30 03        	BMI	LAB_1C25		; if string then return (does RTS)
000C0Ar 1               
000C0Ar 1               LAB_1C24:
000C0Ar 1  4C rr rr     	JMP	LAB_UFAC		; unpack memory (AY) into FAC1
000C0Dr 1               
000C0Dr 1               LAB_1C25:
000C0Dr 1  60           	RTS
000C0Er 1               
000C0Er 1               ; get value from line .. continued
000C0Er 1               ; only functions left so ..
000C0Er 1               
000C0Er 1               ; set up function references
000C0Er 1               
000C0Er 1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
000C0Er 1               ; to process function calls. now the function vector is computed and pushed on the stack
000C0Er 1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
000C0Er 1               ; is calculated and the routine called, if not this routine just does RTS. whichever
000C0Er 1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
000C0Er 1               ; the function code
000C0Er 1               
000C0Er 1               ; this also removes some less than elegant code that was used to bypass type checking
000C0Er 1               ; for functions that returned strings
000C0Er 1               
000C0Er 1               LAB_1C27:
000C0Er 1  0A           	ASL				; *2 (2 bytes per function address)
000C0Fr 1  A8           	TAY				; copy to index
000C10r 1               
000C10r 1  B9 rr rr     	LDA	LAB_FTBM,Y		; get function jump vector high byte
000C13r 1  48           	PHA				; push functions jump vector high byte
000C14r 1  B9 rr rr     	LDA	LAB_FTBL,Y		; get function jump vector low byte
000C17r 1  48           	PHA				; push functions jump vector low byte
000C18r 1               
000C18r 1  B9 rr rr     	LDA	LAB_FTPM,Y		; get function pre process vector high byte
000C1Br 1  F0 05        	BEQ	LAB_1C56		; skip pre process if null vector
000C1Dr 1               
000C1Dr 1  48           	PHA				; push functions pre process vector high byte
000C1Er 1  B9 rr rr     	LDA	LAB_FTPL,Y		; get function pre process vector low byte
000C21r 1  48           	PHA				; push functions pre process vector low byte
000C22r 1               
000C22r 1               LAB_1C56:
000C22r 1  60           	RTS				; do function, or pre process, call
000C23r 1               
000C23r 1               ; process string expression in parenthesis
000C23r 1               
000C23r 1               LAB_PPFS:
000C23r 1  20 rr rr     	JSR	LAB_1BF7		; process expression in parenthesis
000C26r 1  4C rr rr     	JMP	LAB_CTST		; check if source is string then do function,
000C29r 1               					; else do type mismatch
000C29r 1               
000C29r 1               ; process numeric expression in parenthesis
000C29r 1               
000C29r 1               LAB_PPFN:
000C29r 1  20 rr rr     	JSR	LAB_1BF7		; process expression in parenthesis
000C2Cr 1  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric then do function,
000C2Fr 1               					; else do type mismatch
000C2Fr 1               
000C2Fr 1               ; set numeric data type and increment BASIC execute pointer
000C2Fr 1               
000C2Fr 1               LAB_PPBI:
000C2Fr 1  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
000C31r 1  4C BC 00     	JMP	LAB_IGBY		; increment and scan memory then do function
000C34r 1               
000C34r 1               ; process string for LEFT$, RIGHT$ or MID$
000C34r 1               
000C34r 1               LAB_LRMS:
000C34r 1  20 rr rr     	JSR	LAB_EVEZ		; evaluate (should be string) expression
000C37r 1  20 rr rr     	JSR	LAB_1C01		; scan for ",", else do syntax error then warm start
000C3Ar 1  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
000C3Dr 1               
000C3Dr 1  68           	PLA				; get function jump vector low byte
000C3Er 1  AA           	TAX				; save functions jump vector low byte
000C3Fr 1  68           	PLA				; get function jump vector high byte
000C40r 1  A8           	TAY				; save functions jump vector high byte
000C41r 1  A5 AF        	LDA	des_ph		; get descriptor pointer high byte
000C43r 1  48           	PHA				; push string pointer high byte
000C44r 1  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
000C46r 1  48           	PHA				; push string pointer low byte
000C47r 1  98           	TYA				; get function jump vector high byte back
000C48r 1  48           	PHA				; save functions jump vector high byte
000C49r 1  8A           	TXA				; get function jump vector low byte back
000C4Ar 1  48           	PHA				; save functions jump vector low byte
000C4Br 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
000C4Er 1  8A           	TXA				; copy byte parameter to A
000C4Fr 1  60           	RTS				; go do function
000C50r 1               
000C50r 1               ; process numeric expression(s) for BIN$ or HEX$
000C50r 1               
000C50r 1               LAB_BHSS:
000C50r 1  20 rr rr     	JSR	LAB_EVEZ		; process expression
000C53r 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000C56r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000C58r 1  C9 98        	CMP	#$98			; compare with exponent = 2^24
000C5Ar 1  B0 20        	BCS	LAB_BHER		; branch if n>=2^24 (is too big)
000C5Cr 1               
000C5Cr 1  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
000C5Fr 1  A2 02        	LDX	#$02			; 3 bytes to do
000C61r 1               LAB_CFAC:
000C61r 1  B5 AD        	LDA	FAC1_1,X		; get byte from FAC1
000C63r 1  95 41        	STA	nums_1,X		; save byte to temp
000C65r 1  CA           	DEX				; decrement index
000C66r 1  10 F9        	BPL	LAB_CFAC		; copy FAC1 mantissa to temp
000C68r 1               
000C68r 1  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
000C6Br 1  A2 00        	LDX	#$00			; set default to no leading "0"s
000C6Dr 1  C9 29        	CMP	#')'			; compare with close bracket
000C6Fr 1  F0 0A        	BEQ	LAB_1C54		; if ")" go do rest of function
000C71r 1               
000C71r 1  20 rr rr     	JSR	LAB_SCGB		; scan for "," and get byte
000C74r 1  20 C2 00     	JSR	LAB_GBYT		; get last byte back
000C77r 1  C9 29        	CMP	#')'			; is next character )
000C79r 1  D0 01        	BNE	LAB_BHER		; if not ")" go do error
000C7Br 1               
000C7Br 1               LAB_1C54:
000C7Br 1  60           	RTS				; else do function
000C7Cr 1               
000C7Cr 1               LAB_BHER:
000C7Cr 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
000C7Fr 1               
000C7Fr 1               ; perform EOR
000C7Fr 1               
000C7Fr 1               ; added operator format is the same as AND or OR, precedence is the same as OR
000C7Fr 1               
000C7Fr 1               ; this bit worked first time but it took a while to sort out the operator table
000C7Fr 1               ; pointers and offsets afterwards!
000C7Fr 1               
000C7Fr 1               LAB_EOR:
000C7Fr 1  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000C82r 1  45 5B        	EOR	XOAw_l		; EOR with expression 1 low byte
000C84r 1  A8           	TAY				; save in Y
000C85r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000C87r 1  45 5C        	EOR	XOAw_h		; EOR with expression 1 high byte
000C89r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000C8Cr 1               
000C8Cr 1               ; perform OR
000C8Cr 1               
000C8Cr 1               LAB_OR:
000C8Cr 1  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000C8Fr 1  05 5B        	ORA	XOAw_l		; OR with expression 1 low byte
000C91r 1  A8           	TAY				; save in Y
000C92r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000C94r 1  05 5C        	ORA	XOAw_h		; OR with expression 1 high byte
000C96r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000C99r 1               
000C99r 1               ; perform AND
000C99r 1               
000C99r 1               LAB_AND:
000C99r 1  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000C9Cr 1  25 5B        	AND	XOAw_l		; AND with expression 1 low byte
000C9Er 1  A8           	TAY				; save in Y
000C9Fr 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CA1r 1  25 5C        	AND	XOAw_h		; AND with expression 1 high byte
000CA3r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000CA6r 1               
000CA6r 1               ; get first value for OR, AND or EOR
000CA6r 1               
000CA6r 1               GetFirst:
000CA6r 1  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000CA9r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CABr 1  85 5C        	STA	XOAw_h		; save it
000CADr 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000CAFr 1  85 5B        	STA	XOAw_l		; save it
000CB1r 1  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1 (get 2nd value in expression)
000CB4r 1  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000CB7r 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000CB9r 1               LAB_1C95:
000CB9r 1  60           	RTS
000CBAr 1               
000CBAr 1               ; perform comparisons
000CBAr 1               
000CBAr 1               ; do < compare
000CBAr 1               
000CBAr 1               LAB_LTHAN:
000CBAr 1  20 rr rr     	JSR	LAB_CKTM		; type match check, set C for string
000CBDr 1  B0 13        	BCS	LAB_1CAE		; branch if string
000CBFr 1               
000CBFr 1               					; do numeric < compare
000CBFr 1  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
000CC1r 1  09 7F        	ORA	#$7F			; set all non sign bits
000CC3r 1  25 B4        	AND	FAC2_1		; and FAC2 mantissa1 (AND in sign bit)
000CC5r 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
000CC7r 1  A9 B3        	LDA	#<FAC2_e		; set pointer low byte to FAC2
000CC9r 1  A0 00        	LDY	#>FAC2_e		; set pointer high byte to FAC2
000CCBr 1  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with FAC2 (AY)
000CCEr 1  AA           	TAX				; copy result
000CCFr 1  4C rr rr     	JMP	LAB_1CE1		; go evaluate result
000CD2r 1               
000CD2r 1               					; do string < compare
000CD2r 1               LAB_1CAE:
000CD2r 1  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
000CD4r 1  C6 9B        	DEC	comp_f		; clear < bit in compare function flag
000CD6r 1  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
000CD9r 1               					; space returns with A = length, X=pointer low byte,
000CD9r 1               					; Y=pointer high byte
000CD9r 1  85 AC        	STA	str_ln		; save length
000CDBr 1  86 AD        	STX	str_pl		; save string pointer low byte
000CDDr 1  84 AE        	STY	str_ph		; save string pointer high byte
000CDFr 1  A5 B5        	LDA	FAC2_2		; get descriptor pointer low byte
000CE1r 1  A4 B6        	LDY	FAC2_3		; get descriptor pointer high byte
000CE3r 1  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
000CE6r 1               					; returns with A = length, X=pointer low byte,
000CE6r 1               					; Y=pointer high byte
000CE6r 1  86 B5        	STX	FAC2_2		; save string pointer low byte
000CE8r 1  84 B6        	STY	FAC2_3		; save string pointer high byte
000CEAr 1  AA           	TAX				; copy length
000CEBr 1  38           	SEC				; set carry for subtract
000CECr 1  E5 AC        	SBC	str_ln		; subtract string 1 length
000CEEr 1  F0 08        	BEQ	LAB_1CD6		; branch if str 1 length = string 2 length
000CF0r 1               
000CF0r 1  A9 01        	LDA	#$01			; set str 1 length > string 2 length
000CF2r 1  90 04        	BCC	LAB_1CD6		; branch if so
000CF4r 1               
000CF4r 1  A6 AC        	LDX	str_ln		; get string 1 length
000CF6r 1  A9 FF        	LDA	#$FF			; set str 1 length < string 2 length
000CF8r 1               LAB_1CD6:
000CF8r 1  85 B0        	STA	FAC1_s		; save length compare
000CFAr 1  A0 FF        	LDY	#$FF			; set index
000CFCr 1  E8           	INX				; adjust for loop
000CFDr 1               LAB_1CDB:
000CFDr 1  C8           	INY				; increment index
000CFEr 1  CA           	DEX				; decrement count
000CFFr 1  D0 07        	BNE	LAB_1CE6		; branch if still bytes to do
000D01r 1               
000D01r 1  A6 B0        	LDX	FAC1_s		; get length compare back
000D03r 1               LAB_1CE1:
000D03r 1  30 0F        	BMI	LAB_1CF2		; branch if str 1 < str 2
000D05r 1               
000D05r 1  18           	CLC				; flag str 1 <= str 2
000D06r 1  90 0C        	BCC	LAB_1CF2		; go evaluate result
000D08r 1               
000D08r 1               LAB_1CE6:
000D08r 1  B1 B5        	LDA	(FAC2_2),Y		; get string 2 byte
000D0Ar 1  D1 AD        	CMP	(FAC1_1),Y		; compare with string 1 byte
000D0Cr 1  F0 EF        	BEQ	LAB_1CDB		; loop if bytes =
000D0Er 1               
000D0Er 1  A2 FF        	LDX	#$FF			; set str 1 < string 2
000D10r 1  B0 02        	BCS	LAB_1CF2		; branch if so
000D12r 1               
000D12r 1  A2 01        	LDX	#$01			;  set str 1 > string 2
000D14r 1               LAB_1CF2:
000D14r 1  E8           	INX				; x = 0, 1 or 2
000D15r 1  8A           	TXA				; copy to A
000D16r 1  2A           	ROL				; *2 (1, 2 or 4)
000D17r 1  25 63        	AND	Cflag			; AND with comparison evaluation flag
000D19r 1  F0 02        	BEQ	LAB_1CFB		; branch if 0 (compare is false)
000D1Br 1               
000D1Br 1  A9 FF        	LDA	#$FF			; else set result true
000D1Dr 1               LAB_1CFB:
000D1Dr 1  4C rr rr     	JMP	LAB_27DB		; save A as integer byte and return
000D20r 1               
000D20r 1               LAB_1CFE:
000D20r 1  20 rr rr     	JSR	LAB_1C01		; scan for ",", else do syntax error then warm start
000D23r 1               
000D23r 1               ; perform DIM
000D23r 1               
000D23r 1               LAB_DIM:
000D23r 1  AA           	TAX				; copy "DIM" flag to X
000D24r 1  20 rr rr     	JSR	LAB_1D10		; search for variable
000D27r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000D2Ar 1  D0 F4        	BNE	LAB_1CFE		; scan for "," and loop if not null
000D2Cr 1               
000D2Cr 1  60           	RTS
000D2Dr 1               
000D2Dr 1               ; perform << (left shift)
000D2Dr 1               
000D2Dr 1               LAB_LSHIFT:
000D2Dr 1  20 rr rr     	JSR	GetPair		; get integer expression and byte (no sign check)
000D30r 1  A5 AE        	LDA	FAC1_2		; get expression high byte
000D32r 1  A6 78        	LDX	TempB			; get shift count
000D34r 1  F0 22        	BEQ	NoShift		; branch if zero
000D36r 1               
000D36r 1  E0 10        	CPX	#$10			; compare bit count with 16d
000D38r 1  B0 23        	BCS	TooBig		; branch if >=
000D3Ar 1               
000D3Ar 1               Ls_loop:
000D3Ar 1  06 AF        	ASL	FAC1_3		; shift low byte
000D3Cr 1  2A           	ROL				; shift high byte
000D3Dr 1  CA           	DEX				; decrement bit count
000D3Er 1  D0 FA        	BNE	Ls_loop		; loop if shift not complete
000D40r 1               
000D40r 1  A4 AF        	LDY	FAC1_3		; get expression low byte
000D42r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D45r 1               
000D45r 1               ; perform >> (right shift)
000D45r 1               
000D45r 1               LAB_RSHIFT:
000D45r 1  20 rr rr     	JSR	GetPair		; get integer expression and byte (no sign check)
000D48r 1  A5 AE        	LDA	FAC1_2		; get expression high byte
000D4Ar 1  A6 78        	LDX	TempB			; get shift count
000D4Cr 1  F0 0A        	BEQ	NoShift		; branch if zero
000D4Er 1               
000D4Er 1  E0 10        	CPX	#$10			; compare bit count with 16d
000D50r 1  B0 0B        	BCS	TooBig		; branch if >=
000D52r 1               
000D52r 1               Rs_loop:
000D52r 1  4A           	LSR				; shift high byte
000D53r 1  66 AF        	ROR	FAC1_3		; shift low byte
000D55r 1  CA           	DEX				; decrement bit count
000D56r 1  D0 FA        	BNE	Rs_loop		; loop if shift not complete
000D58r 1               
000D58r 1               NoShift:
000D58r 1  A4 AF        	LDY	FAC1_3		; get expression low byte
000D5Ar 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D5Dr 1               
000D5Dr 1               TooBig:
000D5Dr 1  A9 00        	LDA	#$00			; clear high byte
000D5Fr 1  A8           	TAY				; copy to low byte
000D60r 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D63r 1               
000D63r 1               GetPair:
000D63r 1  20 rr rr     	JSR	LAB_EVBY		; evaluate byte expression, result in X
000D66r 1  86 78        	STX	TempB			; save it
000D68r 1  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1 (get 2nd value in expression)
000D6Br 1  4C rr rr     	JMP	LAB_EVIR		; evaluate integer expression (no sign check)
000D6Er 1               
000D6Er 1               ; search for variable
000D6Er 1               
000D6Er 1               ; return pointer to variable in Cvaral/Cvarah
000D6Er 1               
000D6Er 1               LAB_GVAR:
000D6Er 1  A2 00        	LDX	#$00			; set DIM flag = $00
000D70r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory (1st character)
000D73r 1               LAB_1D10:
000D73r 1  86 5E        	STX	Defdim		; save DIM flag
000D75r 1               LAB_1D12:
000D75r 1  85 93        	STA	Varnm1		; save 1st character
000D77r 1  29 7F        	AND	#$7F			; clear FN flag bit
000D79r 1  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000D7Cr 1  B0 03        	BCS	LAB_1D1F		; branch if ok
000D7Er 1               
000D7Er 1  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
000D81r 1               
000D81r 1               					; was variable name so ..
000D81r 1               LAB_1D1F:
000D81r 1  A2 00        	LDX	#$00			; clear 2nd character temp
000D83r 1  86 5F        	STX	Dtypef		; clear data type flag, $FF=string, $00=numeric
000D85r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (2nd character)
000D88r 1  90 05        	BCC	LAB_1D2D		; branch if character = "0"-"9" (ok)
000D8Ar 1               
000D8Ar 1               					; 2nd character wasn't "0" to "9" so ..
000D8Ar 1  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000D8Dr 1  90 0B        	BCC	LAB_1D38		; branch if <"A" or >"Z" (go check if string)
000D8Fr 1               
000D8Fr 1               LAB_1D2D:
000D8Fr 1  AA           	TAX				; copy 2nd character
000D90r 1               
000D90r 1               					; ignore further (valid) characters in the variable name
000D90r 1               LAB_1D2E:
000D90r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (3rd character)
000D93r 1  90 FB        	BCC	LAB_1D2E		; loop if character = "0"-"9" (ignore)
000D95r 1               
000D95r 1  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000D98r 1  B0 F6        	BCS	LAB_1D2E		; loop if character = "A"-"Z" (ignore)
000D9Ar 1               
000D9Ar 1               					; check if string variable
000D9Ar 1               LAB_1D38:
000D9Ar 1  C9 24        	CMP	#'$'			; compare with "$"
000D9Cr 1  D0 0B        	BNE	LAB_1D47		; branch if not string
000D9Er 1               
000D9Er 1               ; to introduce a new variable type (% suffix for integers say) then this branch
000D9Er 1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
000D9Er 1               
000D9Er 1               					; type is string
000D9Er 1  A9 FF        	LDA	#$FF			; set data type = string
000DA0r 1  85 5F        	STA	Dtypef		; set data type flag, $FF=string, $00=numeric
000DA2r 1  8A           	TXA				; get 2nd character back
000DA3r 1  09 80        	ORA	#$80			; set top bit (indicate string var)
000DA5r 1  AA           	TAX				; copy back to 2nd character temp
000DA6r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000DA9r 1               
000DA9r 1               ; after we have determined the variable type we need to come back here to determine
000DA9r 1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
000DA9r 1               
000DA9r 1               
000DA9r 1               LAB_1D47:				; gets here with character after var name in A
000DA9r 1  86 94        	STX	Varnm2		; save 2nd character
000DABr 1  05 61        	ORA	Sufnxf		; or with subscript/FNX flag (or FN name)
000DADr 1  C9 28        	CMP	#'('			; compare with "("
000DAFr 1  D0 03        	BNE	LAB_1D53		; branch if not "("
000DB1r 1               
000DB1r 1  4C rr rr     	JMP	LAB_1E17		; go find, or make, array
000DB4r 1               
000DB4r 1               ; either find or create var
000DB4r 1               ; var name (1st two characters only!) is in Varnm1,Varnm2
000DB4r 1               
000DB4r 1               					; variable name wasn't var(... so look for plain var
000DB4r 1               LAB_1D53:
000DB4r 1  A9 00        	LDA	#$00			; clear A
000DB6r 1  85 61        	STA	Sufnxf		; clear subscript/FNX flag
000DB8r 1  A5 7B        	LDA	Svarl			; get start of vars low byte
000DBAr 1  A6 7C        	LDX	Svarh			; get start of vars high byte
000DBCr 1  A0 00        	LDY	#$00			; clear index
000DBEr 1               LAB_1D5D:
000DBEr 1  86 AB        	STX	Vrschh		; save search address high byte
000DC0r 1               LAB_1D5F:
000DC0r 1  85 AA        	STA	Vrschl		; save search address low byte
000DC2r 1  E4 7E        	CPX	Sarryh		; compare high address with var space end
000DC4r 1  D0 04        	BNE	LAB_1D69		; skip next compare if <>
000DC6r 1               
000DC6r 1               					; high addresses were = so compare low addresses
000DC6r 1  C5 7D        	CMP	Sarryl		; compare low address with var space end
000DC8r 1  F0 2C        	BEQ	LAB_1D8B		; if not found go make new var
000DCAr 1               
000DCAr 1               LAB_1D69:
000DCAr 1  A5 93        	LDA	Varnm1		; get 1st character of var to find
000DCCr 1  D1 AA        	CMP	(Vrschl),Y		; compare with variable name 1st character
000DCEr 1  D0 08        	BNE	LAB_1D77		; branch if no match
000DD0r 1               
000DD0r 1               					; 1st characters match so compare 2nd characters
000DD0r 1  A5 94        	LDA	Varnm2		; get 2nd character of var to find
000DD2r 1  C8           	INY				; index to point to variable name 2nd character
000DD3r 1  D1 AA        	CMP	(Vrschl),Y		; compare with variable name 2nd character
000DD5r 1  F0 69        	BEQ	LAB_1DD7		; branch if match (found var)
000DD7r 1               
000DD7r 1  88           	DEY				; else decrement index (now = $00)
000DD8r 1               LAB_1D77:
000DD8r 1  18           	CLC				; clear carry for add
000DD9r 1  A5 AA        	LDA	Vrschl		; get search address low byte
000DDBr 1  69 06        	ADC	#$06			; +6 (offset to next var name)
000DDDr 1  90 E1        	BCC	LAB_1D5F		; loop if no overflow to high byte
000DDFr 1               
000DDFr 1  E8           	INX				; else increment high byte
000DE0r 1  D0 DC        	BNE	LAB_1D5D		; loop always (RAM doesn't extend to $FFFF !)
000DE2r 1               
000DE2r 1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
000DE2r 1               
000DE2r 1               LAB_CASC:
000DE2r 1  C9 61        	CMP	#'a'			; compare with "a"
000DE4r 1  B0 0A        	BCS	LAB_1D83		; go check <"z"+1
000DE6r 1               
000DE6r 1               ; check byte, return C=0 if<"A" or >"Z"
000DE6r 1               
000DE6r 1               LAB_1D82:
000DE6r 1  C9 41        	CMP	#'A'			; compare with "A"
000DE8r 1  90 05        	BCC	LAB_1D8A		; exit if less
000DEAr 1               
000DEAr 1               					; carry is set
000DEAr 1  E9 5B        	SBC	#$5B			; subtract "Z"+1
000DECr 1  38           	SEC				; set carry
000DEDr 1  E9 A5        	SBC	#$A5			; subtract $A5 (restore byte)
000DEFr 1               					; carry clear if byte>$5A
000DEFr 1               LAB_1D8A:
000DEFr 1  60           	RTS
000DF0r 1               
000DF0r 1               LAB_1D83:
000DF0r 1  E9 7B        	SBC	#$7B			; subtract "z"+1
000DF2r 1  38           	SEC				; set carry
000DF3r 1  E9 85        	SBC	#$85			; subtract $85 (restore byte)
000DF5r 1               					; carry clear if byte>$7A
000DF5r 1  60           	RTS
000DF6r 1               
000DF6r 1               					; reached end of variable mem without match
000DF6r 1               					; .. so create new variable
000DF6r 1               LAB_1D8B:
000DF6r 1  68           	PLA				; pop return address low byte
000DF7r 1  48           	PHA				; push return address low byte
000DF8r 1               LAB_1C18p2	= LAB_1C18+2
000DF8r 1  C9 rr        	CMP	#<LAB_1C18p2	; compare with expected calling routine return low byte
000DFAr 1  D0 05        	BNE	LAB_1D98		; if not get (var) go create new var
000DFCr 1               
000DFCr 1               ; This will only drop through if the call was from LAB_1C18 and is only called
000DFCr 1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
000DFCr 1               ; it prevents the creation of variables not assigned a value.
000DFCr 1               
000DFCr 1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
000DFCr 1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
000DFCr 1               
000DFCr 1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
000DFCr 1               
000DFCr 1               ; this is where you would put the undefined variable error call e.g.
000DFCr 1               
000DFCr 1               ;					; variable doesn't exist so flag error
000DFCr 1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
000DFCr 1               ;	JMP	LAB_XERR		; do error #X then warm start
000DFCr 1               
000DFCr 1               ; the above code has been tested and works a treat! (it replaces the three code lines
000DFCr 1               ; below)
000DFCr 1               
000DFCr 1               					; else return dummy null value
000DFCr 1  A9 rr        	LDA	#<LAB_1D96		; low byte point to $00,$00
000DFEr 1               					; (uses part of misc constants table)
000DFEr 1  A0 rr        	LDY	#>LAB_1D96		; high byte point to $00,$00
000E00r 1  60           	RTS
000E01r 1               
000E01r 1               					; create new numeric variable
000E01r 1               LAB_1D98:
000E01r 1  A5 7D        	LDA	Sarryl		; get var mem end low byte
000E03r 1  A4 7E        	LDY	Sarryh		; get var mem end high byte
000E05r 1  85 AA        	STA	Ostrtl		; save old block start low byte
000E07r 1  84 AB        	STY	Ostrth		; save old block start high byte
000E09r 1  A5 7F        	LDA	Earryl		; get array mem end low byte
000E0Br 1  A4 80        	LDY	Earryh		; get array mem end high byte
000E0Dr 1  85 A6        	STA	Obendl		; save old block end low byte
000E0Fr 1  84 A7        	STY	Obendh		; save old block end high byte
000E11r 1  18           	CLC				; clear carry for add
000E12r 1  69 06        	ADC	#$06			; +6 (space for one var)
000E14r 1  90 01        	BCC	LAB_1DAE		; branch if no overflow to high byte
000E16r 1               
000E16r 1  C8           	INY				; else increment high byte
000E17r 1               LAB_1DAE:
000E17r 1  85 A4        	STA	Nbendl		; set new block end low byte
000E19r 1  84 A5        	STY	Nbendh		; set new block end high byte
000E1Br 1  20 rr rr     	JSR	LAB_11CF		; open up space in memory
000E1Er 1  A5 A4        	LDA	Nbendl		; get new start low byte
000E20r 1  A4 A5        	LDY	Nbendh		; get new start high byte (-$100)
000E22r 1  C8           	INY				; correct high byte
000E23r 1  85 7D        	STA	Sarryl		; save new var mem end low byte
000E25r 1  84 7E        	STY	Sarryh		; save new var mem end high byte
000E27r 1  A0 00        	LDY	#$00			; clear index
000E29r 1  A5 93        	LDA	Varnm1		; get var name 1st character
000E2Br 1  91 AA        	STA	(Vrschl),Y		; save var name 1st character
000E2Dr 1  C8           	INY				; increment index
000E2Er 1  A5 94        	LDA	Varnm2		; get var name 2nd character
000E30r 1  91 AA        	STA	(Vrschl),Y		; save var name 2nd character
000E32r 1  A9 00        	LDA	#$00			; clear A
000E34r 1  C8           	INY				; increment index
000E35r 1  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E37r 1  C8           	INY				; increment index
000E38r 1  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E3Ar 1  C8           	INY				; increment index
000E3Br 1  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E3Dr 1  C8           	INY				; increment index
000E3Er 1  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E40r 1               
000E40r 1               					; found a match for var ((Vrschl) = ptr)
000E40r 1               LAB_1DD7:
000E40r 1  A5 AA        	LDA	Vrschl		; get var address low byte
000E42r 1  18           	CLC				; clear carry for add
000E43r 1  69 02        	ADC	#$02			; +2 (offset past var name bytes)
000E45r 1  A4 AB        	LDY	Vrschh		; get var address high byte
000E47r 1  90 01        	BCC	LAB_1DE1		; branch if no overflow from add
000E49r 1               
000E49r 1  C8           	INY				; else increment high byte
000E4Ar 1               LAB_1DE1:
000E4Ar 1  85 95        	STA	Cvaral		; save current var address low byte
000E4Cr 1  84 96        	STY	Cvarah		; save current var address high byte
000E4Er 1  60           	RTS
000E4Fr 1               
000E4Fr 1               ; set-up array pointer (Adatal/h) to first element in array
000E4Fr 1               ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
000E4Fr 1               
000E4Fr 1               LAB_1DE6:
000E4Fr 1  A5 5D        	LDA	Dimcnt		; get # of dimensions (1, 2 or 3)
000E51r 1  0A           	ASL				; *2 (also clears the carry !)
000E52r 1  69 05        	ADC	#$05			; +5 (result is 7, 9 or 11 here)
000E54r 1  65 AA        	ADC	Astrtl		; add array start pointer low byte
000E56r 1  A4 AB        	LDY	Astrth		; get array pointer high byte
000E58r 1  90 01        	BCC	LAB_1DF2		; branch if no overflow
000E5Ar 1               
000E5Ar 1  C8           	INY				; else increment high byte
000E5Br 1               LAB_1DF2:
000E5Br 1  85 A4        	STA	Adatal		; save array data pointer low byte
000E5Dr 1  84 A5        	STY	Adatah		; save array data pointer high byte
000E5Fr 1  60           	RTS
000E60r 1               
000E60r 1               ; evaluate integer expression
000E60r 1               
000E60r 1               LAB_EVIN:
000E60r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000E63r 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
000E66r 1               					; else do type mismatch
000E66r 1               
000E66r 1               ; evaluate integer expression (no check)
000E66r 1               
000E66r 1               LAB_EVPI:
000E66r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000E68r 1  30 0D        	BMI	LAB_1E12		; do function call error if -ve
000E6Ar 1               
000E6Ar 1               ; evaluate integer expression (no sign check)
000E6Ar 1               
000E6Ar 1               LAB_EVIR:
000E6Ar 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000E6Cr 1  C9 90        	CMP	#$90			; compare with exponent = 2^16 (n>2^15)
000E6Er 1  90 09        	BCC	LAB_1E14		; branch if n<2^16 (is ok)
000E70r 1               
000E70r 1  A9 rr        	LDA	#<LAB_1DF7		; set pointer low byte to -32768
000E72r 1  A0 rr        	LDY	#>LAB_1DF7		; set pointer high byte to -32768
000E74r 1  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
000E77r 1               LAB_1E12:
000E77r 1  D0 74        	BNE	LAB_FCER		; if <> do function call error then warm start
000E79r 1               
000E79r 1               LAB_1E14:
000E79r 1  4C rr rr     	JMP	LAB_2831		; convert FAC1 floating-to-fixed and return
000E7Cr 1               
000E7Cr 1               ; find or make array
000E7Cr 1               
000E7Cr 1               LAB_1E17:
000E7Cr 1  A5 5E        	LDA	Defdim		; get DIM flag
000E7Er 1  48           	PHA				; push it
000E7Fr 1  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
000E81r 1  48           	PHA				; push it
000E82r 1  A0 00        	LDY	#$00			; clear dimensions count
000E84r 1               
000E84r 1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
000E84r 1               
000E84r 1               LAB_1E1F:
000E84r 1  98           	TYA				; copy dimensions count
000E85r 1  48           	PHA				; save it
000E86r 1  A5 94        	LDA	Varnm2		; get array name 2nd byte
000E88r 1  48           	PHA				; save it
000E89r 1  A5 93        	LDA	Varnm1		; get array name 1st byte
000E8Br 1  48           	PHA				; save it
000E8Cr 1  20 rr rr     	JSR	LAB_EVIN		; evaluate integer expression
000E8Fr 1  68           	PLA				; pull array name 1st byte
000E90r 1  85 93        	STA	Varnm1		; restore array name 1st byte
000E92r 1  68           	PLA				; pull array name 2nd byte
000E93r 1  85 94        	STA	Varnm2		; restore array name 2nd byte
000E95r 1  68           	PLA				; pull dimensions count
000E96r 1  A8           	TAY				; restore it
000E97r 1  BA           	TSX				; copy stack pointer
000E98r 1  BD 02 01     	LDA	LAB_STAK+2,X	; get DIM flag
000E9Br 1  48           	PHA				; push it
000E9Cr 1  BD 01 01     	LDA	LAB_STAK+1,X	; get data type flag
000E9Fr 1  48           	PHA				; push it
000EA0r 1  A5 AE        	LDA	FAC1_2		; get this dimension size high byte
000EA2r 1  9D 02 01     	STA	LAB_STAK+2,X	; stack before flag bytes
000EA5r 1  A5 AF        	LDA	FAC1_3		; get this dimension size low byte
000EA7r 1  9D 01 01     	STA	LAB_STAK+1,X	; stack before flag bytes
000EAAr 1  C8           	INY				; increment dimensions count
000EABr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
000EAEr 1  C9 2C        	CMP	#','			; compare with ","
000EB0r 1  F0 D2        	BEQ	LAB_1E1F		; if found go do next dimension
000EB2r 1               
000EB2r 1  84 5D        	STY	Dimcnt		; store dimensions count
000EB4r 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
000EB7r 1  68           	PLA				; pull data type flag
000EB8r 1  85 5F        	STA	Dtypef		; restore data type flag, $FF=string, $00=numeric
000EBAr 1  68           	PLA				; pull DIM flag
000EBBr 1  85 5E        	STA	Defdim		; restore DIM flag
000EBDr 1  A6 7D        	LDX	Sarryl		; get array mem start low byte
000EBFr 1  A5 7E        	LDA	Sarryh		; get array mem start high byte
000EC1r 1               
000EC1r 1               ; now check to see if we are at the end of array memory (we would be if there were
000EC1r 1               ; no arrays).
000EC1r 1               
000EC1r 1               LAB_1E5C:
000EC1r 1  86 AA        	STX	Astrtl		; save as array start pointer low byte
000EC3r 1  85 AB        	STA	Astrth		; save as array start pointer high byte
000EC5r 1  C5 80        	CMP	Earryh		; compare with array mem end high byte
000EC7r 1  D0 04        	BNE	LAB_1E68		; branch if not reached array mem end
000EC9r 1               
000EC9r 1  E4 7F        	CPX	Earryl		; else compare with array mem end low byte
000ECBr 1  F0 39        	BEQ	LAB_1EA1		; go build array if not found
000ECDr 1               
000ECDr 1               					; search for array
000ECDr 1               LAB_1E68:
000ECDr 1  A0 00        	LDY	#$00			; clear index
000ECFr 1  B1 AA        	LDA	(Astrtl),Y		; get array name first byte
000ED1r 1  C8           	INY				; increment index to second name byte
000ED2r 1  C5 93        	CMP	Varnm1		; compare with this array name first byte
000ED4r 1  D0 06        	BNE	LAB_1E77		; branch if no match
000ED6r 1               
000ED6r 1  A5 94        	LDA	Varnm2		; else get this array name second byte
000ED8r 1  D1 AA        	CMP	(Astrtl),Y		; compare with array name second byte
000EDAr 1  F0 16        	BEQ	LAB_1E8D		; array found so branch
000EDCr 1               
000EDCr 1               					; no match
000EDCr 1               LAB_1E77:
000EDCr 1  C8           	INY				; increment index
000EDDr 1  B1 AA        	LDA	(Astrtl),Y		; get array size low byte
000EDFr 1  18           	CLC				; clear carry for add
000EE0r 1  65 AA        	ADC	Astrtl		; add array start pointer low byte
000EE2r 1  AA           	TAX				; copy low byte to X
000EE3r 1  C8           	INY				; increment index
000EE4r 1  B1 AA        	LDA	(Astrtl),Y		; get array size high byte
000EE6r 1  65 AB        	ADC	Astrth		; add array mem pointer high byte
000EE8r 1  90 D7        	BCC	LAB_1E5C		; if no overflow go check next array
000EEAr 1               
000EEAr 1               ; do array bounds error
000EEAr 1               
000EEAr 1               LAB_1E85:
000EEAr 1  A2 10        	LDX	#$10			; error code $10 ("Array bounds" error)
000EECr 1  2C           	.byte	$2C			; makes next bit BIT LAB_08A2
000EEDr 1               
000EEDr 1               ; do function call error
000EEDr 1               
000EEDr 1               LAB_FCER:
000EEDr 1  A2 08        	LDX	#$08			; error code $08 ("Function call" error)
000EEFr 1               LAB_1E8A:
000EEFr 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000EF2r 1               
000EF2r 1               					; found array, are we trying to dimension it?
000EF2r 1               LAB_1E8D:
000EF2r 1  A2 12        	LDX	#$12			; set error $12 ("Double dimension" error)
000EF4r 1  A5 5E        	LDA	Defdim		; get DIM flag
000EF6r 1  D0 F7        	BNE	LAB_1E8A		; if we are trying to dimension it do error #X, then warm
000EF8r 1               					; start
000EF8r 1               
000EF8r 1               ; found the array and we're not dimensioning it so we must find an element in it
000EF8r 1               
000EF8r 1  20 rr rr     	JSR	LAB_1DE6		; set-up array pointer (Adatal/h) to first element in array
000EFBr 1               					; (Astrtl,Astrth points to start of array)
000EFBr 1  A5 5D        	LDA	Dimcnt		; get dimensions count
000EFDr 1  A0 04        	LDY	#$04			; set index to array's # of dimensions
000EFFr 1  D1 AA        	CMP	(Astrtl),Y		; compare with no of dimensions
000F01r 1  D0 E7        	BNE	LAB_1E85		; if wrong do array bounds error, could do "Wrong
000F03r 1               					; dimensions" error here .. if we want a different
000F03r 1               					; error message
000F03r 1               
000F03r 1  4C rr rr     	JMP	LAB_1F28		; found array so go get element
000F06r 1               					; (could jump to LAB_1F28 as all LAB_1F24 does is take
000F06r 1               					; Dimcnt and save it at (Astrtl),Y which is already the
000F06r 1               					; same or we would have taken the BNE)
000F06r 1               
000F06r 1               					; array not found, so build it
000F06r 1               LAB_1EA1:
000F06r 1  20 rr rr     	JSR	LAB_1DE6		; set-up array pointer (Adatal/h) to first element in array
000F09r 1               					; (Astrtl,Astrth points to start of array)
000F09r 1  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
000F0Cr 1               					; addr to check is in AY (low/high)
000F0Cr 1  A0 00        	LDY	#$00			; clear Y (don't need to clear A)
000F0Er 1  84 BB        	STY	Aspth			; clear array data size high byte
000F10r 1  A5 93        	LDA	Varnm1		; get variable name 1st byte
000F12r 1  91 AA        	STA	(Astrtl),Y		; save array name 1st byte
000F14r 1  C8           	INY				; increment index
000F15r 1  A5 94        	LDA	Varnm2		; get variable name 2nd byte
000F17r 1  91 AA        	STA	(Astrtl),Y		; save array name 2nd byte
000F19r 1  A5 5D        	LDA	Dimcnt		; get dimensions count
000F1Br 1  A0 04        	LDY	#$04			; index to dimension count
000F1Dr 1  84 BA        	STY	Asptl			; set array data size low byte (four bytes per element)
000F1Fr 1  91 AA        	STA	(Astrtl),Y		; set array's dimensions count
000F21r 1               
000F21r 1               					; now calculate the size of the data space for the array
000F21r 1  18           	CLC				; clear carry for add (clear on subsequent loops)
000F22r 1               LAB_1EC0:
000F22r 1  A2 0B        	LDX	#$0B			; set default dimension value low byte
000F24r 1  A9 00        	LDA	#$00			; set default dimension value high byte
000F26r 1  24 5E        	BIT	Defdim		; test default DIM flag
000F28r 1  50 07        	BVC	LAB_1ED0		; branch if b6 of Defdim is clear
000F2Ar 1               
000F2Ar 1  68           	PLA				; else pull dimension value low byte
000F2Br 1  69 01        	ADC	#$01			; +1 (allow for zeroeth element)
000F2Dr 1  AA           	TAX				; copy low byte to X
000F2Er 1  68           	PLA				; pull dimension value high byte
000F2Fr 1  69 00        	ADC	#$00			; add carry from low byte
000F31r 1               
000F31r 1               LAB_1ED0:
000F31r 1  C8           	INY				; index to dimension value high byte
000F32r 1  91 AA        	STA	(Astrtl),Y		; save dimension value high byte
000F34r 1  C8           	INY				; index to dimension value high byte
000F35r 1  8A           	TXA				; get dimension value low byte
000F36r 1  91 AA        	STA	(Astrtl),Y		; save dimension value low byte
000F38r 1  20 rr rr     	JSR	LAB_1F7C		; does XY = (Astrtl),Y * (Asptl)
000F3Br 1  86 BA        	STX	Asptl			; save array data size low byte
000F3Dr 1  85 BB        	STA	Aspth			; save array data size high byte
000F3Fr 1  A4 71        	LDY	ut1_pl		; restore index (saved by subroutine)
000F41r 1  C6 5D        	DEC	Dimcnt		; decrement dimensions count
000F43r 1  D0 DD        	BNE	LAB_1EC0		; loop while not = 0
000F45r 1               
000F45r 1  65 A5        	ADC	Adatah		; add size high byte to first element high byte
000F47r 1               					; (carry is always clear here)
000F47r 1  B0 5D        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
000F49r 1               
000F49r 1  85 A5        	STA	Adatah		; save end of array high byte
000F4Br 1  A8           	TAY				; copy end high byte to Y
000F4Cr 1  8A           	TXA				; get array size low byte
000F4Dr 1  65 A4        	ADC	Adatal		; add array start low byte
000F4Fr 1  90 03        	BCC	LAB_1EF3		; branch if no carry
000F51r 1               
000F51r 1  C8           	INY				; else increment end of array high byte
000F52r 1  F0 52        	BEQ	LAB_1F45		; if overflow go do "Out of memory" error
000F54r 1               
000F54r 1               					; set-up mostly complete, now zero the array
000F54r 1               LAB_1EF3:
000F54r 1  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
000F57r 1               					; addr to check is in AY (low/high)
000F57r 1  85 7F        	STA	Earryl		; save array mem end low byte
000F59r 1  84 80        	STY	Earryh		; save array mem end high byte
000F5Br 1  A9 00        	LDA	#$00			; clear byte for array clear
000F5Dr 1  E6 BB        	INC	Aspth			; increment array size high byte (now block count)
000F5Fr 1  A4 BA        	LDY	Asptl			; get array size low byte (now index to block)
000F61r 1  F0 05        	BEQ	LAB_1F07		; branch if low byte = $00
000F63r 1               
000F63r 1               LAB_1F02:
000F63r 1  88           	DEY				; decrement index (do 0 to n-1)
000F64r 1  91 A4        	STA	(Adatal),Y		; zero byte
000F66r 1  D0 FB        	BNE	LAB_1F02		; loop until this block done
000F68r 1               
000F68r 1               LAB_1F07:
000F68r 1  C6 A5        	DEC	Adatah		; decrement array pointer high byte
000F6Ar 1  C6 BB        	DEC	Aspth			; decrement block count high byte
000F6Cr 1  D0 F5        	BNE	LAB_1F02		; loop until all blocks done
000F6Er 1               
000F6Er 1  E6 A5        	INC	Adatah		; correct for last loop
000F70r 1  38           	SEC				; set carry for subtract
000F71r 1  A0 02        	LDY	#$02			; index to array size low byte
000F73r 1  A5 7F        	LDA	Earryl		; get array mem end low byte
000F75r 1  E5 AA        	SBC	Astrtl		; subtract array start low byte
000F77r 1  91 AA        	STA	(Astrtl),Y		; save array size low byte
000F79r 1  C8           	INY				; index to array size high byte
000F7Ar 1  A5 80        	LDA	Earryh		; get array mem end high byte
000F7Cr 1  E5 AB        	SBC	Astrth		; subtract array start high byte
000F7Er 1  91 AA        	STA	(Astrtl),Y		; save array size high byte
000F80r 1  A5 5E        	LDA	Defdim		; get default DIM flag
000F82r 1  D0 53        	BNE	LAB_1F7B		; exit (RET) if this was a DIM command
000F84r 1               
000F84r 1               					; else, find element
000F84r 1  C8           	INY				; index to # of dimensions
000F85r 1               
000F85r 1               LAB_1F24:
000F85r 1  B1 AA        	LDA	(Astrtl),Y		; get array's dimension count
000F87r 1  85 5D        	STA	Dimcnt		; save it
000F89r 1               
000F89r 1               ; we have found, or built, the array. now we need to find the element
000F89r 1               
000F89r 1               LAB_1F28:
000F89r 1  A9 00        	LDA	#$00			; clear byte
000F8Br 1  85 BA        	STA	Asptl			; clear array data pointer low byte
000F8Dr 1               LAB_1F2C:
000F8Dr 1  85 BB        	STA	Aspth			; save array data pointer high byte
000F8Fr 1  C8           	INY				; increment index (point to array bound high byte)
000F90r 1  68           	PLA				; pull array index low byte
000F91r 1  AA           	TAX				; copy to X
000F92r 1  85 AE        	STA	FAC1_2		; save index low byte to FAC1 mantissa2
000F94r 1  68           	PLA				; pull array index high byte
000F95r 1  85 AF        	STA	FAC1_3		; save index high byte to FAC1 mantissa3
000F97r 1  D1 AA        	CMP	(Astrtl),Y		; compare with array bound high byte
000F99r 1  90 0E        	BCC	LAB_1F48		; branch if within bounds
000F9Br 1               
000F9Br 1  D0 06        	BNE	LAB_1F42		; if outside bounds do array bounds error
000F9Dr 1               
000F9Dr 1               					; else high byte was = so test low bytes
000F9Dr 1  C8           	INY				; index to array bound low byte
000F9Er 1  8A           	TXA				; get array index low byte
000F9Fr 1  D1 AA        	CMP	(Astrtl),Y		; compare with array bound low byte
000FA1r 1  90 07        	BCC	LAB_1F49		; branch if within bounds
000FA3r 1               
000FA3r 1               LAB_1F42:
000FA3r 1  4C rr rr     	JMP	LAB_1E85		; else do array bounds error
000FA6r 1               
000FA6r 1               LAB_1F45:
000FA6r 1  4C rr rr     	JMP	LAB_OMER		; do "Out of memory" error then warm start
000FA9r 1               
000FA9r 1               LAB_1F48:
000FA9r 1  C8           	INY				; index to array bound low byte
000FAAr 1               LAB_1F49:
000FAAr 1  A5 BB        	LDA	Aspth			; get array data pointer high byte
000FACr 1  05 BA        	ORA	Asptl			; OR with array data pointer low byte
000FAEr 1  F0 0A        	BEQ	LAB_1F5A		; branch if array data pointer = null (skip multiply)
000FB0r 1               
000FB0r 1  20 rr rr     	JSR	LAB_1F7C		; does XY = (Astrtl),Y * (Asptl)
000FB3r 1  8A           	TXA				; get result low byte
000FB4r 1  65 AE        	ADC	FAC1_2		; add index low byte from FAC1 mantissa2
000FB6r 1  AA           	TAX				; save result low byte
000FB7r 1  98           	TYA				; get result high byte
000FB8r 1  A4 71        	LDY	ut1_pl		; restore index
000FBAr 1               LAB_1F5A:
000FBAr 1  65 AF        	ADC	FAC1_3		; add index high byte from FAC1 mantissa3
000FBCr 1  86 BA        	STX	Asptl			; save array data pointer low byte
000FBEr 1  C6 5D        	DEC	Dimcnt		; decrement dimensions count
000FC0r 1  D0 CB        	BNE	LAB_1F2C		; loop if dimensions still to do
000FC2r 1               
000FC2r 1  06 BA        	ASL	Asptl			; array data pointer low byte * 2
000FC4r 1  2A           	ROL				; array data pointer high byte * 2
000FC5r 1  06 BA        	ASL	Asptl			; array data pointer low byte * 4
000FC7r 1  2A           	ROL				; array data pointer high byte * 4
000FC8r 1  A8           	TAY				; copy high byte
000FC9r 1  A5 BA        	LDA	Asptl			; get low byte
000FCBr 1  65 A4        	ADC	Adatal		; add array data start pointer low byte
000FCDr 1  85 95        	STA	Cvaral		; save as current var address low byte
000FCFr 1  98           	TYA				; get high byte back
000FD0r 1  65 A5        	ADC	Adatah		; add array data start pointer high byte
000FD2r 1  85 96        	STA	Cvarah		; save as current var address high byte
000FD4r 1  A8           	TAY				; copy high byte to Y
000FD5r 1  A5 95        	LDA	Cvaral		; get current var address low byte
000FD7r 1               LAB_1F7B:
000FD7r 1  60           	RTS
000FD8r 1               
000FD8r 1               ; does XY = (Astrtl),Y * (Asptl)
000FD8r 1               
000FD8r 1               LAB_1F7C:
000FD8r 1  84 71        	STY	ut1_pl		; save index
000FDAr 1  B1 AA        	LDA	(Astrtl),Y		; get dimension size low byte
000FDCr 1  85 76        	STA	dims_l		; save dimension size low byte
000FDEr 1  88           	DEY				; decrement index
000FDFr 1  B1 AA        	LDA	(Astrtl),Y		; get dimension size high byte
000FE1r 1  85 77        	STA	dims_h		; save dimension size high byte
000FE3r 1               
000FE3r 1  A9 10        	LDA	#$10			; count = $10 (16 bit multiply)
000FE5r 1  85 A8        	STA	numbit		; save bit count
000FE7r 1  A2 00        	LDX	#$00			; clear result low byte
000FE9r 1  A0 00        	LDY	#$00			; clear result high byte
000FEBr 1               LAB_1F8F:
000FEBr 1  8A           	TXA				; get result low byte
000FECr 1  0A           	ASL				; *2
000FEDr 1  AA           	TAX				; save result low byte
000FEEr 1  98           	TYA				; get result high byte
000FEFr 1  2A           	ROL				; *2
000FF0r 1  A8           	TAY				; save result high byte
000FF1r 1  B0 B3        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
000FF3r 1               
000FF3r 1  06 BA        	ASL	Asptl			; shift multiplier low byte
000FF5r 1  26 BB        	ROL	Aspth			; shift multiplier high byte
000FF7r 1  90 0B        	BCC	LAB_1FA8		; skip add if no carry
000FF9r 1               
000FF9r 1  18           	CLC				; else clear carry for add
000FFAr 1  8A           	TXA				; get result low byte
000FFBr 1  65 76        	ADC	dims_l		; add dimension size low byte
000FFDr 1  AA           	TAX				; save result low byte
000FFEr 1  98           	TYA				; get result high byte
000FFFr 1  65 77        	ADC	dims_h		; add dimension size high byte
001001r 1  A8           	TAY				; save result high byte
001002r 1  B0 A2        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
001004r 1               
001004r 1               LAB_1FA8:
001004r 1  C6 A8        	DEC	numbit		; decrement bit count
001006r 1  D0 E3        	BNE	LAB_1F8F		; loop until all done
001008r 1               
001008r 1  60           	RTS
001009r 1               
001009r 1               ; perform FRE()
001009r 1               
001009r 1               LAB_FRE:
001009r 1  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
00100Br 1  10 03        	BPL	LAB_1FB4		; branch if numeric
00100Dr 1               
00100Dr 1  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
001010r 1               					; space returns with A = length, X=$71=pointer low byte,
001010r 1               					; Y=$72=pointer high byte
001010r 1               
001010r 1               					; FRE(n) was numeric so do this
001010r 1               LAB_1FB4:
001010r 1  20 rr rr     	JSR	LAB_GARB		; go do garbage collection
001013r 1  38           	SEC				; set carry for subtract
001014r 1  A5 81        	LDA	Sstorl		; get bottom of string space low byte
001016r 1  E5 7F        	SBC	Earryl		; subtract array mem end low byte
001018r 1  A8           	TAY				; copy result to Y
001019r 1  A5 82        	LDA	Sstorh		; get bottom of string space high byte
00101Br 1  E5 80        	SBC	Earryh		; subtract array mem end high byte
00101Dr 1               
00101Dr 1               ; save and convert integer AY to FAC1
00101Dr 1               
00101Dr 1               LAB_AYFC:
00101Dr 1  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
00101Fr 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001021r 1  84 AE        	STY	FAC1_2		; save FAC1 mantissa2
001023r 1  A2 90        	LDX	#$90			; set exponent=2^16 (integer)
001025r 1  4C rr rr     	JMP	LAB_27E3		; set exp=X, clear FAC1_3, normalise and return
001028r 1               
001028r 1               ; perform POS()
001028r 1               
001028r 1               LAB_POS:
001028r 1  A4 3E        	LDY	TPos			; get terminal position
00102Ar 1               
00102Ar 1               ; convert Y to byte in FAC1
00102Ar 1               
00102Ar 1               LAB_1FD0:
00102Ar 1  A9 00        	LDA	#$00			; clear high byte
00102Cr 1  F0 EF        	BEQ	LAB_AYFC		; always save and convert integer AY to FAC1 and return
00102Er 1               
00102Er 1               ; check not Direct (used by DEF and INPUT)
00102Er 1               
00102Er 1               LAB_CKRN:
00102Er 1  A6 88        	LDX	Clineh		; get current line high byte
001030r 1  E8           	INX				; increment it
001031r 1  D0 A4        	BNE	LAB_1F7B		; return if can continue not direct mode
001033r 1               
001033r 1               					; else do illegal direct error
001033r 1               LAB_1FD9:
001033r 1  A2 16        	LDX	#$16			; error code $16 ("Illegal direct" error)
001035r 1               LAB_1FDB:
001035r 1  4C rr rr     	JMP	LAB_XERR		; go do error #X, then warm start
001038r 1               
001038r 1               ; perform DEF
001038r 1               
001038r 1               LAB_DEF:
001038r 1  20 rr rr     	JSR	LAB_200B		; check FNx syntax
00103Br 1  85 9C        	STA	func_l		; save function pointer low byte
00103Dr 1  84 9D        	STY	func_h		; save function pointer high byte
00103Fr 1  20 rr rr     	JSR	LAB_CKRN		; check not Direct (back here if ok)
001042r 1  20 rr rr     	JSR	LAB_1BFE		; scan for "(" , else do syntax error then warm start
001045r 1  A9 80        	LDA	#$80			; set flag for FNx
001047r 1  85 61        	STA	Sufnxf		; save subscript/FNx flag
001049r 1  20 rr rr     	JSR	LAB_GVAR		; get (var) address
00104Cr 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
00104Fr 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
001052r 1  A9 C0        	LDA	#TK_EQUAL		; get = token
001054r 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
001057r 1  A5 96        	LDA	Cvarah		; get current var address high byte
001059r 1  48           	PHA				; push it
00105Ar 1  A5 95        	LDA	Cvaral		; get current var address low byte
00105Cr 1  48           	PHA				; push it
00105Dr 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
00105Fr 1  48           	PHA				; push it
001060r 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
001062r 1  48           	PHA				; push it
001063r 1  20 rr rr     	JSR	LAB_DATA		; go perform DATA
001066r 1  4C rr rr     	JMP	LAB_207A		; put execute pointer and variable pointer into function
001069r 1               					; and return
001069r 1               
001069r 1               ; check FNx syntax
001069r 1               
001069r 1               LAB_200B:
001069r 1  A9 AD        	LDA	#TK_FN		; get FN" token
00106Br 1  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A) , else do syntax error then warm start
00106Er 1               					; return character after A
00106Er 1  09 80        	ORA	#$80			; set FN flag bit
001070r 1  85 61        	STA	Sufnxf		; save FN flag so array variable test fails
001072r 1  20 rr rr     	JSR	LAB_1D12		; search for FN variable
001075r 1  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric and return, else do type
001078r 1               					; mismatch
001078r 1               
001078r 1               					; Evaluate FNx
001078r 1               LAB_201E:
001078r 1  20 rr rr     	JSR	LAB_200B		; check FNx syntax
00107Br 1  48           	PHA				; push function pointer low byte
00107Cr 1  98           	TYA				; copy function pointer high byte
00107Dr 1  48           	PHA				; push function pointer high byte
00107Er 1  20 rr rr     	JSR	LAB_1BFE		; scan for "(", else do syntax error then warm start
001081r 1  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
001084r 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")", else do syntax error then warm start
001087r 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
00108Ar 1  68           	PLA				; pop function pointer high byte
00108Br 1  85 9D        	STA	func_h		; restore it
00108Dr 1  68           	PLA				; pop function pointer low byte
00108Er 1  85 9C        	STA	func_l		; restore it
001090r 1  A2 20        	LDX	#$20			; error code $20 ("Undefined function" error)
001092r 1  A0 03        	LDY	#$03			; index to variable pointer high byte
001094r 1  B1 9C        	LDA	(func_l),Y		; get variable pointer high byte
001096r 1  F0 9D        	BEQ	LAB_1FDB		; if zero go do undefined function error
001098r 1               
001098r 1  85 96        	STA	Cvarah		; save variable address high byte
00109Ar 1  88           	DEY				; index to variable address low byte
00109Br 1  B1 9C        	LDA	(func_l),Y		; get variable address low byte
00109Dr 1  85 95        	STA	Cvaral		; save variable address low byte
00109Fr 1  AA           	TAX				; copy address low byte
0010A0r 1               
0010A0r 1               					; now stack the function variable value before use
0010A0r 1  C8           	INY				; index to mantissa_3
0010A1r 1               LAB_2043:
0010A1r 1  B1 95        	LDA	(Cvaral),Y		; get byte from variable
0010A3r 1  48           	PHA				; stack it
0010A4r 1  88           	DEY				; decrement index
0010A5r 1  10 FA        	BPL	LAB_2043		; loop until variable stacked
0010A7r 1               
0010A7r 1  A4 96        	LDY	Cvarah		; get variable address high byte
0010A9r 1  20 rr rr     	JSR	LAB_2778		; pack FAC1 (function expression value) into (XY)
0010ACr 1               					; (function variable), return Y=0, always
0010ACr 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0010AEr 1  48           	PHA				; push it
0010AFr 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0010B1r 1  48           	PHA				; push it
0010B2r 1  B1 9C        	LDA	(func_l),Y		; get function execute pointer low byte
0010B4r 1  85 C3        	STA	Bpntrl		; save as BASIC execute pointer low byte
0010B6r 1  C8           	INY				; index to high byte
0010B7r 1  B1 9C        	LDA	(func_l),Y		; get function execute pointer high byte
0010B9r 1  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
0010BBr 1  A5 96        	LDA	Cvarah		; get variable address high byte
0010BDr 1  48           	PHA				; push it
0010BEr 1  A5 95        	LDA	Cvaral		; get variable address low byte
0010C0r 1  48           	PHA				; push it
0010C1r 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0010C4r 1               					; else do type mismatch
0010C4r 1  68           	PLA				; pull variable address low byte
0010C5r 1  85 9C        	STA	func_l		; save variable address low byte
0010C7r 1  68           	PLA				; pull variable address high byte
0010C8r 1  85 9D        	STA	func_h		; save variable address high byte
0010CAr 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
0010CDr 1  F0 03        	BEQ	LAB_2074		; branch if null (should be [EOL] marker)
0010CFr 1               
0010CFr 1  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
0010D2r 1               
0010D2r 1               ; restore Bpntrl,Bpntrh and function variable from stack
0010D2r 1               
0010D2r 1               LAB_2074:
0010D2r 1  68           	PLA				; pull BASIC execute pointer low byte
0010D3r 1  85 C3        	STA	Bpntrl		; restore BASIC execute pointer low byte
0010D5r 1  68           	PLA				; pull BASIC execute pointer high byte
0010D6r 1  85 C4        	STA	Bpntrh		; restore BASIC execute pointer high byte
0010D8r 1               
0010D8r 1               ; put execute pointer and variable pointer into function
0010D8r 1               
0010D8r 1               LAB_207A:
0010D8r 1  A0 00        	LDY	#$00			; clear index
0010DAr 1  68           	PLA				; pull BASIC execute pointer low byte
0010DBr 1  91 9C        	STA	(func_l),Y		; save to function
0010DDr 1  C8           	INY				; increment index
0010DEr 1  68           	PLA				; pull BASIC execute pointer high byte
0010DFr 1  91 9C        	STA	(func_l),Y		; save to function
0010E1r 1  C8           	INY				; increment index
0010E2r 1  68           	PLA				; pull current var address low byte
0010E3r 1  91 9C        	STA	(func_l),Y		; save to function
0010E5r 1  C8           	INY				; increment index
0010E6r 1  68           	PLA				; pull current var address high byte
0010E7r 1  91 9C        	STA	(func_l),Y		; save to function
0010E9r 1  60           	RTS
0010EAr 1               
0010EAr 1               ; perform STR$()
0010EAr 1               
0010EAr 1               LAB_STRS:
0010EAr 1  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
0010EDr 1  20 rr rr     	JSR	LAB_296E		; convert FAC1 to string
0010F0r 1  A9 F0        	LDA	#<Decssp1		; set result string low pointer
0010F2r 1  A0 00        	LDY	#>Decssp1		; set result string high pointer
0010F4r 1  F0 12        	BEQ	LAB_20AE		; print null terminated string to Sutill/Sutilh
0010F6r 1               
0010F6r 1               ; Do string vector
0010F6r 1               ; copy des_pl/h to des_2l/h and make string space A bytes long
0010F6r 1               
0010F6r 1               LAB_209C:
0010F6r 1  A6 AE        	LDX	des_pl		; get descriptor pointer low byte
0010F8r 1  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
0010FAr 1  86 9E        	STX	des_2l		; save descriptor pointer low byte
0010FCr 1  84 9F        	STY	des_2h		; save descriptor pointer high byte
0010FEr 1               
0010FEr 1               ; make string space A bytes long
0010FEr 1               ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
0010FEr 1               
0010FEr 1               LAB_MSSP:
0010FEr 1  20 rr rr     	JSR	LAB_2115		; make space in string memory for string A long
001101r 1               					; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001101r 1  86 AD        	STX	str_pl		; save string pointer low byte
001103r 1  84 AE        	STY	str_ph		; save string pointer high byte
001105r 1  85 AC        	STA	str_ln		; save length
001107r 1  60           	RTS
001108r 1               
001108r 1               ; Scan, set up string
001108r 1               ; print " terminated string to Sutill/Sutilh
001108r 1               
001108r 1               LAB_20AE:
001108r 1  A2 22        	LDX	#$22			; set terminator to "
00110Ar 1  86 5B        	STX	Srchc			; set search character (terminator 1)
00110Cr 1  86 5C        	STX	Asrch			; set terminator 2
00110Er 1               
00110Er 1               ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
00110Er 1               ; source is AY
00110Er 1               
00110Er 1               LAB_20B4:
00110Er 1  85 B8        	STA	ssptr_l		; store string start low byte
001110r 1  84 B9        	STY	ssptr_h		; store string start high byte
001112r 1  85 AD        	STA	str_pl		; save string pointer low byte
001114r 1  84 AE        	STY	str_ph		; save string pointer high byte
001116r 1  A0 FF        	LDY	#$FF			; set length to -1
001118r 1               LAB_20BE:
001118r 1  C8           	INY				; increment length
001119r 1  B1 B8        	LDA	(ssptr_l),Y		; get byte from string
00111Br 1  F0 0C        	BEQ	LAB_20CF		; exit loop if null byte [EOS]
00111Dr 1               
00111Dr 1  C5 5B        	CMP	Srchc			; compare with search character (terminator 1)
00111Fr 1  F0 04        	BEQ	LAB_20CB		; branch if terminator
001121r 1               
001121r 1  C5 5C        	CMP	Asrch			; compare with terminator 2
001123r 1  D0 F3        	BNE	LAB_20BE		; loop if not terminator 2
001125r 1               
001125r 1               LAB_20CB:
001125r 1  C9 22        	CMP	#$22			; compare with "
001127r 1  F0 01        	BEQ	LAB_20D0		; branch if " (carry set if = !)
001129r 1               
001129r 1               LAB_20CF:
001129r 1  18           	CLC				; clear carry for add (only if [EOL] terminated string)
00112Ar 1               LAB_20D0:
00112Ar 1  84 AC        	STY	str_ln		; save length in FAC1 exponent
00112Cr 1  98           	TYA				; copy length to A
00112Dr 1  65 B8        	ADC	ssptr_l		; add string start low byte
00112Fr 1  85 BA        	STA	Sendl			; save string end low byte
001131r 1  A6 B9        	LDX	ssptr_h		; get string start high byte
001133r 1  90 01        	BCC	LAB_20DC		; branch if no low byte overflow
001135r 1               
001135r 1  E8           	INX				; else increment high byte
001136r 1               LAB_20DC:
001136r 1  86 BB        	STX	Sendh			; save string end high byte
001138r 1  A5 B9        	LDA	ssptr_h		; get string start high byte
00113Ar 1  C9 04        	CMP	#>Ram_base		; compare with start of program memory
00113Cr 1  B0 0B        	BCS	LAB_RTST		; branch if not in utility area
00113Er 1               
00113Er 1               					; string in utility area, move to string memory
00113Er 1  98           	TYA				; copy length to A
00113Fr 1  20 rr rr     	JSR	LAB_209C		; copy des_pl/h to des_2l/h and make string space A bytes
001142r 1               					; long
001142r 1  A6 B8        	LDX	ssptr_l		; get string start low byte
001144r 1  A4 B9        	LDY	ssptr_h		; get string start high byte
001146r 1  20 rr rr     	JSR	LAB_2298		; store string A bytes long from XY to (Sutill)
001149r 1               
001149r 1               ; check for space on descriptor stack then ..
001149r 1               ; put string address and length on descriptor stack and update stack pointers
001149r 1               
001149r 1               LAB_RTST:
001149r 1  A6 65        	LDX	next_s		; get string stack pointer
00114Br 1  E0 71        	CPX	#des_sk+$09		; compare with max+1
00114Dr 1  D0 05        	BNE	LAB_20F8		; branch if space on string stack
00114Fr 1               
00114Fr 1               					; else do string too complex error
00114Fr 1  A2 1C        	LDX	#$1C			; error code $1C ("String too complex" error)
001151r 1               LAB_20F5:
001151r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
001154r 1               
001154r 1               ; put string address and length on descriptor stack and update stack pointers
001154r 1               
001154r 1               LAB_20F8:
001154r 1  A5 AC        	LDA	str_ln		; get string length
001156r 1  95 00        	STA	PLUS_0,X		; put on string stack
001158r 1  A5 AD        	LDA	str_pl		; get string pointer low byte
00115Ar 1  95 01        	STA	PLUS_1,X		; put on string stack
00115Cr 1  A5 AE        	LDA	str_ph		; get string pointer high byte
00115Er 1  95 02        	STA	PLUS_2,X		; put on string stack
001160r 1  A0 00        	LDY	#$00			; clear Y
001162r 1  86 AE        	STX	des_pl		; save string descriptor pointer low byte
001164r 1  84 AF        	STY	des_ph		; save string descriptor pointer high byte (always $00)
001166r 1  88           	DEY				; Y = $FF
001167r 1  84 5F        	STY	Dtypef		; save data type flag, $FF=string
001169r 1  86 66        	STX	last_sl		; save old stack pointer (current top item)
00116Br 1  E8           	INX				; update stack pointer
00116Cr 1  E8           	INX				; update stack pointer
00116Dr 1  E8           	INX				; update stack pointer
00116Er 1  86 65        	STX	next_s		; save new top item value
001170r 1  60           	RTS
001171r 1               
001171r 1               ; Build descriptor
001171r 1               ; make space in string memory for string A long
001171r 1               ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
001171r 1               
001171r 1               LAB_2115:
001171r 1  46 60        	LSR	Gclctd		; clear garbage collected flag (b7)
001173r 1               
001173r 1               					; make space for string A long
001173r 1               LAB_2117:
001173r 1  48           	PHA				; save string length
001174r 1  49 FF        	EOR	#$FF			; complement it
001176r 1  38           	SEC				; set carry for subtract (twos comp add)
001177r 1  65 81        	ADC	Sstorl		; add bottom of string space low byte (subtract length)
001179r 1  A4 82        	LDY	Sstorh		; get bottom of string space high byte
00117Br 1  B0 01        	BCS	LAB_2122		; skip decrement if no underflow
00117Dr 1               
00117Dr 1  88           	DEY				; decrement bottom of string space high byte
00117Er 1               LAB_2122:
00117Er 1  C4 80        	CPY	Earryh		; compare with array mem end high byte
001180r 1  90 11        	BCC	LAB_2137		; do out of memory error if less
001182r 1               
001182r 1  D0 04        	BNE	LAB_212C		; if not = skip next test
001184r 1               
001184r 1  C5 7F        	CMP	Earryl		; compare with array mem end low byte
001186r 1  90 0B        	BCC	LAB_2137		; do out of memory error if less
001188r 1               
001188r 1               LAB_212C:
001188r 1  85 81        	STA	Sstorl		; save bottom of string space low byte
00118Ar 1  84 82        	STY	Sstorh		; save bottom of string space high byte
00118Cr 1  85 83        	STA	Sutill		; save string utility ptr low byte
00118Er 1  84 84        	STY	Sutilh		; save string utility ptr high byte
001190r 1  AA           	TAX				; copy low byte to X
001191r 1  68           	PLA				; get string length back
001192r 1  60           	RTS
001193r 1               
001193r 1               LAB_2137:
001193r 1  A2 0C        	LDX	#$0C			; error code $0C ("Out of memory" error)
001195r 1  A5 60        	LDA	Gclctd		; get garbage collected flag
001197r 1  30 B8        	BMI	LAB_20F5		; if set then do error code X
001199r 1               
001199r 1  20 rr rr     	JSR	LAB_GARB		; else go do garbage collection
00119Cr 1  A9 80        	LDA	#$80			; flag for garbage collected
00119Er 1  85 60        	STA	Gclctd		; set garbage collected flag
0011A0r 1  68           	PLA				; pull length
0011A1r 1  D0 D0        	BNE	LAB_2117		; go try again (loop always, length should never be = $00)
0011A3r 1               
0011A3r 1               ; garbage collection routine
0011A3r 1               
0011A3r 1               LAB_GARB:
0011A3r 1  A6 85        	LDX	Ememl			; get end of mem low byte
0011A5r 1  A5 86        	LDA	Ememh			; get end of mem high byte
0011A7r 1               
0011A7r 1               ; re-run routine from last ending
0011A7r 1               
0011A7r 1               LAB_214B:
0011A7r 1  86 81        	STX	Sstorl		; set string storage low byte
0011A9r 1  85 82        	STA	Sstorh		; set string storage high byte
0011ABr 1  A0 00        	LDY	#$00			; clear index
0011ADr 1  84 9D        	STY	garb_h		; clear working pointer high byte (flag no strings to move)
0011AFr 1  A5 7F        	LDA	Earryl		; get array mem end low byte
0011B1r 1  A6 80        	LDX	Earryh		; get array mem end high byte
0011B3r 1  85 AA        	STA	Histrl		; save as highest string low byte
0011B5r 1  86 AB        	STX	Histrh		; save as highest string high byte
0011B7r 1  A9 68        	LDA	#des_sk		; set descriptor stack pointer
0011B9r 1  85 71        	STA	ut1_pl		; save descriptor stack pointer low byte
0011BBr 1  84 72        	STY	ut1_ph		; save descriptor stack pointer high byte ($00)
0011BDr 1               LAB_2161:
0011BDr 1  C5 65        	CMP	next_s		; compare with descriptor stack pointer
0011BFr 1  F0 05        	BEQ	LAB_216A		; branch if =
0011C1r 1               
0011C1r 1  20 rr rr     	JSR	LAB_21D7		; go garbage collect descriptor stack
0011C4r 1  F0 F7        	BEQ	LAB_2161		; loop always
0011C6r 1               
0011C6r 1               					; done stacked strings, now do string vars
0011C6r 1               LAB_216A:
0011C6r 1  06 A0        	ASL	g_step		; set step size = $06
0011C8r 1  A5 7B        	LDA	Svarl			; get start of vars low byte
0011CAr 1  A6 7C        	LDX	Svarh			; get start of vars high byte
0011CCr 1  85 71        	STA	ut1_pl		; save as pointer low byte
0011CEr 1  86 72        	STX	ut1_ph		; save as pointer high byte
0011D0r 1               LAB_2176:
0011D0r 1  E4 7E        	CPX	Sarryh		; compare start of arrays high byte
0011D2r 1  D0 04        	BNE	LAB_217E		; branch if no high byte match
0011D4r 1               
0011D4r 1  C5 7D        	CMP	Sarryl		; else compare start of arrays low byte
0011D6r 1  F0 05        	BEQ	LAB_2183		; branch if = var mem end
0011D8r 1               
0011D8r 1               LAB_217E:
0011D8r 1  20 rr rr     	JSR	LAB_21D1		; go garbage collect strings
0011DBr 1  F0 F3        	BEQ	LAB_2176		; loop always
0011DDr 1               
0011DDr 1               					; done string vars, now do string arrays
0011DDr 1               LAB_2183:
0011DDr 1  85 A4        	STA	Nbendl		; save start of arrays low byte as working pointer
0011DFr 1  86 A5        	STX	Nbendh		; save start of arrays high byte as working pointer
0011E1r 1  A9 04        	LDA	#$04			; set step size
0011E3r 1  85 A0        	STA	g_step		; save step size
0011E5r 1               LAB_218B:
0011E5r 1  A5 A4        	LDA	Nbendl		; get pointer low byte
0011E7r 1  A6 A5        	LDX	Nbendh		; get pointer high byte
0011E9r 1               LAB_218F:
0011E9r 1  E4 80        	CPX	Earryh		; compare with array mem end high byte
0011EBr 1  D0 04        	BNE	LAB_219A		; branch if not at end
0011EDr 1               
0011EDr 1  C5 7F        	CMP	Earryl		; else compare with array mem end low byte
0011EFr 1  F0 75        	BEQ	LAB_2216		; tidy up and exit if at end
0011F1r 1               
0011F1r 1               LAB_219A:
0011F1r 1  85 71        	STA	ut1_pl		; save pointer low byte
0011F3r 1  86 72        	STX	ut1_ph		; save pointer high byte
0011F5r 1  A0 02        	LDY	#$02			; set index
0011F7r 1  B1 71        	LDA	(ut1_pl),Y		; get array size low byte
0011F9r 1  65 A4        	ADC	Nbendl		; add start of this array low byte
0011FBr 1  85 A4        	STA	Nbendl		; save start of next array low byte
0011FDr 1  C8           	INY				; increment index
0011FEr 1  B1 71        	LDA	(ut1_pl),Y		; get array size high byte
001200r 1  65 A5        	ADC	Nbendh		; add start of this array high byte
001202r 1  85 A5        	STA	Nbendh		; save start of next array high byte
001204r 1  A0 01        	LDY	#$01			; set index
001206r 1  B1 71        	LDA	(ut1_pl),Y		; get name second byte
001208r 1  10 DB        	BPL	LAB_218B		; skip if not string array
00120Ar 1               
00120Ar 1               ; was string array so ..
00120Ar 1               
00120Ar 1  A0 04        	LDY	#$04			; set index
00120Cr 1  B1 71        	LDA	(ut1_pl),Y		; get # of dimensions
00120Er 1  0A           	ASL				; *2
00120Fr 1  69 05        	ADC	#$05			; +5 (array header size)
001211r 1  20 rr rr     	JSR	LAB_2208		; go set up for first element
001214r 1               LAB_21C4:
001214r 1  E4 A5        	CPX	Nbendh		; compare with start of next array high byte
001216r 1  D0 04        	BNE	LAB_21CC		; branch if <> (go do this array)
001218r 1               
001218r 1  C5 A4        	CMP	Nbendl		; else compare element pointer low byte with next array
00121Ar 1               					; low byte
00121Ar 1  F0 CD        	BEQ	LAB_218F		; if equal then go do next array
00121Cr 1               
00121Cr 1               LAB_21CC:
00121Cr 1  20 rr rr     	JSR	LAB_21D7		; go defrag array strings
00121Fr 1  F0 F3        	BEQ	LAB_21C4		; go do next array string (loop always)
001221r 1               
001221r 1               ; defrag string variables
001221r 1               ; enter with XA = variable pointer
001221r 1               ; return with XA = next variable pointer
001221r 1               
001221r 1               LAB_21D1:
001221r 1  C8           	INY				; increment index (Y was $00)
001222r 1  B1 71        	LDA	(ut1_pl),Y		; get var name byte 2
001224r 1  10 30        	BPL	LAB_2206		; if not string, step pointer to next var and return
001226r 1               
001226r 1  C8           	INY				; else increment index
001227r 1               LAB_21D7:
001227r 1  B1 71        	LDA	(ut1_pl),Y		; get string length
001229r 1  F0 2B        	BEQ	LAB_2206		; if null, step pointer to next string and return
00122Br 1               
00122Br 1  C8           	INY				; else increment index
00122Cr 1  B1 71        	LDA	(ut1_pl),Y		; get string pointer low byte
00122Er 1  AA           	TAX				; copy to X
00122Fr 1  C8           	INY				; increment index
001230r 1  B1 71        	LDA	(ut1_pl),Y		; get string pointer high byte
001232r 1  C5 82        	CMP	Sstorh		; compare bottom of string space high byte
001234r 1  90 06        	BCC	LAB_21EC		; branch if less
001236r 1               
001236r 1  D0 1E        	BNE	LAB_2206		; if greater, step pointer to next string and return
001238r 1               
001238r 1               					; high bytes were = so compare low bytes
001238r 1  E4 81        	CPX	Sstorl		; compare bottom of string space low byte
00123Ar 1  B0 1A        	BCS	LAB_2206		; if >=, step pointer to next string and return
00123Cr 1               
00123Cr 1               					; string pointer is < string storage pointer (pos in mem)
00123Cr 1               LAB_21EC:
00123Cr 1  C5 AB        	CMP	Histrh		; compare to highest string high byte
00123Er 1  90 17        	BCC	LAB_2207		; if <, step pointer to next string and return
001240r 1               
001240r 1  D0 04        	BNE	LAB_21F6		; if > update pointers, step to next and return
001242r 1               
001242r 1               					; high bytes were = so compare low bytes
001242r 1  E4 AA        	CPX	Histrl		; compare to highest string low byte
001244r 1  90 11        	BCC	LAB_2207		; if <, step pointer to next string and return
001246r 1               
001246r 1               					; string is in string memory space
001246r 1               LAB_21F6:
001246r 1  86 AA        	STX	Histrl		; save as new highest string low byte
001248r 1  85 AB        	STA	Histrh		; save as new highest string high byte
00124Ar 1  A5 71        	LDA	ut1_pl		; get start of vars(descriptors) low byte
00124Cr 1  A6 72        	LDX	ut1_ph		; get start of vars(descriptors) high byte
00124Er 1  85 9C        	STA	garb_l		; save as working pointer low byte
001250r 1  86 9D        	STX	garb_h		; save as working pointer high byte
001252r 1  88           	DEY				; decrement index DIFFERS
001253r 1  88           	DEY				; decrement index (should point to descriptor start)
001254r 1  84 A2        	STY	g_indx		; save index pointer
001256r 1               
001256r 1               					; step pointer to next string
001256r 1               LAB_2206:
001256r 1  18           	CLC				; clear carry for add
001257r 1               LAB_2207:
001257r 1  A5 A0        	LDA	g_step		; get step size
001259r 1               LAB_2208:
001259r 1  65 71        	ADC	ut1_pl		; add pointer low byte
00125Br 1  85 71        	STA	ut1_pl		; save pointer low byte
00125Dr 1  90 02        	BCC	LAB_2211		; branch if no overflow
00125Fr 1               
00125Fr 1  E6 72        	INC	ut1_ph		; else increment high byte
001261r 1               LAB_2211:
001261r 1  A6 72        	LDX	ut1_ph		; get pointer high byte
001263r 1  A0 00        	LDY	#$00			; clear Y
001265r 1  60           	RTS
001266r 1               
001266r 1               ; search complete, now either exit or set-up and move string
001266r 1               
001266r 1               LAB_2216:
001266r 1  C6 A0        	DEC	g_step		; decrement step size (now $03 for descriptor stack)
001268r 1  A6 9D        	LDX	garb_h		; get string to move high byte
00126Ar 1  F0 F5        	BEQ	LAB_2211		; exit if nothing to move
00126Cr 1               
00126Cr 1  A4 A2        	LDY	g_indx		; get index byte back (points to descriptor)
00126Er 1  18           	CLC				; clear carry for add
00126Fr 1  B1 9C        	LDA	(garb_l),Y		; get string length
001271r 1  65 AA        	ADC	Histrl		; add highest string low byte
001273r 1  85 A6        	STA	Obendl		; save old block end low pointer
001275r 1  A5 AB        	LDA	Histrh		; get highest string high byte
001277r 1  69 00        	ADC	#$00			; add any carry
001279r 1  85 A7        	STA	Obendh		; save old block end high byte
00127Br 1  A5 81        	LDA	Sstorl		; get bottom of string space low byte
00127Dr 1  A6 82        	LDX	Sstorh		; get bottom of string space high byte
00127Fr 1  85 A4        	STA	Nbendl		; save new block end low byte
001281r 1  86 A5        	STX	Nbendh		; save new block end high byte
001283r 1  20 rr rr     	JSR	LAB_11D6		; open up space in memory, don't set array end
001286r 1  A4 A2        	LDY	g_indx		; get index byte
001288r 1  C8           	INY				; point to descriptor low byte
001289r 1  A5 A4        	LDA	Nbendl		; get string pointer low byte
00128Br 1  91 9C        	STA	(garb_l),Y		; save new string pointer low byte
00128Dr 1  AA           	TAX				; copy string pointer low byte
00128Er 1  E6 A5        	INC	Nbendh		; correct high byte (move sets high byte -1)
001290r 1  A5 A5        	LDA	Nbendh		; get new string pointer high byte
001292r 1  C8           	INY				; point to descriptor high byte
001293r 1  91 9C        	STA	(garb_l),Y		; save new string pointer high byte
001295r 1  4C rr rr     	JMP	LAB_214B		; re-run routine from last ending
001298r 1               					; (but don't collect this string)
001298r 1               
001298r 1               ; concatenate
001298r 1               ; add strings, string 1 is in descriptor des_pl, string 2 is in line
001298r 1               
001298r 1               LAB_224D:
001298r 1  A5 AF        	LDA	des_ph		; get descriptor pointer high byte
00129Ar 1  48           	PHA				; put on stack
00129Br 1  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
00129Dr 1  48           	PHA				; put on stack
00129Er 1  20 rr rr     	JSR	LAB_GVAL		; get value from line
0012A1r 1  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
0012A4r 1  68           	PLA				; get descriptor pointer low byte back
0012A5r 1  85 B8        	STA	ssptr_l		; set pointer low byte
0012A7r 1  68           	PLA				; get descriptor pointer high byte back
0012A8r 1  85 B9        	STA	ssptr_h		; set pointer high byte
0012AAr 1  A0 00        	LDY	#$00			; clear index
0012ACr 1  B1 B8        	LDA	(ssptr_l),Y		; get length_1 from descriptor
0012AEr 1  18           	CLC				; clear carry for add
0012AFr 1  71 AE        	ADC	(des_pl),Y		; add length_2
0012B1r 1  90 05        	BCC	LAB_226D		; branch if no overflow
0012B3r 1               
0012B3r 1  A2 1A        	LDX	#$1A			; else set error code $1A ("String too long" error)
0012B5r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
0012B8r 1               
0012B8r 1               LAB_226D:
0012B8r 1  20 rr rr     	JSR	LAB_209C		; copy des_pl/h to des_2l/h and make string space A bytes
0012BBr 1               					; long
0012BBr 1  20 rr rr     	JSR	LAB_228A		; copy string from descriptor (sdescr) to (Sutill)
0012BEr 1  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
0012C0r 1  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
0012C2r 1  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
0012C5r 1               					; returns with A = length, ut1_pl = pointer low byte,
0012C5r 1               					; ut1_ph = pointer high byte
0012C5r 1  20 rr rr     	JSR	LAB_229C		; store string A bytes long from (ut1_pl) to (Sutill)
0012C8r 1  A5 B8        	LDA	ssptr_l		;.set descriptor pointer low byte
0012CAr 1  A4 B9        	LDY	ssptr_h		;.set descriptor pointer high byte
0012CCr 1  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
0012CFr 1               					; returns with A = length, X=ut1_pl=pointer low byte,
0012CFr 1               					; Y=ut1_ph=pointer high byte
0012CFr 1  20 rr rr     	JSR	LAB_RTST		; check for space on descriptor stack then put string
0012D2r 1               					; address and length on descriptor stack and update stack
0012D2r 1               					; pointers
0012D2r 1  4C rr rr     	JMP	LAB_1ADB		;.continue evaluation
0012D5r 1               
0012D5r 1               ; copy string from descriptor (sdescr) to (Sutill)
0012D5r 1               
0012D5r 1               LAB_228A:
0012D5r 1  A0 00        	LDY	#$00			; clear index
0012D7r 1  B1 B8        	LDA	(sdescr),Y		; get string length
0012D9r 1  48           	PHA				; save on stack
0012DAr 1  C8           	INY				; increment index
0012DBr 1  B1 B8        	LDA	(sdescr),Y		; get source string pointer low byte
0012DDr 1  AA           	TAX				; copy to X
0012DEr 1  C8           	INY				; increment index
0012DFr 1  B1 B8        	LDA	(sdescr),Y		; get source string pointer high byte
0012E1r 1  A8           	TAY				; copy to Y
0012E2r 1  68           	PLA				; get length back
0012E3r 1               
0012E3r 1               ; store string A bytes long from YX to (Sutill)
0012E3r 1               
0012E3r 1               LAB_2298:
0012E3r 1  86 71        	STX	ut1_pl		; save source string pointer low byte
0012E5r 1  84 72        	STY	ut1_ph		; save source string pointer high byte
0012E7r 1               
0012E7r 1               ; store string A bytes long from (ut1_pl) to (Sutill)
0012E7r 1               
0012E7r 1               LAB_229C:
0012E7r 1  AA           	TAX				; copy length to index (don't count with Y)
0012E8r 1  F0 14        	BEQ	LAB_22B2		; branch if = $0 (null string) no need to add zero length
0012EAr 1               
0012EAr 1  A0 00        	LDY	#$00			; zero pointer (copy forward)
0012ECr 1               LAB_22A0:
0012ECr 1  B1 71        	LDA	(ut1_pl),Y		; get source byte
0012EEr 1  91 83        	STA	(Sutill),Y		; save destination byte
0012F0r 1               
0012F0r 1  C8           	INY				; increment index
0012F1r 1  CA           	DEX				; decrement counter
0012F2r 1  D0 F8        	BNE	LAB_22A0		; loop while <> 0
0012F4r 1               
0012F4r 1  98           	TYA				; restore length from Y
0012F5r 1               LAB_22A9:
0012F5r 1  18           	CLC				; clear carry for add
0012F6r 1  65 83        	ADC	Sutill		; add string utility ptr low byte
0012F8r 1  85 83        	STA	Sutill		; save string utility ptr low byte
0012FAr 1  90 02        	BCC	LAB_22B2		; branch if no carry
0012FCr 1               
0012FCr 1  E6 84        	INC	Sutilh		; else increment string utility ptr high byte
0012FEr 1               LAB_22B2:
0012FEr 1  60           	RTS
0012FFr 1               
0012FFr 1               ; evaluate string
0012FFr 1               
0012FFr 1               LAB_EVST:
0012FFr 1  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
001302r 1               
001302r 1               ; pop string off descriptor stack, or from top of string space
001302r 1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
001302r 1               
001302r 1               LAB_22B6:
001302r 1  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
001304r 1  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
001306r 1               
001306r 1               ; pop (YA) descriptor off stack or from top of string space
001306r 1               ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
001306r 1               
001306r 1               LAB_22BA:
001306r 1  85 71        	STA	ut1_pl		; save descriptor pointer low byte
001308r 1  84 72        	STY	ut1_ph		; save descriptor pointer high byte
00130Ar 1  20 rr rr     	JSR	LAB_22EB		; clean descriptor stack, YA = pointer
00130Dr 1  08           	PHP				; save status flags
00130Er 1  A0 00        	LDY	#$00			; clear index
001310r 1  B1 71        	LDA	(ut1_pl),Y		; get length from string descriptor
001312r 1  48           	PHA				; put on stack
001313r 1  C8           	INY				; increment index
001314r 1  B1 71        	LDA	(ut1_pl),Y		; get string pointer low byte from descriptor
001316r 1  AA           	TAX				; copy to X
001317r 1  C8           	INY				; increment index
001318r 1  B1 71        	LDA	(ut1_pl),Y		; get string pointer high byte from descriptor
00131Ar 1  A8           	TAY				; copy to Y
00131Br 1  68           	PLA				; get string length back
00131Cr 1  28           	PLP				; restore status
00131Dr 1  D0 13        	BNE	LAB_22E6		; branch if pointer <> last_sl,last_sh
00131Fr 1               
00131Fr 1  C4 82        	CPY	Sstorh		; compare bottom of string space high byte
001321r 1  D0 0F        	BNE	LAB_22E6		; branch if <>
001323r 1               
001323r 1  E4 81        	CPX	Sstorl		; else compare bottom of string space low byte
001325r 1  D0 0B        	BNE	LAB_22E6		; branch if <>
001327r 1               
001327r 1  48           	PHA				; save string length
001328r 1  18           	CLC				; clear carry for add
001329r 1  65 81        	ADC	Sstorl		; add bottom of string space low byte
00132Br 1  85 81        	STA	Sstorl		; save bottom of string space low byte
00132Dr 1  90 02        	BCC	LAB_22E5		; skip increment if no overflow
00132Fr 1               
00132Fr 1  E6 82        	INC	Sstorh		; increment bottom of string space high byte
001331r 1               LAB_22E5:
001331r 1  68           	PLA				; restore string length
001332r 1               LAB_22E6:
001332r 1  86 71        	STX	ut1_pl		; save string pointer low byte
001334r 1  84 72        	STY	ut1_ph		; save string pointer high byte
001336r 1  60           	RTS
001337r 1               
001337r 1               ; clean descriptor stack, YA = pointer
001337r 1               ; checks if AY is on the descriptor stack, if so does a stack discard
001337r 1               
001337r 1               LAB_22EB:
001337r 1  C4 67        	CPY	last_sh		; compare pointer high byte
001339r 1  D0 0C        	BNE	LAB_22FB		; exit if <>
00133Br 1               
00133Br 1  C5 66        	CMP	last_sl		; compare pointer low byte
00133Dr 1  D0 08        	BNE	LAB_22FB		; exit if <>
00133Fr 1               
00133Fr 1  85 65        	STA	next_s		; save descriptor stack pointer
001341r 1  E9 03        	SBC	#$03			; -3
001343r 1  85 66        	STA	last_sl		; save low byte -3
001345r 1  A0 00        	LDY	#$00			; clear high byte
001347r 1               LAB_22FB:
001347r 1  60           	RTS
001348r 1               
001348r 1               ; perform CHR$()
001348r 1               
001348r 1               LAB_CHRS:
001348r 1  20 rr rr     	JSR	LAB_EVBY		; evaluate byte expression, result in X
00134Br 1  8A           	TXA				; copy to A
00134Cr 1  48           	PHA				; save character
00134Dr 1  A9 01        	LDA	#$01			; string is single byte
00134Fr 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
001352r 1               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
001352r 1  68           	PLA				; get character back
001353r 1  A0 00        	LDY	#$00			; clear index
001355r 1  91 AD        	STA	(str_pl),Y		; save byte in string (byte IS string!)
001357r 1  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
00135Ar 1               					; address and length on descriptor stack and update stack
00135Ar 1               					; pointers
00135Ar 1               
00135Ar 1               ; perform LEFT$()
00135Ar 1               
00135Ar 1               LAB_LEFT:
00135Ar 1  48           	PHA				; push byte parameter
00135Br 1  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
00135Er 1               					; return pointer in des_2l/h, byte in A (and X), Y=0
00135Er 1  D1 9E        	CMP	(des_2l),Y		; compare byte parameter with string length
001360r 1  98           	TYA				; clear A
001361r 1  F0 09        	BEQ	LAB_2316		; go do string copy (branch always)
001363r 1               
001363r 1               ; perform RIGHT$()
001363r 1               
001363r 1               LAB_RIGHT:
001363r 1  48           	PHA				; push byte parameter
001364r 1  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
001367r 1               					; return pointer in des_2l/h, byte in A (and X), Y=0
001367r 1  18           	CLC				; clear carry for add-1
001368r 1  F1 9E        	SBC	(des_2l),Y		; subtract string length
00136Ar 1  49 FF        	EOR	#$FF			; invert it (A=LEN(expression$)-l)
00136Cr 1               
00136Cr 1               LAB_2316:
00136Cr 1  90 04        	BCC	LAB_231C		; branch if string length > byte parameter
00136Er 1               
00136Er 1  B1 9E        	LDA	(des_2l),Y		; else make parameter = length
001370r 1  AA           	TAX				; copy to byte parameter copy
001371r 1  98           	TYA				; clear string start offset
001372r 1               LAB_231C:
001372r 1  48           	PHA				; save string start offset
001373r 1               LAB_231D:
001373r 1  8A           	TXA				; copy byte parameter (or string length if <)
001374r 1               LAB_231E:
001374r 1  48           	PHA				; save string length
001375r 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
001378r 1               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
001378r 1  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
00137Ar 1  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
00137Cr 1  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
00137Fr 1               					; returns with A = length, X=ut1_pl=pointer low byte,
00137Fr 1               					; Y=ut1_ph=pointer high byte
00137Fr 1  68           	PLA				; get string length back
001380r 1  A8           	TAY				; copy length to Y
001381r 1  68           	PLA				; get string start offset back
001382r 1  18           	CLC				; clear carry for add
001383r 1  65 71        	ADC	ut1_pl		; add start offset to string start pointer low byte
001385r 1  85 71        	STA	ut1_pl		; save string start pointer low byte
001387r 1  90 02        	BCC	LAB_2335		; branch if no overflow
001389r 1               
001389r 1  E6 72        	INC	ut1_ph		; else increment string start pointer high byte
00138Br 1               LAB_2335:
00138Br 1  98           	TYA				; copy length to A
00138Cr 1  20 rr rr     	JSR	LAB_229C		; store string A bytes long from (ut1_pl) to (Sutill)
00138Fr 1  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
001392r 1               					; address and length on descriptor stack and update stack
001392r 1               					; pointers
001392r 1               
001392r 1               ; perform MID$()
001392r 1               
001392r 1               LAB_MIDS:
001392r 1  48           	PHA				; push byte parameter
001393r 1  A9 FF        	LDA	#$FF			; set default length = 255
001395r 1  85 AF        	STA	mids_l		; save default length
001397r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
00139Ar 1  C9 29        	CMP	#')'			; compare with ")"
00139Cr 1  F0 06        	BEQ	LAB_2358		; branch if = ")" (skip second byte get)
00139Er 1               
00139Er 1  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
0013A1r 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter (use copy in mids_l)
0013A4r 1               LAB_2358:
0013A4r 1  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
0013A7r 1               					; return pointer in des_2l/h, byte in A (and X), Y=0
0013A7r 1  CA           	DEX				; decrement start index
0013A8r 1  8A           	TXA				; copy to A
0013A9r 1  48           	PHA				; save string start offset
0013AAr 1  18           	CLC				; clear carry for sub-1
0013ABr 1  A2 00        	LDX	#$00			; clear output string length
0013ADr 1  F1 9E        	SBC	(des_2l),Y		; subtract string length
0013AFr 1  B0 C2        	BCS	LAB_231D		; if start>string length go do null string
0013B1r 1               
0013B1r 1  49 FF        	EOR	#$FF			; complement -length
0013B3r 1  C5 AF        	CMP	mids_l		; compare byte parameter
0013B5r 1  90 BD        	BCC	LAB_231E		; if length>remaining string go do RIGHT$
0013B7r 1               
0013B7r 1  A5 AF        	LDA	mids_l		; get length byte
0013B9r 1  B0 B9        	BCS	LAB_231E		; go do string copy (branch always)
0013BBr 1               
0013BBr 1               ; pull string data and byte parameter from stack
0013BBr 1               ; return pointer in des_2l/h, byte in A (and X), Y=0
0013BBr 1               
0013BBr 1               LAB_236F:
0013BBr 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
0013BEr 1  68           	PLA				; pull return address low byte (return address)
0013BFr 1  85 A2        	STA	Fnxjpl		; save functions jump vector low byte
0013C1r 1  68           	PLA				; pull return address high byte (return address)
0013C2r 1  85 A3        	STA	Fnxjph		; save functions jump vector high byte
0013C4r 1  68           	PLA				; pull byte parameter
0013C5r 1  AA           	TAX				; copy byte parameter to X
0013C6r 1  68           	PLA				; pull string pointer low byte
0013C7r 1  85 9E        	STA	des_2l		; save it
0013C9r 1  68           	PLA				; pull string pointer high byte
0013CAr 1  85 9F        	STA	des_2h		; save it
0013CCr 1  A0 00        	LDY	#$00			; clear index
0013CEr 1  8A           	TXA				; copy byte parameter
0013CFr 1  F0 79        	BEQ	LAB_23A8		; if null do function call error then warm start
0013D1r 1               
0013D1r 1  E6 A2        	INC	Fnxjpl		; increment function jump vector low byte
0013D3r 1               					; (JSR pushes return addr-1. this is all very nice
0013D3r 1               					; but will go tits up if either call is on a page
0013D3r 1               					; boundary!)
0013D3r 1  6C A2 00     	JMP	(Fnxjpl)		; in effect, RTS
0013D6r 1               
0013D6r 1               ; perform LCASE$()
0013D6r 1               
0013D6r 1               LAB_LCASE:
0013D6r 1  20 rr rr     	JSR	LAB_EVST		; evaluate string
0013D9r 1  85 AC        	STA	str_ln		; set string length
0013DBr 1  A8           	TAY				; copy length to Y
0013DCr 1  F0 38        	BEQ	NoString		; branch if null string
0013DEr 1               
0013DEr 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=length,
0013E1r 1               					; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
0013E1r 1  86 AD        	STX	str_pl		; save string pointer low byte
0013E3r 1  84 AE        	STY	str_ph		; save string pointer high byte
0013E5r 1  A8           	TAY				; get string length back
0013E6r 1               
0013E6r 1               LC_loop:
0013E6r 1  88           	DEY				; decrement index
0013E7r 1  B1 71        	LDA	(ut1_pl),Y		; get byte from string
0013E9r 1  20 rr rr     	JSR	LAB_1D82		; is character "A" to "Z"
0013ECr 1  90 02        	BCC	NoUcase		; branch if not upper case alpha
0013EEr 1               
0013EEr 1  09 20        	ORA	#$20			; convert upper to lower case
0013F0r 1               NoUcase:
0013F0r 1  91 83        	STA	(Sutill),Y		; save byte back to string
0013F2r 1  98           	TYA				; test index
0013F3r 1  D0 F1        	BNE	LC_loop		; loop if not all done
0013F5r 1               
0013F5r 1  F0 1F        	BEQ	NoString		; tidy up and exit, branch always
0013F7r 1               
0013F7r 1               ; perform UCASE$()
0013F7r 1               
0013F7r 1               LAB_UCASE:
0013F7r 1  20 rr rr     	JSR	LAB_EVST		; evaluate string
0013FAr 1  85 AC        	STA	str_ln		; set string length
0013FCr 1  A8           	TAY				; copy length to Y
0013FDr 1  F0 17        	BEQ	NoString		; branch if null string
0013FFr 1               
0013FFr 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=length,
001402r 1               					; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001402r 1  86 AD        	STX	str_pl		; save string pointer low byte
001404r 1  84 AE        	STY	str_ph		; save string pointer high byte
001406r 1  A8           	TAY				; get string length back
001407r 1               
001407r 1               UC_loop:
001407r 1  88           	DEY				; decrement index
001408r 1  B1 71        	LDA	(ut1_pl),Y		; get byte from string
00140Ar 1  20 rr rr     	JSR	LAB_CASC		; is character "a" to "z" (or "A" to "Z")
00140Dr 1  90 02        	BCC	NoLcase		; branch if not alpha
00140Fr 1               
00140Fr 1  29 DF        	AND	#$DF			; convert lower to upper case
001411r 1               NoLcase:
001411r 1  91 83        	STA	(Sutill),Y		; save byte back to string
001413r 1  98           	TYA				; test index
001414r 1  D0 F1        	BNE	UC_loop		; loop if not all done
001416r 1               
001416r 1               NoString:
001416r 1  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
001419r 1               					; address and length on descriptor stack and update stack
001419r 1               					; pointers
001419r 1               
001419r 1               ; perform SADD()
001419r 1               
001419r 1               LAB_SADD:
001419r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
00141Cr 1  20 rr rr     	JSR	LAB_GVAR		; get var address
00141Fr 1               
00141Fr 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")", else do syntax error then warm start
001422r 1  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
001425r 1               
001425r 1  A0 02        	LDY	#$02			; index to string pointer high byte
001427r 1  B1 95        	LDA	(Cvaral),Y		; get string pointer high byte
001429r 1  AA           	TAX				; copy string pointer high byte to X
00142Ar 1  88           	DEY				; index to string pointer low byte
00142Br 1  B1 95        	LDA	(Cvaral),Y		; get string pointer low byte
00142Dr 1  A8           	TAY				; copy string pointer low byte to Y
00142Er 1  8A           	TXA				; copy string pointer high byte to A
00142Fr 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
001432r 1               
001432r 1               ; perform LEN()
001432r 1               
001432r 1               LAB_LENS:
001432r 1  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
001435r 1  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
001438r 1               
001438r 1               ; evaluate string, get length in Y
001438r 1               
001438r 1               LAB_ESGL:
001438r 1  20 rr rr     	JSR	LAB_EVST		; evaluate string
00143Br 1  A8           	TAY				; copy length to Y
00143Cr 1  60           	RTS
00143Dr 1               
00143Dr 1               ; perform ASC()
00143Dr 1               
00143Dr 1               LAB_ASC:
00143Dr 1  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
001440r 1  F0 08        	BEQ	LAB_23A8		; if null do function call error then warm start
001442r 1               
001442r 1  A0 00        	LDY	#$00			; set index to first character
001444r 1  B1 71        	LDA	(ut1_pl),Y		; get byte
001446r 1  A8           	TAY				; copy to Y
001447r 1  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
00144Ar 1               
00144Ar 1               ; do function call error then warm start
00144Ar 1               
00144Ar 1               LAB_23A8:
00144Ar 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
00144Dr 1               
00144Dr 1               ; scan and get byte parameter
00144Dr 1               
00144Dr 1               LAB_SGBY:
00144Dr 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001450r 1               
001450r 1               ; get byte parameter
001450r 1               
001450r 1               LAB_GTBY:
001450r 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001453r 1               					; else do type mismatch
001453r 1               
001453r 1               ; evaluate byte expression, result in X
001453r 1               
001453r 1               LAB_EVBY:
001453r 1  20 rr rr     	JSR	LAB_EVPI		; evaluate integer expression (no check)
001456r 1               
001456r 1  A4 AE        	LDY	FAC1_2		; get FAC1 mantissa2
001458r 1  D0 F0        	BNE	LAB_23A8		; if top byte <> 0 do function call error then warm start
00145Ar 1               
00145Ar 1  A6 AF        	LDX	FAC1_3		; get FAC1 mantissa3
00145Cr 1  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
00145Fr 1               
00145Fr 1               ; perform VAL()
00145Fr 1               
00145Fr 1               LAB_VAL:
00145Fr 1  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
001462r 1  D0 03        	BNE	LAB_23C5		; branch if not null string
001464r 1               
001464r 1               					; string was null so set result = $00
001464r 1  4C rr rr     	JMP	LAB_24F1		; clear FAC1 exponent and sign and return
001467r 1               
001467r 1               LAB_23C5:
001467r 1  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
001469r 1  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
00146Br 1  86 BA        	STX	Btmpl			; save BASIC execute pointer low byte
00146Dr 1  84 BB        	STY	Btmph			; save BASIC execute pointer high byte
00146Fr 1  A6 71        	LDX	ut1_pl		; get string pointer low byte
001471r 1  86 C3        	STX	Bpntrl		; save as BASIC execute pointer low byte
001473r 1  18           	CLC				; clear carry
001474r 1  65 71        	ADC	ut1_pl		; add string length
001476r 1  85 73        	STA	ut2_pl		; save string end low byte
001478r 1  A5 72        	LDA	ut1_ph		; get string pointer high byte
00147Ar 1  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
00147Cr 1  69 00        	ADC	#$00			; add carry to high byte
00147Er 1  85 74        	STA	ut2_ph		; save string end high byte
001480r 1  A0 00        	LDY	#$00			; set index to $00
001482r 1  B1 73        	LDA	(ut2_pl),Y		; get string end +1 byte
001484r 1  48           	PHA				; push it
001485r 1  98           	TYA				; clear A
001486r 1  91 73        	STA	(ut2_pl),Y		; terminate string with $00
001488r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
00148Br 1  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
00148Er 1  68           	PLA				; restore string end +1 byte
00148Fr 1  A0 00        	LDY	#$00			; set index to zero
001491r 1  91 73        	STA	(ut2_pl),Y		; put string end byte back
001493r 1               
001493r 1               ; restore BASIC execute pointer from temp (Btmpl/Btmph)
001493r 1               
001493r 1               LAB_23F3:
001493r 1  A6 BA        	LDX	Btmpl			; get BASIC execute pointer low byte back
001495r 1  A4 BB        	LDY	Btmph			; get BASIC execute pointer high byte back
001497r 1  86 C3        	STX	Bpntrl		; save BASIC execute pointer low byte
001499r 1  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
00149Br 1  60           	RTS
00149Cr 1               
00149Cr 1               ; get two parameters for POKE or WAIT
00149Cr 1               
00149Cr 1               LAB_GADB:
00149Cr 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
00149Fr 1               					; else do type mismatch
00149Fr 1  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
0014A2r 1               
0014A2r 1               ; scan for "," and get byte, else do Syntax error then warm start
0014A2r 1               
0014A2r 1               LAB_SCGB:
0014A2r 1  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
0014A5r 1  A5 42        	LDA	Itemph		; save temporary integer high byte
0014A7r 1  48           	PHA				; on stack
0014A8r 1  A5 41        	LDA	Itempl		; save temporary integer low byte
0014AAr 1  48           	PHA				; on stack
0014ABr 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
0014AEr 1  68           	PLA				; pull low byte
0014AFr 1  85 41        	STA	Itempl		; restore temporary integer low byte
0014B1r 1  68           	PLA				; pull high byte
0014B2r 1  85 42        	STA	Itemph		; restore temporary integer high byte
0014B4r 1  60           	RTS
0014B5r 1               
0014B5r 1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
0014B5r 1               ; -ve and converts it into a right truncated integer in Itempl and Itemph
0014B5r 1               
0014B5r 1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
0014B5r 1               
0014B5r 1               LAB_F2FX:
0014B5r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0014B7r 1  C9 98        	CMP	#$98			; compare with exponent = 2^24
0014B9r 1  B0 8F        	BCS	LAB_23A8		; if >= do function call error then warm start
0014BBr 1               
0014BBr 1               LAB_F2FU:
0014BBr 1  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
0014BEr 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
0014C0r 1  A4 AF        	LDY	FAC1_3		; get FAC1 mantissa3
0014C2r 1  84 41        	STY	Itempl		; save temporary integer low byte
0014C4r 1  85 42        	STA	Itemph		; save temporary integer high byte
0014C6r 1  60           	RTS
0014C7r 1               
0014C7r 1               ; perform PEEK()
0014C7r 1               
0014C7r 1               LAB_PEEK:
0014C7r 1  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
0014CAr 1  A2 00        	LDX	#$00			; clear index
0014CCr 1  A1 41        	LDA	(Itempl,X)		; get byte via temporary integer (addr)
0014CEr 1  A8           	TAY				; copy byte to Y
0014CFr 1  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
0014D2r 1               
0014D2r 1               ; perform POKE
0014D2r 1               
0014D2r 1               LAB_POKE:
0014D2r 1  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
0014D5r 1  8A           	TXA				; copy byte argument to A
0014D6r 1  A2 00        	LDX	#$00			; clear index
0014D8r 1  81 41        	STA	(Itempl,X)		; save byte via temporary integer (addr)
0014DAr 1  60           	RTS
0014DBr 1               
0014DBr 1               ; perform DEEK()
0014DBr 1               
0014DBr 1               LAB_DEEK:
0014DBr 1  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
0014DEr 1  A2 00        	LDX	#$00			; clear index
0014E0r 1  A1 41        	LDA	(Itempl,X)		; PEEK low byte
0014E2r 1  A8           	TAY				; copy to Y
0014E3r 1  E6 41        	INC	Itempl		; increment pointer low byte
0014E5r 1  D0 02        	BNE	Deekh			; skip high increment if no rollover
0014E7r 1               
0014E7r 1  E6 42        	INC	Itemph		; increment pointer high byte
0014E9r 1               Deekh:
0014E9r 1  A1 41        	LDA	(Itempl,X)		; PEEK high byte
0014EBr 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
0014EEr 1               
0014EEr 1               ; perform DOKE
0014EEr 1               
0014EEr 1               LAB_DOKE:
0014EEr 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0014F1r 1               					; else do type mismatch
0014F1r 1  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
0014F4r 1               
0014F4r 1  84 97        	STY	Frnxtl		; save pointer low byte (float to fixed returns word in AY)
0014F6r 1  85 98        	STA	Frnxth		; save pointer high byte
0014F8r 1               
0014F8r 1  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
0014FBr 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0014FEr 1               					; else do type mismatch
0014FEr 1  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
001501r 1               
001501r 1  98           	TYA				; copy value low byte (float to fixed returns word in AY)
001502r 1  A2 00        	LDX	#$00			; clear index
001504r 1  81 97        	STA	(Frnxtl,X)		; POKE low byte
001506r 1  E6 97        	INC	Frnxtl		; increment pointer low byte
001508r 1  D0 02        	BNE	Dokeh			; skip high increment if no rollover
00150Ar 1               
00150Ar 1  E6 98        	INC	Frnxth		; increment pointer high byte
00150Cr 1               Dokeh:
00150Cr 1  A5 42        	LDA	Itemph		; get value high byte
00150Er 1  81 97        	STA	(Frnxtl,X)		; POKE high byte
001510r 1  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
001513r 1               
001513r 1               ; perform SWAP
001513r 1               
001513r 1               LAB_SWAP:
001513r 1  20 rr rr     	JSR	LAB_GVAR		; get var1 address
001516r 1  85 97        	STA	Lvarpl		; save var1 address low byte
001518r 1  84 98        	STY	Lvarph		; save var1 address high byte
00151Ar 1  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
00151Cr 1  48           	PHA				; save data type flag
00151Dr 1               
00151Dr 1  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
001520r 1  20 rr rr     	JSR	LAB_GVAR		; get var2 address (pointer in Cvaral/h)
001523r 1  68           	PLA				; pull var1 data type flag
001524r 1  45 5F        	EOR	Dtypef		; compare with var2 data type
001526r 1  10 10        	BPL	SwapErr		; exit if not both the same type
001528r 1               
001528r 1  A0 03        	LDY	#$03			; four bytes to swap (either value or descriptor+1)
00152Ar 1               SwapLp:
00152Ar 1  B1 97        	LDA	(Lvarpl),Y		; get byte from var1
00152Cr 1  AA           	TAX				; save var1 byte
00152Dr 1  B1 95        	LDA	(Cvaral),Y		; get byte from var2
00152Fr 1  91 97        	STA	(Lvarpl),Y		; save byte to var1
001531r 1  8A           	TXA				; restore var1 byte
001532r 1  91 95        	STA	(Cvaral),Y		; save byte to var2
001534r 1  88           	DEY				; decrement index
001535r 1  10 F3        	BPL	SwapLp		; loop until done
001537r 1               
001537r 1  60           	RTS
001538r 1               
001538r 1               SwapErr:
001538r 1  4C rr rr     	JMP	LAB_1ABC		; do "Type mismatch" error then warm start
00153Br 1               
00153Br 1               ; perform CALL
00153Br 1               
00153Br 1               LAB_CALL:
00153Br 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
00153Er 1               					; else do type mismatch
00153Er 1  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
001541r 1  A9 rr        	LDA	#>CallExit		; set return address high byte
001543r 1  48           	PHA				; put on stack
001544r 1  A9 rr        	LDA	#<CallExit-1	; set return address low byte
001546r 1  48           	PHA				; put on stack
001547r 1  6C 41 00     	JMP	(Itempl)		; do indirect jump to user routine
00154Ar 1               
00154Ar 1               ; if the called routine exits correctly then it will return to here. this will then get
00154Ar 1               ; the next byte for the interpreter and return
00154Ar 1               
00154Ar 1               CallExit:
00154Ar 1  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
00154Dr 1               
00154Dr 1               ; perform WAIT
00154Dr 1               
00154Dr 1               LAB_WAIT:
00154Dr 1  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001550r 1  86 97        	STX	Frnxtl		; save byte
001552r 1  A2 00        	LDX	#$00			; clear mask
001554r 1  20 C2 00     	JSR	LAB_GBYT		; scan memory
001557r 1  F0 03        	BEQ	LAB_2441		; skip if no third argument
001559r 1               
001559r 1  20 rr rr     	JSR	LAB_SCGB		; scan for "," and get byte, else SN error then warm start
00155Cr 1               LAB_2441:
00155Cr 1  86 98        	STX	Frnxth		; save EOR argument
00155Er 1               LAB_2445:
00155Er 1  B1 41        	LDA	(Itempl),Y		; get byte via temporary integer (addr)
001560r 1  45 98        	EOR	Frnxth		; EOR with second argument (mask)
001562r 1  25 97        	AND	Frnxtl		; AND with first argument (byte)
001564r 1  F0 F8        	BEQ	LAB_2445		; loop if result is zero
001566r 1               
001566r 1               LAB_244D:
001566r 1  60           	RTS
001567r 1               
001567r 1               ; perform subtraction, FAC1 from (AY)
001567r 1               
001567r 1               LAB_2455:
001567r 1  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
00156Ar 1               
00156Ar 1               ; perform subtraction, FAC1 from FAC2
00156Ar 1               
00156Ar 1               LAB_SUBTRACT:
00156Ar 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
00156Cr 1  49 FF        	EOR	#$FF			; complement it
00156Er 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001570r 1  45 B7        	EOR	FAC2_s		; EOR with FAC2 sign (b7)
001572r 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001574r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001576r 1  4C rr rr     	JMP	LAB_ADD		; go add FAC2 to FAC1
001579r 1               
001579r 1               ; perform addition
001579r 1               
001579r 1               LAB_2467:
001579r 1  20 rr rr     	JSR	LAB_257B		; shift FACX A times right (>8 shifts)
00157Cr 1  90 4D        	BCC	LAB_24A8		;.go subtract mantissas
00157Er 1               
00157Er 1               ; add 0.5 to FAC1
00157Er 1               
00157Er 1               LAB_244E:
00157Er 1  A9 rr        	LDA	#<LAB_2A96		; set 0.5 pointer low byte
001580r 1  A0 rr        	LDY	#>LAB_2A96		; set 0.5 pointer high byte
001582r 1               
001582r 1               ; add (AY) to FAC1
001582r 1               
001582r 1               LAB_246C:
001582r 1  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
001585r 1               
001585r 1               ; add FAC2 to FAC1
001585r 1               
001585r 1               LAB_ADD:
001585r 1  D0 10        	BNE	LAB_2474		; branch if FAC1 was not zero
001587r 1               
001587r 1               ; copy FAC2 to FAC1
001587r 1               
001587r 1               LAB_279B:
001587r 1  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
001589r 1               
001589r 1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
001589r 1               
001589r 1               LAB_279D:
001589r 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
00158Br 1  A2 04        	LDX	#$04			; 4 bytes to copy
00158Dr 1               LAB_27A1:
00158Dr 1  B5 B2        	LDA	FAC1_o,X		; get byte from FAC2,X
00158Fr 1  95 AB        	STA	FAC1_e-1,X		; save byte at FAC1,X
001591r 1  CA           	DEX				; decrement count
001592r 1  D0 F9        	BNE	LAB_27A1		; loop if not all done
001594r 1               
001594r 1  86 B9        	STX	FAC1_r		; clear FAC1 rounding byte
001596r 1  60           	RTS
001597r 1               
001597r 1               					; FAC1 is non zero
001597r 1               LAB_2474:
001597r 1  A6 B9        	LDX	FAC1_r		; get FAC1 rounding byte
001599r 1  86 A3        	STX	FAC2_r		; save as FAC2 rounding byte
00159Br 1  A2 B3        	LDX	#FAC2_e		; set index to FAC2 exponent addr
00159Dr 1  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
00159Fr 1               LAB_247C:
00159Fr 1  A8           	TAY				; copy exponent
0015A0r 1  F0 C4        	BEQ	LAB_244D		; exit if zero
0015A2r 1               
0015A2r 1  38           	SEC				; set carry for subtract
0015A3r 1  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent
0015A5r 1  F0 24        	BEQ	LAB_24A8		; branch if = (go add mantissa)
0015A7r 1               
0015A7r 1  90 12        	BCC	LAB_2498		; branch if <
0015A9r 1               
0015A9r 1               					; FAC2>FAC1
0015A9r 1  84 AC        	STY	FAC1_e		; save FAC1 exponent
0015ABr 1  A4 B7        	LDY	FAC2_s		; get FAC2 sign (b7)
0015ADr 1  84 B0        	STY	FAC1_s		; save FAC1 sign (b7)
0015AFr 1  49 FF        	EOR	#$FF			; complement A
0015B1r 1  69 00        	ADC	#$00			; +1 (twos complement, carry is set)
0015B3r 1  A0 00        	LDY	#$00			; clear Y
0015B5r 1  84 A3        	STY	FAC2_r		; clear FAC2 rounding byte
0015B7r 1  A2 AC        	LDX	#FAC1_e		; set index to FAC1 exponent addr
0015B9r 1  D0 04        	BNE	LAB_249C		; branch always
0015BBr 1               
0015BBr 1               LAB_2498:
0015BBr 1  A0 00        	LDY	#$00			; clear Y
0015BDr 1  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
0015BFr 1               LAB_249C:
0015BFr 1  C9 F9        	CMP	#$F9			; compare exponent diff with $F9
0015C1r 1  30 B6        	BMI	LAB_2467		; branch if range $79-$F8
0015C3r 1               
0015C3r 1  A8           	TAY				; copy exponent difference to Y
0015C4r 1  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
0015C6r 1  56 01        	LSR	PLUS_1,X		; shift FAC? mantissa1
0015C8r 1  20 rr rr     	JSR	LAB_2592		; shift FACX Y times right
0015CBr 1               
0015CBr 1               					; exponents are equal now do mantissa subtract
0015CBr 1               LAB_24A8:
0015CBr 1  24 B8        	BIT	FAC_sc		; test sign compare (FAC1 EOR FAC2)
0015CDr 1  10 4C        	BPL	LAB_24F8		; if = add FAC2 mantissa to FAC1 mantissa and return
0015CFr 1               
0015CFr 1  A0 AC        	LDY	#FAC1_e		; set index to FAC1 exponent addr
0015D1r 1  E0 B3        	CPX	#FAC2_e		; compare X to FAC2 exponent addr
0015D3r 1  F0 02        	BEQ	LAB_24B4		; branch if =
0015D5r 1               
0015D5r 1  A0 B3        	LDY	#FAC2_e		; else set index to FAC2 exponent addr
0015D7r 1               
0015D7r 1               					; subtract smaller from bigger (take sign of bigger)
0015D7r 1               LAB_24B4:
0015D7r 1  38           	SEC				; set carry for subtract
0015D8r 1  49 FF        	EOR	#$FF			; ones complement A
0015DAr 1  65 A3        	ADC	FAC2_r		; add FAC2 rounding byte
0015DCr 1  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
0015DEr 1  B9 03 00     	LDA	PLUS_3,Y		; get FACY mantissa3
0015E1r 1  F5 03        	SBC	PLUS_3,X		; subtract FACX mantissa3
0015E3r 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
0015E5r 1  B9 02 00     	LDA	PLUS_2,Y		; get FACY mantissa2
0015E8r 1  F5 02        	SBC	PLUS_2,X		; subtract FACX mantissa2
0015EAr 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
0015ECr 1  B9 01 00     	LDA	PLUS_1,Y		; get FACY mantissa1
0015EFr 1  F5 01        	SBC	PLUS_1,X		; subtract FACX mantissa1
0015F1r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
0015F3r 1               
0015F3r 1               ; do ABS and normalise FAC1
0015F3r 1               
0015F3r 1               LAB_24D0:
0015F3r 1  B0 03        	BCS	LAB_24D5		; branch if number is +ve
0015F5r 1               
0015F5r 1  20 rr rr     	JSR	LAB_2537		; negate FAC1
0015F8r 1               
0015F8r 1               ; normalise FAC1
0015F8r 1               
0015F8r 1               LAB_24D5:
0015F8r 1  A0 00        	LDY	#$00			; clear Y
0015FAr 1  98           	TYA				; clear A
0015FBr 1  18           	CLC				; clear carry for add
0015FCr 1               LAB_24D9:
0015FCr 1  A6 AD        	LDX	FAC1_1		; get FAC1 mantissa1
0015FEr 1  D0 3E        	BNE	LAB_251B		; if not zero normalise FAC1
001600r 1               
001600r 1  A6 AE        	LDX	FAC1_2		; get FAC1 mantissa2
001602r 1  86 AD        	STX	FAC1_1		; save FAC1 mantissa1
001604r 1  A6 AF        	LDX	FAC1_3		; get FAC1 mantissa3
001606r 1  86 AE        	STX	FAC1_2		; save FAC1 mantissa2
001608r 1  A6 B9        	LDX	FAC1_r		; get FAC1 rounding byte
00160Ar 1  86 AF        	STX	FAC1_3		; save FAC1 mantissa3
00160Cr 1  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
00160Er 1  69 08        	ADC	#$08			; add x to exponent offset
001610r 1  C9 18        	CMP	#$18			; compare with $18 (max offset, all bits would be =0)
001612r 1  D0 E8        	BNE	LAB_24D9		; loop if not max
001614r 1               
001614r 1               ; clear FAC1 exponent and sign
001614r 1               
001614r 1               LAB_24F1:
001614r 1  A9 00        	LDA	#$00			; clear A
001616r 1               LAB_24F3:
001616r 1  85 AC        	STA	FAC1_e		; set FAC1 exponent
001618r 1               
001618r 1               ; save FAC1 sign
001618r 1               
001618r 1               LAB_24F5:
001618r 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
00161Ar 1  60           	RTS
00161Br 1               
00161Br 1               ; add FAC2 mantissa to FAC1 mantissa
00161Br 1               
00161Br 1               LAB_24F8:
00161Br 1  65 A3        	ADC	FAC2_r		; add FAC2 rounding byte
00161Dr 1  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
00161Fr 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001621r 1  65 B6        	ADC	FAC2_3		; add FAC2 mantissa3
001623r 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001625r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001627r 1  65 B5        	ADC	FAC2_2		; add FAC2 mantissa2
001629r 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
00162Br 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
00162Dr 1  65 B4        	ADC	FAC2_1		; add FAC2 mantissa1
00162Fr 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001631r 1  B0 1A        	BCS	LAB_252A		; if carry then normalise FAC1 for C=1
001633r 1               
001633r 1  60           	RTS				; else just exit
001634r 1               
001634r 1               LAB_2511:
001634r 1  69 01        	ADC	#$01			; add 1 to exponent offset
001636r 1  06 B9        	ASL	FAC1_r		; shift FAC1 rounding byte
001638r 1  26 AF        	ROL	FAC1_3		; shift FAC1 mantissa3
00163Ar 1  26 AE        	ROL	FAC1_2		; shift FAC1 mantissa2
00163Cr 1  26 AD        	ROL	FAC1_1		; shift FAC1 mantissa1
00163Er 1               
00163Er 1               ; normalise FAC1
00163Er 1               
00163Er 1               LAB_251B:
00163Er 1  10 F4        	BPL	LAB_2511		; loop if not normalised
001640r 1               
001640r 1  38           	SEC				; set carry for subtract
001641r 1  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent
001643r 1  B0 CF        	BCS	LAB_24F1		; branch if underflow (set result = $0)
001645r 1               
001645r 1  49 FF        	EOR	#$FF			; complement exponent
001647r 1  69 01        	ADC	#$01			; +1 (twos complement)
001649r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
00164Br 1               
00164Br 1               ; test and normalise FAC1 for C=0/1
00164Br 1               
00164Br 1               LAB_2528:
00164Br 1  90 0C        	BCC	LAB_2536		; exit if no overflow
00164Dr 1               
00164Dr 1               ; normalise FAC1 for C=1
00164Dr 1               
00164Dr 1               LAB_252A:
00164Dr 1  E6 AC        	INC	FAC1_e		; increment FAC1 exponent
00164Fr 1  F0 36        	BEQ	LAB_2564		; if zero do overflow error and warm start
001651r 1               
001651r 1  66 AD        	ROR	FAC1_1		; shift FAC1 mantissa1
001653r 1  66 AE        	ROR	FAC1_2		; shift FAC1 mantissa2
001655r 1  66 AF        	ROR	FAC1_3		; shift FAC1 mantissa3
001657r 1  66 B9        	ROR	FAC1_r		; shift FAC1 rounding byte
001659r 1               LAB_2536:
001659r 1  60           	RTS
00165Ar 1               
00165Ar 1               ; negate FAC1
00165Ar 1               
00165Ar 1               LAB_2537:
00165Ar 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
00165Cr 1  49 FF        	EOR	#$FF			; complement it
00165Er 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001660r 1               
001660r 1               ; twos complement FAC1 mantissa
001660r 1               
001660r 1               LAB_253D:
001660r 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001662r 1  49 FF        	EOR	#$FF			; complement it
001664r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001666r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001668r 1  49 FF        	EOR	#$FF			; complement it
00166Ar 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
00166Cr 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
00166Er 1  49 FF        	EOR	#$FF			; complement it
001670r 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001672r 1  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
001674r 1  49 FF        	EOR	#$FF			; complement it
001676r 1  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
001678r 1  E6 B9        	INC	FAC1_r		; increment FAC1 rounding byte
00167Ar 1  D0 0A        	BNE	LAB_2563		; exit if no overflow
00167Cr 1               
00167Cr 1               ; increment FAC1 mantissa
00167Cr 1               
00167Cr 1               LAB_2559:
00167Cr 1  E6 AF        	INC	FAC1_3		; increment FAC1 mantissa3
00167Er 1  D0 06        	BNE	LAB_2563		; finished if no rollover
001680r 1               
001680r 1  E6 AE        	INC	FAC1_2		; increment FAC1 mantissa2
001682r 1  D0 02        	BNE	LAB_2563		; finished if no rollover
001684r 1               
001684r 1  E6 AD        	INC	FAC1_1		; increment FAC1 mantissa1
001686r 1               LAB_2563:
001686r 1  60           	RTS
001687r 1               
001687r 1               ; do overflow error (overflow exit)
001687r 1               
001687r 1               LAB_2564:
001687r 1  A2 0A        	LDX	#$0A			; error code $0A ("Overflow" error)
001689r 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
00168Cr 1               
00168Cr 1               ; shift FCAtemp << A+8 times
00168Cr 1               
00168Cr 1               LAB_2569:
00168Cr 1  A2 74        	LDX	#FACt_1-1		; set offset to FACtemp
00168Er 1               LAB_256B:
00168Er 1  B4 03        	LDY	PLUS_3,X		; get FACX mantissa3
001690r 1  84 B9        	STY	FAC1_r		; save as FAC1 rounding byte
001692r 1  B4 02        	LDY	PLUS_2,X		; get FACX mantissa2
001694r 1  94 03        	STY	PLUS_3,X		; save FACX mantissa3
001696r 1  B4 01        	LDY	PLUS_1,X		; get FACX mantissa1
001698r 1  94 02        	STY	PLUS_2,X		; save FACX mantissa2
00169Ar 1  A4 B2        	LDY	FAC1_o		; get FAC1 overflow byte
00169Cr 1  94 01        	STY	PLUS_1,X		; save FACX mantissa1
00169Er 1               
00169Er 1               ; shift FACX -A times right (> 8 shifts)
00169Er 1               
00169Er 1               LAB_257B:
00169Er 1  69 08        	ADC	#$08			; add 8 to shift count
0016A0r 1  30 EC        	BMI	LAB_256B		; go do 8 shift if still -ve
0016A2r 1               
0016A2r 1  F0 EA        	BEQ	LAB_256B		; go do 8 shift if zero
0016A4r 1               
0016A4r 1  E9 08        	SBC	#$08			; else subtract 8 again
0016A6r 1  A8           	TAY				; save count to Y
0016A7r 1  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
0016A9r 1  B0 12        	BCS	LAB_259A		;.
0016ABr 1               
0016ABr 1               LAB_2588:
0016ABr 1  16 01        	ASL	PLUS_1,X		; shift FACX mantissa1
0016ADr 1  90 02        	BCC	LAB_258E		; branch if +ve
0016AFr 1               
0016AFr 1  F6 01        	INC	PLUS_1,X		; this sets b7 eventually
0016B1r 1               LAB_258E:
0016B1r 1  76 01        	ROR	PLUS_1,X		; shift FACX mantissa1 (correct for ASL)
0016B3r 1  76 01        	ROR	PLUS_1,X		; shift FACX mantissa1 (put carry in b7)
0016B5r 1               
0016B5r 1               ; shift FACX Y times right
0016B5r 1               
0016B5r 1               LAB_2592:
0016B5r 1  76 02        	ROR	PLUS_2,X		; shift FACX mantissa2
0016B7r 1  76 03        	ROR	PLUS_3,X		; shift FACX mantissa3
0016B9r 1  6A           	ROR				; shift FACX rounding byte
0016BAr 1  C8           	INY				; increment exponent diff
0016BBr 1  D0 EE        	BNE	LAB_2588		; branch if range adjust not complete
0016BDr 1               
0016BDr 1               LAB_259A:
0016BDr 1  18           	CLC				; just clear it
0016BEr 1  60           	RTS
0016BFr 1               
0016BFr 1               ; perform LOG()
0016BFr 1               
0016BFr 1               LAB_LOG:
0016BFr 1  20 rr rr     	JSR	LAB_27CA		; test sign and zero
0016C2r 1  F0 02        	BEQ	LAB_25C4		; if zero do function call error then warm start
0016C4r 1               
0016C4r 1  10 03        	BPL	LAB_25C7		; skip error if +ve
0016C6r 1               
0016C6r 1               LAB_25C4:
0016C6r 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start (-ve)
0016C9r 1               
0016C9r 1               LAB_25C7:
0016C9r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0016CBr 1  E9 7F        	SBC	#$7F			; normalise it
0016CDr 1  48           	PHA				; save it
0016CEr 1  A9 80        	LDA	#$80			; set exponent to zero
0016D0r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
0016D2r 1  A9 rr        	LDA	#<LAB_25AD		; set 1/root2 pointer low byte
0016D4r 1  A0 rr        	LDY	#>LAB_25AD		; set 1/root2 pointer high byte
0016D6r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1 (1/root2)
0016D9r 1  A9 rr        	LDA	#<LAB_25B1		; set root2 pointer low byte
0016DBr 1  A0 rr        	LDY	#>LAB_25B1		; set root2 pointer high byte
0016DDr 1  20 rr rr     	JSR	LAB_26CA		; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
0016E0r 1  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
0016E2r 1  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high byte
0016E4r 1  20 rr rr     	JSR	LAB_2455		; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
0016E7r 1  A9 rr        	LDA	#<LAB_25A0		; set pointer low byte to counter
0016E9r 1  A0 rr        	LDY	#>LAB_25A0		; set pointer high byte to counter
0016EBr 1  20 rr rr     	JSR	LAB_2B6E		; ^2 then series evaluation
0016EEr 1  A9 rr        	LDA	#<LAB_25B5		; set -0.5 pointer low byte
0016F0r 1  A0 rr        	LDY	#>LAB_25B5		; set -0.5 pointer high byte
0016F2r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
0016F5r 1  68           	PLA				; restore FAC1 exponent
0016F6r 1  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
0016F9r 1  A9 rr        	LDA	#<LAB_25B9		; set LOG(2) pointer low byte
0016FBr 1  A0 rr        	LDY	#>LAB_25B9		; set LOG(2) pointer high byte
0016FDr 1               
0016FDr 1               ; do convert AY, FCA1*(AY)
0016FDr 1               
0016FDr 1               LAB_25FB:
0016FDr 1  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
001700r 1               LAB_MULTIPLY:
001700r 1  F0 4C        	BEQ	LAB_264C		; exit if zero
001702r 1               
001702r 1  20 rr rr     	JSR	LAB_2673		; test and adjust accumulators
001705r 1  A9 00        	LDA	#$00			; clear A
001707r 1  85 75        	STA	FACt_1		; clear temp mantissa1
001709r 1  85 76        	STA	FACt_2		; clear temp mantissa2
00170Br 1  85 77        	STA	FACt_3		; clear temp mantissa3
00170Dr 1  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
00170Fr 1  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
001712r 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001714r 1  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
001717r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001719r 1  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
00171Cr 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
00171Er 1  20 rr rr     	JSR	LAB_2627		; go do shift/add FAC2
001721r 1  4C rr rr     	JMP	LAB_273C		; copy temp to FAC1, normalise and return
001724r 1               
001724r 1               LAB_2622:
001724r 1  D0 03        	BNE	LAB_2627		; branch if byte <> zero
001726r 1               
001726r 1  4C rr rr     	JMP	LAB_2569		; shift FCAtemp << A+8 times
001729r 1               
001729r 1               					; else do shift and add
001729r 1               LAB_2627:
001729r 1  4A           	LSR				; shift byte
00172Ar 1  09 80        	ORA	#$80			; set top bit (mark for 8 times)
00172Cr 1               LAB_262A:
00172Cr 1  A8           	TAY				; copy result
00172Dr 1  90 13        	BCC	LAB_2640		; skip next if bit was zero
00172Fr 1               
00172Fr 1  18           	CLC				; clear carry for add
001730r 1  A5 77        	LDA	FACt_3		; get temp mantissa3
001732r 1  65 B6        	ADC	FAC2_3		; add FAC2 mantissa3
001734r 1  85 77        	STA	FACt_3		; save temp mantissa3
001736r 1  A5 76        	LDA	FACt_2		; get temp mantissa2
001738r 1  65 B5        	ADC	FAC2_2		; add FAC2 mantissa2
00173Ar 1  85 76        	STA	FACt_2		; save temp mantissa2
00173Cr 1  A5 75        	LDA	FACt_1		; get temp mantissa1
00173Er 1  65 B4        	ADC	FAC2_1		; add FAC2 mantissa1
001740r 1  85 75        	STA	FACt_1		; save temp mantissa1
001742r 1               LAB_2640:
001742r 1  66 75        	ROR	FACt_1		; shift temp mantissa1
001744r 1  66 76        	ROR	FACt_2		; shift temp mantissa2
001746r 1  66 77        	ROR	FACt_3		; shift temp mantissa3
001748r 1  66 B9        	ROR	FAC1_r		; shift temp rounding byte
00174Ar 1  98           	TYA				; get byte back
00174Br 1  4A           	LSR				; shift byte
00174Cr 1  D0 DE        	BNE	LAB_262A		; loop if all bits not done
00174Er 1               
00174Er 1               LAB_264C:
00174Er 1  60           	RTS
00174Fr 1               
00174Fr 1               ; unpack memory (AY) into FAC2
00174Fr 1               
00174Fr 1               LAB_264D:
00174Fr 1  85 71        	STA	ut1_pl		; save pointer low byte
001751r 1  84 72        	STY	ut1_ph		; save pointer high byte
001753r 1  A0 03        	LDY	#$03			; 4 bytes to get (0-3)
001755r 1  B1 71        	LDA	(ut1_pl),Y		; get mantissa3
001757r 1  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
001759r 1  88           	DEY				; decrement index
00175Ar 1  B1 71        	LDA	(ut1_pl),Y		; get mantissa2
00175Cr 1  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
00175Er 1  88           	DEY				; decrement index
00175Fr 1  B1 71        	LDA	(ut1_pl),Y		; get mantissa1+sign
001761r 1  85 B7        	STA	FAC2_s		; save FAC2 sign (b7)
001763r 1  45 B0        	EOR	FAC1_s		; EOR with FAC1 sign (b7)
001765r 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001767r 1  A5 B7        	LDA	FAC2_s		; recover FAC2 sign (b7)
001769r 1  09 80        	ORA	#$80			; set 1xxx xxx (set normal bit)
00176Br 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
00176Dr 1  88           	DEY				; decrement index
00176Er 1  B1 71        	LDA	(ut1_pl),Y		; get exponent byte
001770r 1  85 B3        	STA	FAC2_e		; save FAC2 exponent
001772r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001774r 1  60           	RTS
001775r 1               
001775r 1               ; test and adjust accumulators
001775r 1               
001775r 1               LAB_2673:
001775r 1  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
001777r 1               LAB_2675:
001777r 1  F0 1D        	BEQ	LAB_2696		; branch if FAC2 = $00 (handle underflow)
001779r 1               
001779r 1  18           	CLC				; clear carry for add
00177Ar 1  65 AC        	ADC	FAC1_e		; add FAC1 exponent
00177Cr 1  90 04        	BCC	LAB_2680		; branch if sum of exponents <$0100
00177Er 1               
00177Er 1  30 31        	BMI	LAB_269B		; do overflow error
001780r 1               
001780r 1  18           	CLC				; clear carry for the add
001781r 1  2C           	.byte	$2C			; makes next line BIT $1410
001782r 1               LAB_2680:
001782r 1  10 12        	BPL	LAB_2696		; if +ve go handle underflow
001784r 1               
001784r 1  69 80        	ADC	#$80			; adjust exponent
001786r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
001788r 1  D0 03        	BNE	LAB_268B		; branch if not zero
00178Ar 1               
00178Ar 1  4C rr rr     	JMP	LAB_24F5		; save FAC1 sign and return
00178Dr 1               
00178Dr 1               LAB_268B:
00178Dr 1  A5 B8        	LDA	FAC_sc		; get sign compare (FAC1 EOR FAC2)
00178Fr 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001791r 1               LAB_268F:
001791r 1  60           	RTS
001792r 1               
001792r 1               ; handle overflow and underflow
001792r 1               
001792r 1               LAB_2690:
001792r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001794r 1  10 1B        	BPL	LAB_269B		; do overflow error
001796r 1               
001796r 1               					; handle underflow
001796r 1               LAB_2696:
001796r 1  68           	PLA				; pop return address low byte
001797r 1  68           	PLA				; pop return address high byte
001798r 1  4C rr rr     	JMP	LAB_24F1		; clear FAC1 exponent and sign and return
00179Br 1               
00179Br 1               ; multiply by 10
00179Br 1               
00179Br 1               LAB_269E:
00179Br 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
00179Er 1  AA           	TAX				; copy exponent (set the flags)
00179Fr 1  F0 F0        	BEQ	LAB_268F		; exit if zero
0017A1r 1               
0017A1r 1  18           	CLC				; clear carry for add
0017A2r 1  69 02        	ADC	#$02			; add two to exponent (*4)
0017A4r 1  B0 0B        	BCS	LAB_269B		; do overflow error if > $FF
0017A6r 1               
0017A6r 1  A2 00        	LDX	#$00			; clear byte
0017A8r 1  86 B8        	STX	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
0017AAr 1  20 rr rr     	JSR	LAB_247C		; add FAC2 to FAC1 (*5)
0017ADr 1  E6 AC        	INC	FAC1_e		; increment FAC1 exponent (*10)
0017AFr 1  D0 E0        	BNE	LAB_268F		; if non zero just do RTS
0017B1r 1               
0017B1r 1               LAB_269B:
0017B1r 1  4C rr rr     	JMP	LAB_2564		; do overflow error and warm start
0017B4r 1               
0017B4r 1               ; divide by 10
0017B4r 1               
0017B4r 1               LAB_26B9:
0017B4r 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
0017B7r 1  A9 rr        	LDA	#<LAB_26B5		; set pointer to 10d low addr
0017B9r 1  A0 rr        	LDY	#>LAB_26B5		; set pointer to 10d high addr
0017BBr 1  A2 00        	LDX	#$00			; clear sign
0017BDr 1               
0017BDr 1               ; divide by (AY) (X=sign)
0017BDr 1               
0017BDr 1               LAB_26C2:
0017BDr 1  86 B8        	STX	FAC_sc		; save sign compare (FAC1 EOR FAC2)
0017BFr 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
0017C2r 1  4C rr rr     	JMP	LAB_DIVIDE		; do FAC2/FAC1
0017C5r 1               
0017C5r 1               					; Perform divide-by
0017C5r 1               ; convert AY and do (AY)/FAC1
0017C5r 1               
0017C5r 1               LAB_26CA:
0017C5r 1  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
0017C8r 1               
0017C8r 1               					; Perform divide-into
0017C8r 1               LAB_DIVIDE:
0017C8r 1  F0 63        	BEQ	LAB_2737		; if zero go do /0 error
0017CAr 1               
0017CAr 1  20 rr rr     	JSR	LAB_27BA		; round FAC1
0017CDr 1  A9 00        	LDA	#$00			; clear A
0017CFr 1  38           	SEC				; set carry for subtract
0017D0r 1  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent (2s complement)
0017D2r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
0017D4r 1  20 rr rr     	JSR	LAB_2673		; test and adjust accumulators
0017D7r 1  E6 AC        	INC	FAC1_e		; increment FAC1 exponent
0017D9r 1  F0 D6        	BEQ	LAB_269B		; if zero do overflow error
0017DBr 1               
0017DBr 1  A2 FF        	LDX	#$FF			; set index for pre increment
0017DDr 1  A9 01        	LDA	#$01			; set bit to flag byte save
0017DFr 1               LAB_26E4:
0017DFr 1  A4 B4        	LDY	FAC2_1		; get FAC2 mantissa1
0017E1r 1  C4 AD        	CPY	FAC1_1		; compare FAC1 mantissa1
0017E3r 1  D0 0A        	BNE	LAB_26F4		; branch if <>
0017E5r 1               
0017E5r 1  A4 B5        	LDY	FAC2_2		; get FAC2 mantissa2
0017E7r 1  C4 AE        	CPY	FAC1_2		; compare FAC1 mantissa2
0017E9r 1  D0 04        	BNE	LAB_26F4		; branch if <>
0017EBr 1               
0017EBr 1  A4 B6        	LDY	FAC2_3		; get FAC2 mantissa3
0017EDr 1  C4 AF        	CPY	FAC1_3		; compare FAC1 mantissa3
0017EFr 1               LAB_26F4:
0017EFr 1  08           	PHP				; save FAC2-FAC1 compare status
0017F0r 1  2A           	ROL				; shift the result byte
0017F1r 1  90 0E        	BCC	LAB_2702		; if no carry skip the byte save
0017F3r 1               
0017F3r 1  A0 01        	LDY	#$01			; set bit to flag byte save
0017F5r 1  E8           	INX				; else increment the index to FACt
0017F6r 1  E0 02        	CPX	#$02			; compare with the index to FACt_3
0017F8r 1  30 04        	BMI	LAB_2701		; if not last byte just go save it
0017FAr 1               
0017FAr 1  D0 28        	BNE	LAB_272B		; if all done go save FAC1 rounding byte, normalise and
0017FCr 1               					; return
0017FCr 1               
0017FCr 1  A0 40        	LDY	#$40			; set bit to flag byte save for the rounding byte
0017FEr 1               LAB_2701:
0017FEr 1  95 75        	STA	FACt_1,X		; write result byte to FACt_1 + index
001800r 1  98           	TYA				; copy the next save byte flag
001801r 1               LAB_2702:
001801r 1  28           	PLP				; restore FAC2-FAC1 compare status
001802r 1  90 14        	BCC	LAB_2704		; if FAC2 < FAC1 then skip the subtract
001804r 1               
001804r 1  A8           	TAY				; save FAC2-FAC1 compare status
001805r 1  A5 B6        	LDA	FAC2_3		; get FAC2 mantissa3
001807r 1  E5 AF        	SBC	FAC1_3		; subtract FAC1 mantissa3
001809r 1  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
00180Br 1  A5 B5        	LDA	FAC2_2		; get FAC2 mantissa2
00180Dr 1  E5 AE        	SBC	FAC1_2		; subtract FAC1 mantissa2
00180Fr 1  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
001811r 1  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001813r 1  E5 AD        	SBC	FAC1_1		; subtract FAC1 mantissa1
001815r 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001817r 1  98           	TYA				; restore FAC2-FAC1 compare status
001818r 1               
001818r 1               					; FAC2 = FAC2*2
001818r 1               LAB_2704:
001818r 1  06 B6        	ASL	FAC2_3		; shift FAC2 mantissa3
00181Ar 1  26 B5        	ROL	FAC2_2		; shift FAC2 mantissa2
00181Cr 1  26 B4        	ROL	FAC2_1		; shift FAC2 mantissa1
00181Er 1  B0 CF        	BCS	LAB_26F4		; loop with no compare
001820r 1               
001820r 1  30 BD        	BMI	LAB_26E4		; loop with compare
001822r 1               
001822r 1  10 CB        	BPL	LAB_26F4		; loop always with no compare
001824r 1               
001824r 1               ; do A<<6, save as FAC1 rounding byte, normalise and return
001824r 1               
001824r 1               LAB_272B:
001824r 1  4A           	LSR				; shift b1 - b0 ..
001825r 1  6A           	ROR				; ..
001826r 1  6A           	ROR				; .. to b7 - b6
001827r 1  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
001829r 1  28           	PLP				; dump FAC2-FAC1 compare status
00182Ar 1  4C rr rr     	JMP	LAB_273C		; copy temp to FAC1, normalise and return
00182Dr 1               
00182Dr 1               ; do "Divide by zero" error
00182Dr 1               
00182Dr 1               LAB_2737:
00182Dr 1  A2 14        	LDX	#$14			; error code $14 ("Divide by zero" error)
00182Fr 1  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
001832r 1               
001832r 1               ; copy temp to FAC1 and normalise
001832r 1               
001832r 1               LAB_273C:
001832r 1  A5 75        	LDA	FACt_1		; get temp mantissa1
001834r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001836r 1  A5 76        	LDA	FACt_2		; get temp mantissa2
001838r 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
00183Ar 1  A5 77        	LDA	FACt_3		; get temp mantissa3
00183Cr 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
00183Er 1  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
001841r 1               
001841r 1               ; unpack memory (AY) into FAC1
001841r 1               
001841r 1               LAB_UFAC:
001841r 1  85 71        	STA	ut1_pl		; save pointer low byte
001843r 1  84 72        	STY	ut1_ph		; save pointer high byte
001845r 1  A0 03        	LDY	#$03			; 4 bytes to do
001847r 1  B1 71        	LDA	(ut1_pl),Y		; get last byte
001849r 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
00184Br 1  88           	DEY				; decrement index
00184Cr 1  B1 71        	LDA	(ut1_pl),Y		; get last-1 byte
00184Er 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001850r 1  88           	DEY				; decrement index
001851r 1  B1 71        	LDA	(ut1_pl),Y		; get second byte
001853r 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001855r 1  09 80        	ORA	#$80			; set 1xxx xxxx (add normal bit)
001857r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001859r 1  88           	DEY				; decrement index
00185Ar 1  B1 71        	LDA	(ut1_pl),Y		; get first byte (exponent)
00185Cr 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
00185Er 1  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
001860r 1  60           	RTS
001861r 1               
001861r 1               ; pack FAC1 into Adatal
001861r 1               
001861r 1               LAB_276E:
001861r 1  A2 A4        	LDX	#<Adatal		; set pointer low byte
001863r 1               LAB_2770:
001863r 1  A0 00        	LDY	#>Adatal		; set pointer high byte
001865r 1  F0 04        	BEQ	LAB_2778		; pack FAC1 into (XY) and return
001867r 1               
001867r 1               ; pack FAC1 into (Lvarpl)
001867r 1               
001867r 1               LAB_PFAC:
001867r 1  A6 97        	LDX	Lvarpl		; get destination pointer low byte
001869r 1  A4 98        	LDY	Lvarph		; get destination pointer high byte
00186Br 1               
00186Br 1               ; pack FAC1 into (XY)
00186Br 1               
00186Br 1               LAB_2778:
00186Br 1  20 rr rr     	JSR	LAB_27BA		; round FAC1
00186Er 1  86 71        	STX	ut1_pl		; save pointer low byte
001870r 1  84 72        	STY	ut1_ph		; save pointer high byte
001872r 1  A0 03        	LDY	#$03			; set index
001874r 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001876r 1  91 71        	STA	(ut1_pl),Y		; store in destination
001878r 1  88           	DEY				; decrement index
001879r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
00187Br 1  91 71        	STA	(ut1_pl),Y		; store in destination
00187Dr 1  88           	DEY				; decrement index
00187Er 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001880r 1  09 7F        	ORA	#$7F			; set bits x111 1111
001882r 1  25 AD        	AND	FAC1_1		; AND in FAC1 mantissa1
001884r 1  91 71        	STA	(ut1_pl),Y		; store in destination
001886r 1  88           	DEY				; decrement index
001887r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001889r 1  91 71        	STA	(ut1_pl),Y		; store in destination
00188Br 1  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
00188Dr 1  60           	RTS
00188Er 1               
00188Er 1               ; round and copy FAC1 to FAC2
00188Er 1               
00188Er 1               LAB_27AB:
00188Er 1  20 rr rr     	JSR	LAB_27BA		; round FAC1
001891r 1               
001891r 1               ; copy FAC1 to FAC2
001891r 1               
001891r 1               LAB_27AE:
001891r 1  A2 05        	LDX	#$05			; 5 bytes to copy
001893r 1               LAB_27B0:
001893r 1  B5 AB        	LDA	FAC1_e-1,X		; get byte from FAC1,X
001895r 1  95 B2        	STA	FAC1_o,X		; save byte at FAC2,X
001897r 1  CA           	DEX				; decrement count
001898r 1  D0 F9        	BNE	LAB_27B0		; loop if not all done
00189Ar 1               
00189Ar 1  86 B9        	STX	FAC1_r		; clear FAC1 rounding byte
00189Cr 1               LAB_27B9:
00189Cr 1  60           	RTS
00189Dr 1               
00189Dr 1               ; round FAC1
00189Dr 1               
00189Dr 1               LAB_27BA:
00189Dr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
00189Fr 1  F0 FB        	BEQ	LAB_27B9		; exit if zero
0018A1r 1               
0018A1r 1  06 B9        	ASL	FAC1_r		; shift FAC1 rounding byte
0018A3r 1  90 F7        	BCC	LAB_27B9		; exit if no overflow
0018A5r 1               
0018A5r 1               ; round FAC1 (no check)
0018A5r 1               
0018A5r 1               LAB_27C2:
0018A5r 1  20 rr rr     	JSR	LAB_2559		; increment FAC1 mantissa
0018A8r 1  D0 F2        	BNE	LAB_27B9		; branch if no overflow
0018AAr 1               
0018AAr 1  4C rr rr     	JMP	LAB_252A		; normalise FAC1 for C=1 and return
0018ADr 1               
0018ADr 1               ; get FAC1 sign
0018ADr 1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018ADr 1               
0018ADr 1               LAB_27CA:
0018ADr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0018AFr 1  F0 09        	BEQ	LAB_27D7		; exit if zero (already correct SGN(0)=0)
0018B1r 1               
0018B1r 1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018B1r 1               ; no = 0 check
0018B1r 1               
0018B1r 1               LAB_27CE:
0018B1r 1  A5 B0        	LDA	FAC1_s		; else get FAC1 sign (b7)
0018B3r 1               
0018B3r 1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018B3r 1               ; no = 0 check, sign in A
0018B3r 1               
0018B3r 1               LAB_27D0:
0018B3r 1  2A           	ROL				; move sign bit to carry
0018B4r 1  A9 FF        	LDA	#$FF			; set byte for -ve result
0018B6r 1  B0 02        	BCS	LAB_27D7		; return if sign was set (-ve)
0018B8r 1               
0018B8r 1  A9 01        	LDA	#$01			; else set byte for +ve result
0018BAr 1               LAB_27D7:
0018BAr 1  60           	RTS
0018BBr 1               
0018BBr 1               ; perform SGN()
0018BBr 1               
0018BBr 1               LAB_SGN:
0018BBr 1  20 rr rr     	JSR	LAB_27CA		; get FAC1 sign
0018BEr 1               					; return A=$FF/-ve A=$01/+ve
0018BEr 1               ; save A as integer byte
0018BEr 1               
0018BEr 1               LAB_27DB:
0018BEr 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
0018C0r 1  A9 00        	LDA	#$00			; clear A
0018C2r 1  85 AE        	STA	FAC1_2		; clear FAC1 mantissa2
0018C4r 1  A2 88        	LDX	#$88			; set exponent
0018C6r 1               
0018C6r 1               ; set exp=X, clearFAC1 mantissa3 and normalise
0018C6r 1               
0018C6r 1               LAB_27E3:
0018C6r 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
0018C8r 1  49 FF        	EOR	#$FF			; complement it
0018CAr 1  2A           	ROL				; sign bit into carry
0018CBr 1               
0018CBr 1               ; set exp=X, clearFAC1 mantissa3 and normalise
0018CBr 1               
0018CBr 1               LAB_STFA:
0018CBr 1  A9 00        	LDA	#$00			; clear A
0018CDr 1  85 AF        	STA	FAC1_3		; clear FAC1 mantissa3
0018CFr 1  86 AC        	STX	FAC1_e		; set FAC1 exponent
0018D1r 1  85 B9        	STA	FAC1_r		; clear FAC1 rounding byte
0018D3r 1  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
0018D5r 1  4C rr rr     	JMP	LAB_24D0		; do ABS and normalise FAC1
0018D8r 1               
0018D8r 1               ; perform ABS()
0018D8r 1               
0018D8r 1               LAB_ABS:
0018D8r 1  46 B0        	LSR	FAC1_s		; clear FAC1 sign (put zero in b7)
0018DAr 1  60           	RTS
0018DBr 1               
0018DBr 1               ; compare FAC1 with (AY)
0018DBr 1               ; returns A=$00 if FAC1 = (AY)
0018DBr 1               ; returns A=$01 if FAC1 > (AY)
0018DBr 1               ; returns A=$FF if FAC1 < (AY)
0018DBr 1               
0018DBr 1               LAB_27F8:
0018DBr 1  85 73        	STA	ut2_pl		; save pointer low byte
0018DDr 1               LAB_27FA:
0018DDr 1  84 74        	STY	ut2_ph		; save pointer high byte
0018DFr 1  A0 00        	LDY	#$00			; clear index
0018E1r 1  B1 73        	LDA	(ut2_pl),Y		; get exponent
0018E3r 1  C8           	INY				; increment index
0018E4r 1  AA           	TAX				; copy (AY) exponent to X
0018E5r 1  F0 C6        	BEQ	LAB_27CA		; branch if (AY) exponent=0 and get FAC1 sign
0018E7r 1               					; A=FF,C=1/-ve A=01,C=0/+ve
0018E7r 1               
0018E7r 1  B1 73        	LDA	(ut2_pl),Y		; get (AY) mantissa1 (with sign)
0018E9r 1  45 B0        	EOR	FAC1_s		; EOR FAC1 sign (b7)
0018EBr 1  30 C4        	BMI	LAB_27CE		; if signs <> do return A=FF,C=1/-ve
0018EDr 1               					; A=01,C=0/+ve and return
0018EDr 1               
0018EDr 1  E4 AC        	CPX	FAC1_e		; compare (AY) exponent with FAC1 exponent
0018EFr 1  D0 1A        	BNE	LAB_2828		; branch if different
0018F1r 1               
0018F1r 1  B1 73        	LDA	(ut2_pl),Y		; get (AY) mantissa1 (with sign)
0018F3r 1  09 80        	ORA	#$80			; normalise top bit
0018F5r 1  C5 AD        	CMP	FAC1_1		; compare with FAC1 mantissa1
0018F7r 1  D0 12        	BNE	LAB_2828		; branch if different
0018F9r 1               
0018F9r 1  C8           	INY				; increment index
0018FAr 1  B1 73        	LDA	(ut2_pl),Y		; get mantissa2
0018FCr 1  C5 AE        	CMP	FAC1_2		; compare with FAC1 mantissa2
0018FEr 1  D0 0B        	BNE	LAB_2828		; branch if different
001900r 1               
001900r 1  C8           	INY				; increment index
001901r 1  A9 7F        	LDA	#$7F			; set for 1/2 value rounding byte
001903r 1  C5 B9        	CMP	FAC1_r		; compare with FAC1 rounding byte (set carry)
001905r 1  B1 73        	LDA	(ut2_pl),Y		; get mantissa3
001907r 1  E5 AF        	SBC	FAC1_3		; subtract FAC1 mantissa3
001909r 1  F0 28        	BEQ	LAB_2850		; exit if mantissa3 equal
00190Br 1               
00190Br 1               ; gets here if number <> FAC1
00190Br 1               
00190Br 1               LAB_2828:
00190Br 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
00190Dr 1  90 02        	BCC	LAB_282E		; branch if FAC1 > (AY)
00190Fr 1               
00190Fr 1  49 FF        	EOR	#$FF			; else toggle FAC1 sign
001911r 1               LAB_282E:
001911r 1  4C rr rr     	JMP	LAB_27D0		; return A=FF,C=1/-ve A=01,C=0/+ve
001914r 1               
001914r 1               ; convert FAC1 floating-to-fixed
001914r 1               
001914r 1               LAB_2831:
001914r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001916r 1  F0 4A        	BEQ	LAB_287F		; if zero go clear FAC1 and return
001918r 1               
001918r 1  38           	SEC				; set carry for subtract
001919r 1  E9 98        	SBC	#$98			; subtract maximum integer range exponent
00191Br 1  24 B0        	BIT	FAC1_s		; test FAC1 sign (b7)
00191Dr 1  10 09        	BPL	LAB_2845		; branch if FAC1 +ve
00191Fr 1               
00191Fr 1               					; FAC1 was -ve
00191Fr 1  AA           	TAX				; copy subtracted exponent
001920r 1  A9 FF        	LDA	#$FF			; overflow for -ve number
001922r 1  85 B2        	STA	FAC1_o		; set FAC1 overflow byte
001924r 1  20 rr rr     	JSR	LAB_253D		; twos complement FAC1 mantissa
001927r 1  8A           	TXA				; restore subtracted exponent
001928r 1               LAB_2845:
001928r 1  A2 AC        	LDX	#FAC1_e		; set index to FAC1
00192Ar 1  C9 F9        	CMP	#$F9			; compare exponent result
00192Cr 1  10 06        	BPL	LAB_2851		; if < 8 shifts shift FAC1 A times right and return
00192Er 1               
00192Er 1  20 rr rr     	JSR	LAB_257B		; shift FAC1 A times right (> 8 shifts)
001931r 1  84 B2        	STY	FAC1_o		; clear FAC1 overflow byte
001933r 1               LAB_2850:
001933r 1  60           	RTS
001934r 1               
001934r 1               ; shift FAC1 A times right
001934r 1               
001934r 1               LAB_2851:
001934r 1  A8           	TAY				; copy shift count
001935r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001937r 1  29 80        	AND	#$80			; mask sign bit only (x000 0000)
001939r 1  46 AD        	LSR	FAC1_1		; shift FAC1 mantissa1
00193Br 1  05 AD        	ORA	FAC1_1		; OR sign in b7 FAC1 mantissa1
00193Dr 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
00193Fr 1  20 rr rr     	JSR	LAB_2592		; shift FAC1 Y times right
001942r 1  84 B2        	STY	FAC1_o		; clear FAC1 overflow byte
001944r 1  60           	RTS
001945r 1               
001945r 1               ; perform INT()
001945r 1               
001945r 1               LAB_INT:
001945r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001947r 1  C9 98        	CMP	#$98			; compare with max int
001949r 1  B0 1E        	BCS	LAB_2886		; exit if >= (already int, too big for fractional part!)
00194Br 1               
00194Br 1  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
00194Er 1  84 B9        	STY	FAC1_r		; save FAC1 rounding byte
001950r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001952r 1  84 B0        	STY	FAC1_s		; save FAC1 sign (b7)
001954r 1  49 80        	EOR	#$80			; toggle FAC1 sign
001956r 1  2A           	ROL				; shift into carry
001957r 1  A9 98        	LDA	#$98			; set new exponent
001959r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
00195Br 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
00195Dr 1  85 5B        	STA	Temp3			; save for EXP() function
00195Fr 1  4C rr rr     	JMP	LAB_24D0		; do ABS and normalise FAC1
001962r 1               
001962r 1               ; clear FAC1 and return
001962r 1               
001962r 1               LAB_287F:
001962r 1  85 AD        	STA	FAC1_1		; clear FAC1 mantissa1
001964r 1  85 AE        	STA	FAC1_2		; clear FAC1 mantissa2
001966r 1  85 AF        	STA	FAC1_3		; clear FAC1 mantissa3
001968r 1  A8           	TAY				; clear Y
001969r 1               LAB_2886:
001969r 1  60           	RTS
00196Ar 1               
00196Ar 1               ; get FAC1 from string
00196Ar 1               ; this routine now handles hex and binary values from strings
00196Ar 1               ; starting with "$" and "%" respectively
00196Ar 1               
00196Ar 1               LAB_2887:
00196Ar 1  A0 00        	LDY	#$00			; clear Y
00196Cr 1  84 5F        	STY	Dtypef		; clear data type flag, $FF=string, $00=numeric
00196Er 1  A2 09        	LDX	#$09			; set index
001970r 1               LAB_288B:
001970r 1  94 A8        	STY	numexp,X		; clear byte
001972r 1  CA           	DEX				; decrement index
001973r 1  10 FB        	BPL	LAB_288B		; loop until numexp to negnum (and FAC1) = $00
001975r 1               
001975r 1  90 7F        	BCC	LAB_28FE		; branch if 1st character numeric
001977r 1               
001977r 1               ; get FAC1 from string .. first character wasn't numeric
001977r 1               
001977r 1  C9 2D        	CMP	#'-'			; else compare with "-"
001979r 1  D0 04        	BNE	LAB_289A		; branch if not "-"
00197Br 1               
00197Br 1  86 B1        	STX	negnum		; set flag for -ve number (X = $FF)
00197Dr 1  F0 04        	BEQ	LAB_289C		; branch always (go scan and check for hex/bin)
00197Fr 1               
00197Fr 1               ; get FAC1 from string .. first character wasn't numeric or -
00197Fr 1               
00197Fr 1               LAB_289A:
00197Fr 1  C9 2B        	CMP	#'+'			; else compare with "+"
001981r 1  D0 05        	BNE	LAB_289D		; branch if not "+" (go check for hex/bin)
001983r 1               
001983r 1               ; was "+" or "-" to start, so get next character
001983r 1               
001983r 1               LAB_289C:
001983r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001986r 1  90 6E        	BCC	LAB_28FE		; branch if numeric character
001988r 1               
001988r 1               ; code here for hex and binary numbers
001988r 1               
001988r 1               LAB_289D:
001988r 1  C9 24        	CMP	#'$'			; else compare with "$"
00198Ar 1  D0 03        	BNE	LAB_NHEX		; branch if not "$"
00198Cr 1               
00198Cr 1  4C rr rr     	JMP	LAB_CHEX		; branch if "$"
00198Fr 1               
00198Fr 1               LAB_NHEX:
00198Fr 1  C9 25        	CMP	#'%'			; else compare with "%"
001991r 1  D0 08        	BNE	LAB_28A3		; branch if not "%" (continue original code)
001993r 1               
001993r 1  4C rr rr     	JMP	LAB_CBIN		; branch if "%"
001996r 1               
001996r 1               LAB_289E:
001996r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (ignore + or get next number)
001999r 1               LAB_28A1:
001999r 1  90 5B        	BCC	LAB_28FE		; branch if numeric character
00199Br 1               
00199Br 1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
00199Br 1               
00199Br 1               LAB_28A3:
00199Br 1  C9 2E        	CMP	#'.'			; else compare with "."
00199Dr 1  F0 2E        	BEQ	LAB_28D5		; branch if "."
00199Fr 1               
00199Fr 1               ; get FAC1 from string .. character wasn't numeric, -, + or .
00199Fr 1               
00199Fr 1  C9 45        	CMP	#'E'			; else compare with "E"
0019A1r 1  D0 30        	BNE	LAB_28DB		; branch if not "E"
0019A3r 1               
0019A3r 1               					; was "E" so evaluate exponential part
0019A3r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0019A6r 1  90 17        	BCC	LAB_28C7		; branch if numeric character
0019A8r 1               
0019A8r 1  C9 B6        	CMP	#TK_MINUS		; else compare with token for -
0019AAr 1  F0 0E        	BEQ	LAB_28C2		; branch if token for -
0019ACr 1               
0019ACr 1  C9 2D        	CMP	#'-'			; else compare with "-"
0019AEr 1  F0 0A        	BEQ	LAB_28C2		; branch if "-"
0019B0r 1               
0019B0r 1  C9 B5        	CMP	#TK_PLUS		; else compare with token for +
0019B2r 1  F0 08        	BEQ	LAB_28C4		; branch if token for +
0019B4r 1               
0019B4r 1  C9 2B        	CMP	#'+'			; else compare with "+"
0019B6r 1  F0 04        	BEQ	LAB_28C4		; branch if "+"
0019B8r 1               
0019B8r 1  D0 07        	BNE	LAB_28C9		; branch always
0019BAr 1               
0019BAr 1               LAB_28C2:
0019BAr 1  66 AB        	ROR	expneg		; set exponent -ve flag (C, which=1, into b7)
0019BCr 1               LAB_28C4:
0019BCr 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0019BFr 1               LAB_28C7:
0019BFr 1  90 5B        	BCC	LAB_2925		; branch if numeric character
0019C1r 1               
0019C1r 1               LAB_28C9:
0019C1r 1  24 AB        	BIT	expneg		; test exponent -ve flag
0019C3r 1  10 0E        	BPL	LAB_28DB		; if +ve go evaluate exponent
0019C5r 1               
0019C5r 1               					; else do exponent = -exponent
0019C5r 1  A9 00        	LDA	#$00			; clear result
0019C7r 1  38           	SEC				; set carry for subtract
0019C8r 1  E5 A9        	SBC	expcnt		; subtract exponent byte
0019CAr 1  4C rr rr     	JMP	LAB_28DD		; go evaluate exponent
0019CDr 1               
0019CDr 1               LAB_28D5:
0019CDr 1  66 AA        	ROR	numdpf		; set decimal point flag
0019CFr 1  24 AA        	BIT	numdpf		; test decimal point flag
0019D1r 1  50 C3        	BVC	LAB_289E		; branch if only one decimal point so far
0019D3r 1               
0019D3r 1               					; evaluate exponent
0019D3r 1               LAB_28DB:
0019D3r 1  A5 A9        	LDA	expcnt		; get exponent count byte
0019D5r 1               LAB_28DD:
0019D5r 1  38           	SEC				; set carry for subtract
0019D6r 1  E5 A8        	SBC	numexp		; subtract numerator exponent
0019D8r 1  85 A9        	STA	expcnt		; save exponent count byte
0019DAr 1  F0 12        	BEQ	LAB_28F6		; branch if no adjustment
0019DCr 1               
0019DCr 1  10 09        	BPL	LAB_28EF		; else if +ve go do FAC1*10^expcnt
0019DEr 1               
0019DEr 1               					; else go do FAC1/10^(0-expcnt)
0019DEr 1               LAB_28E6:
0019DEr 1  20 rr rr     	JSR	LAB_26B9		; divide by 10
0019E1r 1  E6 A9        	INC	expcnt		; increment exponent count byte
0019E3r 1  D0 F9        	BNE	LAB_28E6		; loop until all done
0019E5r 1               
0019E5r 1  F0 07        	BEQ	LAB_28F6		; branch always
0019E7r 1               
0019E7r 1               LAB_28EF:
0019E7r 1  20 rr rr     	JSR	LAB_269E		; multiply by 10
0019EAr 1  C6 A9        	DEC	expcnt		; decrement exponent count byte
0019ECr 1  D0 F9        	BNE	LAB_28EF		; loop until all done
0019EEr 1               
0019EEr 1               LAB_28F6:
0019EEr 1  A5 B1        	LDA	negnum		; get -ve flag
0019F0r 1  30 01        	BMI	LAB_28FB		; if -ve do - FAC1 and return
0019F2r 1               
0019F2r 1  60           	RTS
0019F3r 1               
0019F3r 1               ; do - FAC1 and return
0019F3r 1               
0019F3r 1               LAB_28FB:
0019F3r 1  4C rr rr     	JMP	LAB_GTHAN		; do - FAC1 and return
0019F6r 1               
0019F6r 1               ; do unsigned FAC1*10+number
0019F6r 1               
0019F6r 1               LAB_28FE:
0019F6r 1  48           	PHA				; save character
0019F7r 1  24 AA        	BIT	numdpf		; test decimal point flag
0019F9r 1  10 02        	BPL	LAB_2905		; skip exponent increment if not set
0019FBr 1               
0019FBr 1  E6 A8        	INC	numexp		; else increment number exponent
0019FDr 1               LAB_2905:
0019FDr 1  20 rr rr     	JSR	LAB_269E		; multiply FAC1 by 10
001A00r 1  68           	PLA				; restore character
001A01r 1  29 0F        	AND	#$0F			; convert to binary
001A03r 1  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001A06r 1  4C rr rr     	JMP	LAB_289E		; go do next character
001A09r 1               
001A09r 1               ; evaluate new ASCII digit
001A09r 1               
001A09r 1               LAB_2912:
001A09r 1  48           	PHA				; save digit
001A0Ar 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001A0Dr 1  68           	PLA				; restore digit
001A0Er 1  20 rr rr     	JSR	LAB_27DB		; save A as integer byte
001A11r 1  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
001A13r 1  45 B0        	EOR	FAC1_s		; toggle with FAC1 sign (b7)
001A15r 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001A17r 1  A6 AC        	LDX	FAC1_e		; get FAC1 exponent
001A19r 1  4C rr rr     	JMP	LAB_ADD		; add FAC2 to FAC1 and return
001A1Cr 1               
001A1Cr 1               ; evaluate next character of exponential part of number
001A1Cr 1               
001A1Cr 1               LAB_2925:
001A1Cr 1  A5 A9        	LDA	expcnt		; get exponent count byte
001A1Er 1  C9 0A        	CMP	#$0A			; compare with 10 decimal
001A20r 1  90 09        	BCC	LAB_2934		; branch if less
001A22r 1               
001A22r 1  A9 64        	LDA	#$64			; make all -ve exponents = -100 decimal (causes underflow)
001A24r 1  24 AB        	BIT	expneg		; test exponent -ve flag
001A26r 1  30 0E        	BMI	LAB_2942		; branch if -ve
001A28r 1               
001A28r 1  4C rr rr     	JMP	LAB_2564		; else do overflow error
001A2Br 1               
001A2Br 1               LAB_2934:
001A2Br 1  0A           	ASL				; * 2
001A2Cr 1  0A           	ASL				; * 4
001A2Dr 1  65 A9        	ADC	expcnt		; * 5
001A2Fr 1  0A           	ASL				; * 10
001A30r 1  A0 00        	LDY	#$00			; set index
001A32r 1  71 C3        	ADC	(Bpntrl),Y		; add character (will be $30 too much!)
001A34r 1  E9 2F        	SBC	#'0'-1		; convert character to binary
001A36r 1               LAB_2942:
001A36r 1  85 A9        	STA	expcnt		; save exponent count byte
001A38r 1  4C rr rr     	JMP	LAB_28C4		; go get next character
001A3Br 1               
001A3Br 1               ; print " in line [LINE #]"
001A3Br 1               
001A3Br 1               LAB_2953:
001A3Br 1  A9 rr        	LDA	#<LAB_LMSG		; point to " in line " message low byte
001A3Dr 1  A0 rr        	LDY	#>LAB_LMSG		; point to " in line " message high byte
001A3Fr 1  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
001A42r 1               
001A42r 1               					; print Basic line #
001A42r 1  A5 88        	LDA	Clineh		; get current line high byte
001A44r 1  A6 87        	LDX	Clinel		; get current line low byte
001A46r 1               
001A46r 1               ; print XA as unsigned integer
001A46r 1               
001A46r 1               LAB_295E:
001A46r 1  85 AD        	STA	FAC1_1		; save low byte as FAC1 mantissa1
001A48r 1  86 AE        	STX	FAC1_2		; save high byte as FAC1 mantissa2
001A4Ar 1  A2 90        	LDX	#$90			; set exponent to 16d bits
001A4Cr 1  38           	SEC				; set integer is +ve flag
001A4Dr 1  20 rr rr     	JSR	LAB_STFA		; set exp=X, clearFAC1 mantissa3 and normalise
001A50r 1  A0 00        	LDY	#$00			; clear index
001A52r 1  98           	TYA				; clear A
001A53r 1  20 rr rr     	JSR	LAB_297B		; convert FAC1 to string, skip sign character save
001A56r 1  4C rr rr     	JMP	LAB_18C3		; print null terminated string from memory and return
001A59r 1               
001A59r 1               ; convert FAC1 to ASCII string result in (AY)
001A59r 1               ; not any more, moved scratchpad to page 0
001A59r 1               
001A59r 1               LAB_296E:
001A59r 1  A0 01        	LDY	#$01			; set index = 1
001A5Br 1  A9 20        	LDA	#$20			; character = " " (assume +ve)
001A5Dr 1  24 B0        	BIT	FAC1_s		; test FAC1 sign (b7)
001A5Fr 1  10 02        	BPL	LAB_2978		; branch if +ve
001A61r 1               
001A61r 1  A9 2D        	LDA	#$2D			; else character = "-"
001A63r 1               LAB_2978:
001A63r 1  99 EF 00     	STA	Decss,Y		; save leading character (" " or "-")
001A66r 1               LAB_297B:
001A66r 1  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
001A68r 1  84 BA        	STY	Sendl			; save index
001A6Ar 1  C8           	INY				; increment index
001A6Br 1  A6 AC        	LDX	FAC1_e		; get FAC1 exponent
001A6Dr 1  D0 05        	BNE	LAB_2989		; branch if FAC1<>0
001A6Fr 1               
001A6Fr 1               					; exponent was $00 so FAC1 is 0
001A6Fr 1  A9 30        	LDA	#'0'			; set character = "0"
001A71r 1  4C rr rr     	JMP	LAB_2A89		; save last character, [EOT] and exit
001A74r 1               
001A74r 1               					; FAC1 is some non zero value
001A74r 1               LAB_2989:
001A74r 1  A9 00        	LDA	#$00			; clear (number exponent count)
001A76r 1  E0 81        	CPX	#$81			; compare FAC1 exponent with $81 (>1.00000)
001A78r 1               
001A78r 1  B0 09        	BCS	LAB_299A		; branch if FAC1=>1
001A7Ar 1               
001A7Ar 1               					; FAC1<1
001A7Ar 1  A9 rr        	LDA	#<LAB_294F		; set pointer low byte to 1,000,000
001A7Cr 1  A0 rr        	LDY	#>LAB_294F		; set pointer high byte to 1,000,000
001A7Er 1  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001A81r 1  A9 FA        	LDA	#$FA			; set number exponent count (-6)
001A83r 1               LAB_299A:
001A83r 1  85 A8        	STA	numexp		; save number exponent count
001A85r 1               LAB_299C:
001A85r 1  A9 rr        	LDA	#<LAB_294B		; set pointer low byte to 999999.4375 (max before sci note)
001A87r 1  A0 rr        	LDY	#>LAB_294B		; set pointer high byte to 999999.4375
001A89r 1  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001A8Cr 1  F0 1E        	BEQ	LAB_29C3		; exit if FAC1 = (AY)
001A8Er 1               
001A8Er 1  10 12        	BPL	LAB_29B9		; go do /10 if FAC1 > (AY)
001A90r 1               
001A90r 1               					; FAC1 < (AY)
001A90r 1               LAB_29A7:
001A90r 1  A9 rr        	LDA	#<LAB_2947		; set pointer low byte to 99999.9375
001A92r 1  A0 rr        	LDY	#>LAB_2947		; set pointer high byte to 99999.9375
001A94r 1  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001A97r 1  F0 02        	BEQ	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
001A99r 1               
001A99r 1  10 0E        	BPL	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
001A9Br 1               
001A9Br 1               					; FAC1 <= (AY)
001A9Br 1               LAB_29B2:
001A9Br 1  20 rr rr     	JSR	LAB_269E		; multiply by 10
001A9Er 1  C6 A8        	DEC	numexp		; decrement number exponent count
001AA0r 1  D0 EE        	BNE	LAB_29A7		; go test again (branch always)
001AA2r 1               
001AA2r 1               LAB_29B9:
001AA2r 1  20 rr rr     	JSR	LAB_26B9		; divide by 10
001AA5r 1  E6 A8        	INC	numexp		; increment number exponent count
001AA7r 1  D0 DC        	BNE	LAB_299C		; go test again (branch always)
001AA9r 1               
001AA9r 1               ; now we have just the digits to do
001AA9r 1               
001AA9r 1               LAB_29C0:
001AA9r 1  20 rr rr     	JSR	LAB_244E		; add 0.5 to FAC1 (round FAC1)
001AACr 1               LAB_29C3:
001AACr 1  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
001AAFr 1  A2 01        	LDX	#$01			; set default digits before dp = 1
001AB1r 1  A5 A8        	LDA	numexp		; get number exponent count
001AB3r 1  18           	CLC				; clear carry for add
001AB4r 1  69 07        	ADC	#$07			; up to 6 digits before point
001AB6r 1  30 09        	BMI	LAB_29D8		; if -ve then 1 digit before dp
001AB8r 1               
001AB8r 1  C9 08        	CMP	#$08			; A>=8 if n>=1E6
001ABAr 1  B0 06        	BCS	LAB_29D9		; branch if >= $08
001ABCr 1               
001ABCr 1               					; carry is clear
001ABCr 1  69 FF        	ADC	#$FF			; take 1 from digit count
001ABEr 1  AA           	TAX				; copy to A
001ABFr 1  A9 02        	LDA	#$02			;.set exponent adjust
001AC1r 1               LAB_29D8:
001AC1r 1  38           	SEC				; set carry for subtract
001AC2r 1               LAB_29D9:
001AC2r 1  E9 02        	SBC	#$02			; -2
001AC4r 1  85 A9        	STA	expcnt		;.save exponent adjust
001AC6r 1  86 A8        	STX	numexp		; save digits before dp count
001AC8r 1  8A           	TXA				; copy to A
001AC9r 1  F0 02        	BEQ	LAB_29E4		; branch if no digits before dp
001ACBr 1               
001ACBr 1  10 13        	BPL	LAB_29F7		; branch if digits before dp
001ACDr 1               
001ACDr 1               LAB_29E4:
001ACDr 1  A4 BA        	LDY	Sendl			; get output string index
001ACFr 1  A9 2E        	LDA	#$2E			; character "."
001AD1r 1  C8           	INY				; increment index
001AD2r 1  99 EF 00     	STA	Decss,Y		; save to output string
001AD5r 1  8A           	TXA				;.
001AD6r 1  F0 06        	BEQ	LAB_29F5		;.
001AD8r 1               
001AD8r 1  A9 30        	LDA	#'0'			; character "0"
001ADAr 1  C8           	INY				; increment index
001ADBr 1  99 EF 00     	STA	Decss,Y		; save to output string
001ADEr 1               LAB_29F5:
001ADEr 1  84 BA        	STY	Sendl			; save output string index
001AE0r 1               LAB_29F7:
001AE0r 1  A0 00        	LDY	#$00			; clear index (point to 100,000)
001AE2r 1  A2 80        	LDX	#$80			;
001AE4r 1               LAB_29FB:
001AE4r 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001AE6r 1  18           	CLC				; clear carry for add
001AE7r 1  79 rr rr     	ADC	LAB_2A9C,Y		; add -ve LSB
001AEAr 1  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001AECr 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001AEEr 1  79 rr rr     	ADC	LAB_2A9B,Y		; add -ve NMSB
001AF1r 1  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001AF3r 1  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001AF5r 1  79 rr rr     	ADC	LAB_2A9A,Y		; add -ve MSB
001AF8r 1  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001AFAr 1  E8           	INX				;
001AFBr 1  B0 04        	BCS	LAB_2A18		;
001AFDr 1               
001AFDr 1  10 E5        	BPL	LAB_29FB		; not -ve so try again
001AFFr 1               
001AFFr 1  30 02        	BMI	LAB_2A1A		;
001B01r 1               
001B01r 1               LAB_2A18:
001B01r 1  30 E1        	BMI	LAB_29FB		;
001B03r 1               
001B03r 1               LAB_2A1A:
001B03r 1  8A           	TXA				;
001B04r 1  90 04        	BCC	LAB_2A21		;
001B06r 1               
001B06r 1  49 FF        	EOR	#$FF			;
001B08r 1  69 0A        	ADC	#$0A			;
001B0Ar 1               LAB_2A21:
001B0Ar 1  69 2F        	ADC	#'0'-1		; add "0"-1 to result
001B0Cr 1  C8           	INY				; increment index ..
001B0Dr 1  C8           	INY				; .. to next less ..
001B0Er 1  C8           	INY				; .. power of ten
001B0Fr 1  84 95        	STY	Cvaral		; save as current var address low byte
001B11r 1  A4 BA        	LDY	Sendl			; get output string index
001B13r 1  C8           	INY				; increment output string index
001B14r 1  AA           	TAX				; copy character to X
001B15r 1  29 7F        	AND	#$7F			; mask out top bit
001B17r 1  99 EF 00     	STA	Decss,Y		; save to output string
001B1Ar 1  C6 A8        	DEC	numexp		; decrement # of characters before the dp
001B1Cr 1  D0 06        	BNE	LAB_2A3B		; branch if still characters to do
001B1Er 1               
001B1Er 1               					; else output the point
001B1Er 1  A9 2E        	LDA	#$2E			; character "."
001B20r 1  C8           	INY				; increment output string index
001B21r 1  99 EF 00     	STA	Decss,Y		; save to output string
001B24r 1               LAB_2A3B:
001B24r 1  84 BA        	STY	Sendl			; save output string index
001B26r 1  A4 95        	LDY	Cvaral		; get current var address low byte
001B28r 1  8A           	TXA				; get character back
001B29r 1  49 FF        	EOR	#$FF			;
001B2Br 1  29 80        	AND	#$80			;
001B2Dr 1  AA           	TAX				;
001B2Er 1  C0 12        	CPY	#$12			; compare index with max
001B30r 1  D0 B2        	BNE	LAB_29FB		; loop if not max
001B32r 1               
001B32r 1               					; now remove trailing zeroes
001B32r 1  A4 BA        	LDY	Sendl			; get output string index
001B34r 1               LAB_2A4B:
001B34r 1  B9 EF 00     	LDA	Decss,Y		; get character from output string
001B37r 1  88           	DEY				; decrement output string index
001B38r 1  C9 30        	CMP	#'0'			; compare with "0"
001B3Ar 1  F0 F8        	BEQ	LAB_2A4B		; loop until non "0" character found
001B3Cr 1               
001B3Cr 1  C9 2E        	CMP	#'.'			; compare with "."
001B3Er 1  F0 01        	BEQ	LAB_2A58		; branch if was dp
001B40r 1               
001B40r 1               					; restore last character
001B40r 1  C8           	INY				; increment output string index
001B41r 1               LAB_2A58:
001B41r 1  A9 2B        	LDA	#$2B			; character "+"
001B43r 1  A6 A9        	LDX	expcnt		; get exponent count
001B45r 1  F0 2E        	BEQ	LAB_2A8C		; if zero go set null terminator and exit
001B47r 1               
001B47r 1               					; exponent isn't zero so write exponent
001B47r 1  10 08        	BPL	LAB_2A68		; branch if exponent count +ve
001B49r 1               
001B49r 1  A9 00        	LDA	#$00			; clear A
001B4Br 1  38           	SEC				; set carry for subtract
001B4Cr 1  E5 A9        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
001B4Er 1  AA           	TAX				; copy exponent count to X
001B4Fr 1  A9 2D        	LDA	#'-'			; character "-"
001B51r 1               LAB_2A68:
001B51r 1  99 F1 00     	STA	Decss+2,Y		; save to output string
001B54r 1  A9 45        	LDA	#$45			; character "E"
001B56r 1  99 F0 00     	STA	Decss+1,Y		; save exponent sign to output string
001B59r 1  8A           	TXA				; get exponent count back
001B5Ar 1  A2 2F        	LDX	#'0'-1		; one less than "0" character
001B5Cr 1  38           	SEC				; set carry for subtract
001B5Dr 1               LAB_2A74:
001B5Dr 1  E8           	INX				; increment 10's character
001B5Er 1  E9 0A        	SBC	#$0A			;.subtract 10 from exponent count
001B60r 1  B0 FB        	BCS	LAB_2A74		; loop while still >= 0
001B62r 1               
001B62r 1  69 3A        	ADC	#':'			; add character ":" ($30+$0A, result is 10 less that value)
001B64r 1  99 F3 00     	STA	Decss+4,Y		; save to output string
001B67r 1  8A           	TXA				; copy 10's character
001B68r 1  99 F2 00     	STA	Decss+3,Y		; save to output string
001B6Br 1  A9 00        	LDA	#$00			; set null terminator
001B6Dr 1  99 F4 00     	STA	Decss+5,Y		; save to output string
001B70r 1  F0 08        	BEQ	LAB_2A91		; go set string pointer (AY) and exit (branch always)
001B72r 1               
001B72r 1               					; save last character, [EOT] and exit
001B72r 1               LAB_2A89:
001B72r 1  99 EF 00     	STA	Decss,Y		; save last character to output string
001B75r 1               
001B75r 1               					; set null terminator and exit
001B75r 1               LAB_2A8C:
001B75r 1  A9 00        	LDA	#$00			; set null terminator
001B77r 1  99 F0 00     	STA	Decss+1,Y		; save after last character
001B7Ar 1               
001B7Ar 1               					; set string pointer (AY) and exit
001B7Ar 1               LAB_2A91:
001B7Ar 1  A9 F0        	LDA	#<Decssp1		; set result string low pointer
001B7Cr 1  A0 00        	LDY	#>Decssp1		; set result string high pointer
001B7Er 1  60           	RTS
001B7Fr 1               
001B7Fr 1               ; perform power function
001B7Fr 1               
001B7Fr 1               LAB_POWER:
001B7Fr 1  F0 42        	BEQ	LAB_EXP		; go do  EXP()
001B81r 1               
001B81r 1  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
001B83r 1  D0 03        	BNE	LAB_2ABF		; branch if FAC2<>0
001B85r 1               
001B85r 1  4C rr rr     	JMP	LAB_24F3		; clear FAC1 exponent and sign and return
001B88r 1               
001B88r 1               LAB_2ABF:
001B88r 1  A2 9C        	LDX	#<func_l		; set destination pointer low byte
001B8Ar 1  A0 00        	LDY	#>func_l		; set destination pointer high byte
001B8Cr 1  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001B8Fr 1  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
001B91r 1  10 0F        	BPL	LAB_2AD9		; branch if FAC2>0
001B93r 1               
001B93r 1               					; else FAC2 is -ve and can only be raised to an
001B93r 1               					; integer power which gives an x +j0 result
001B93r 1  20 rr rr     	JSR	LAB_INT		; perform INT
001B96r 1  A9 9C        	LDA	#<func_l		; set source pointer low byte
001B98r 1  A0 00        	LDY	#>func_l		; set source pointer high byte
001B9Ar 1  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001B9Dr 1  D0 03        	BNE	LAB_2AD9		; branch if FAC1 <> (AY) to allow Function Call error
001B9Fr 1               					; this will leave FAC1 -ve and cause a Function Call
001B9Fr 1               					; error when LOG() is called
001B9Fr 1               
001B9Fr 1  98           	TYA				; clear sign b7
001BA0r 1  A4 5B        	LDY	Temp3			; save mantissa 3 from INT() function as sign in Y
001BA2r 1               					; for possible later negation, b0
001BA2r 1               LAB_2AD9:
001BA2r 1  20 rr rr     	JSR	LAB_279D		; save FAC1 sign and copy ABS(FAC2) to FAC1
001BA5r 1  98           	TYA				; copy sign back ..
001BA6r 1  48           	PHA				; .. and save it
001BA7r 1  20 rr rr     	JSR	LAB_LOG		; do LOG(n)
001BAAr 1  A9 9C        	LDA	#<garb_l		; set pointer low byte
001BACr 1  A0 00        	LDY	#>garb_l		; set pointer high byte
001BAEr 1  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY) (square the value)
001BB1r 1  20 rr rr     	JSR	LAB_EXP		; go do EXP(n)
001BB4r 1  68           	PLA				; pull sign from stack
001BB5r 1  4A           	LSR				; b0 is to be tested, shift to Cb
001BB6r 1  90 0A        	BCC	LAB_2AF9		; if no bit then exit
001BB8r 1               
001BB8r 1               					; Perform negation
001BB8r 1               ; do - FAC1
001BB8r 1               
001BB8r 1               LAB_GTHAN:
001BB8r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001BBAr 1  F0 06        	BEQ	LAB_2AF9		; exit if FAC1_e = $00
001BBCr 1               
001BBCr 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001BBEr 1  49 FF        	EOR	#$FF			; complement it
001BC0r 1  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001BC2r 1               LAB_2AF9:
001BC2r 1  60           	RTS
001BC3r 1               
001BC3r 1               ; perform EXP()	(x^e)
001BC3r 1               
001BC3r 1               LAB_EXP:
001BC3r 1  A9 rr        	LDA	#<LAB_2AFA		; set 1.443 pointer low byte
001BC5r 1  A0 rr        	LDY	#>LAB_2AFA		; set 1.443 pointer high byte
001BC7r 1  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001BCAr 1  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
001BCCr 1  69 50        	ADC	#$50			; +$50/$100
001BCEr 1  90 03        	BCC	LAB_2B2B		; skip rounding if no carry
001BD0r 1               
001BD0r 1  20 rr rr     	JSR	LAB_27C2		; round FAC1 (no check)
001BD3r 1               LAB_2B2B:
001BD3r 1  85 A3        	STA	FAC2_r		; save FAC2 rounding byte
001BD5r 1  20 rr rr     	JSR	LAB_27AE		; copy FAC1 to FAC2
001BD8r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001BDAr 1  C9 88        	CMP	#$88			; compare with EXP limit (256d)
001BDCr 1  90 03        	BCC	LAB_2B39		; branch if less
001BDEr 1               
001BDEr 1               LAB_2B36:
001BDEr 1  20 rr rr     	JSR	LAB_2690		; handle overflow and underflow
001BE1r 1               LAB_2B39:
001BE1r 1  20 rr rr     	JSR	LAB_INT		; perform INT
001BE4r 1  A5 5B        	LDA	Temp3			; get mantissa 3 from INT() function
001BE6r 1  18           	CLC				; clear carry for add
001BE7r 1  69 81        	ADC	#$81			; normalise +1
001BE9r 1  F0 F3        	BEQ	LAB_2B36		; if $00 go handle overflow
001BEBr 1               
001BEBr 1  38           	SEC				; set carry for subtract
001BECr 1  E9 01        	SBC	#$01			; now correct for exponent
001BEEr 1  48           	PHA				; save FAC2 exponent
001BEFr 1               
001BEFr 1               					; swap FAC1 and FAC2
001BEFr 1  A2 04        	LDX	#$04			; 4 bytes to do
001BF1r 1               LAB_2B49:
001BF1r 1  B5 B3        	LDA	FAC2_e,X		; get FAC2,X
001BF3r 1  B4 AC        	LDY	FAC1_e,X		; get FAC1,X
001BF5r 1  95 AC        	STA	FAC1_e,X		; save FAC1,X
001BF7r 1  94 B3        	STY	FAC2_e,X		; save FAC2,X
001BF9r 1  CA           	DEX				; decrement count/index
001BFAr 1  10 F5        	BPL	LAB_2B49		; loop if not all done
001BFCr 1               
001BFCr 1  A5 A3        	LDA	FAC2_r		; get FAC2 rounding byte
001BFEr 1  85 B9        	STA	FAC1_r		; save as FAC1 rounding byte
001C00r 1  20 rr rr     	JSR	LAB_SUBTRACT	; perform subtraction, FAC2 from FAC1
001C03r 1  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001C06r 1  A9 rr        	LDA	#<LAB_2AFE		; set counter pointer low byte
001C08r 1  A0 rr        	LDY	#>LAB_2AFE		; set counter pointer high byte
001C0Ar 1  20 rr rr     	JSR	LAB_2B84		; go do series evaluation
001C0Dr 1  A9 00        	LDA	#$00			; clear A
001C0Fr 1  85 B8        	STA	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
001C11r 1  68           	PLA				;.get saved FAC2 exponent
001C12r 1  4C rr rr     	JMP	LAB_2675		; test and adjust accumulators and return
001C15r 1               
001C15r 1               ; ^2 then series evaluation
001C15r 1               
001C15r 1               LAB_2B6E:
001C15r 1  85 BA        	STA	Cptrl			; save count pointer low byte
001C17r 1  84 BB        	STY	Cptrh			; save count pointer high byte
001C19r 1  20 rr rr     	JSR	LAB_276E		; pack FAC1 into Adatal
001C1Cr 1  A9 A4        	LDA	#<Adatal		; set pointer low byte (Y already $00)
001C1Er 1  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001C21r 1  20 rr rr     	JSR	LAB_2B88		; go do series evaluation
001C24r 1  A9 A4        	LDA	#<Adatal		; pointer to original # low byte
001C26r 1  A0 00        	LDY	#>Adatal		; pointer to original # high byte
001C28r 1  4C rr rr     	JMP	LAB_25FB		; do convert AY, FCA1*(AY) and return
001C2Br 1               
001C2Br 1               ; series evaluation
001C2Br 1               
001C2Br 1               LAB_2B84:
001C2Br 1  85 BA        	STA	Cptrl			; save count pointer low byte
001C2Dr 1  84 BB        	STY	Cptrh			; save count pointer high byte
001C2Fr 1               LAB_2B88:
001C2Fr 1  A2 A8        	LDX	#<numexp		; set pointer low byte
001C31r 1  20 rr rr     	JSR	LAB_2770		; set pointer high byte and pack FAC1 into numexp
001C34r 1  B1 BA        	LDA	(Cptrl),Y		; get constants count
001C36r 1  85 B1        	STA	numcon		; save constants count
001C38r 1  A4 BA        	LDY	Cptrl			; get count pointer low byte
001C3Ar 1  C8           	INY				; increment it (now constants pointer)
001C3Br 1  98           	TYA				; copy it
001C3Cr 1  D0 02        	BNE	LAB_2B97		; skip next if no overflow
001C3Er 1               
001C3Er 1  E6 BB        	INC	Cptrh			; else increment high byte
001C40r 1               LAB_2B97:
001C40r 1  85 BA        	STA	Cptrl			; save low byte
001C42r 1  A4 BB        	LDY	Cptrh			; get high byte
001C44r 1               LAB_2B9B:
001C44r 1  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001C47r 1  A5 BA        	LDA	Cptrl			; get constants pointer low byte
001C49r 1  A4 BB        	LDY	Cptrh			; get constants pointer high byte
001C4Br 1  18           	CLC				; clear carry for add
001C4Cr 1  69 04        	ADC	#$04			; +4 to  low pointer (4 bytes per constant)
001C4Er 1  90 01        	BCC	LAB_2BA8		; skip next if no overflow
001C50r 1               
001C50r 1  C8           	INY				; increment high byte
001C51r 1               LAB_2BA8:
001C51r 1  85 BA        	STA	Cptrl			; save pointer low byte
001C53r 1  84 BB        	STY	Cptrh			; save pointer high byte
001C55r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001C58r 1  A9 A8        	LDA	#<numexp		; set pointer low byte to partial @ numexp
001C5Ar 1  A0 00        	LDY	#>numexp		; set pointer high byte to partial @ numexp
001C5Cr 1  C6 B1        	DEC	numcon		; decrement constants count
001C5Er 1  D0 E4        	BNE	LAB_2B9B		; loop until all done
001C60r 1               
001C60r 1  60           	RTS
001C61r 1               
001C61r 1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
001C61r 1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
001C61r 1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
001C61r 1               
001C61r 1               ; Entropy = 7.997442 bits per byte
001C61r 1               ; Optimum compression would reduce these 65536 bytes by 0 percent
001C61r 1               
001C61r 1               ; Chi square distribution for 65536 samples is 232.01, and
001C61r 1               ; randomly would exceed this value 75.00 percent of the time
001C61r 1               
001C61r 1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
001C61r 1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
001C61r 1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
001C61r 1               
001C61r 1               LAB_RND:
001C61r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001C63r 1  F0 07        	BEQ	NextPRN		; do next random # if zero
001C65r 1               
001C65r 1               					; else get seed into random number store
001C65r 1  A2 D4        	LDX	#Rbyte4		; set PRNG pointer low byte
001C67r 1  A0 00        	LDY	#$00			; set PRNG pointer high byte
001C69r 1  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001C6Cr 1               NextPRN:
001C6Cr 1  A2 AF        	LDX	#$AF			; set EOR byte
001C6Er 1  A0 13        	LDY	#$13			; do this nineteen times
001C70r 1               LoopPRN:
001C70r 1  06 D5        	ASL	Rbyte1		; shift PRNG most significant byte
001C72r 1  26 D6        	ROL	Rbyte2		; shift PRNG middle byte
001C74r 1  26 D7        	ROL	Rbyte3		; shift PRNG least significant byte
001C76r 1  26 D4        	ROL	Rbyte4		; shift PRNG extra byte
001C78r 1  90 05        	BCC	Ninc1			; branch if bit 32 clear
001C7Ar 1               
001C7Ar 1  8A           	TXA				; set EOR byte
001C7Br 1  45 D5        	EOR	Rbyte1		; EOR PRNG extra byte
001C7Dr 1  85 D5        	STA	Rbyte1		; save new PRNG extra byte
001C7Fr 1               Ninc1:
001C7Fr 1  88           	DEY				; decrement loop count
001C80r 1  D0 EE        	BNE	LoopPRN		; loop if not all done
001C82r 1               
001C82r 1  A2 02        	LDX	#$02			; three bytes to copy
001C84r 1               CopyPRNG:
001C84r 1  B5 D5        	LDA	Rbyte1,X		; get PRNG byte
001C86r 1  95 AD        	STA	FAC1_1,X		; save FAC1 byte
001C88r 1  CA           	DEX
001C89r 1  10 F9        	BPL	CopyPRNG		; loop if not complete
001C8Br 1               
001C8Br 1  A9 80        	LDA	#$80			; set the exponent
001C8Dr 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
001C8Fr 1               
001C8Fr 1  0A           	ASL				; clear A
001C90r 1  85 B0        	STA	FAC1_s		; save FAC1 sign
001C92r 1               
001C92r 1  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
001C95r 1               
001C95r 1               ; perform COS()
001C95r 1               
001C95r 1               LAB_COS:
001C95r 1  A9 rr        	LDA	#<LAB_2C78		; set (pi/2) pointer low byte
001C97r 1  A0 rr        	LDY	#>LAB_2C78		; set (pi/2) pointer high byte
001C99r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001C9Cr 1               
001C9Cr 1               ; perform SIN()
001C9Cr 1               
001C9Cr 1               LAB_SIN:
001C9Cr 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001C9Fr 1  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
001CA1r 1  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
001CA3r 1  A6 B7        	LDX	FAC2_s		; get FAC2 sign (b7)
001CA5r 1  20 rr rr     	JSR	LAB_26C2		; divide by (AY) (X=sign)
001CA8r 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001CABr 1  20 rr rr     	JSR	LAB_INT		; perform INT
001CAEr 1  A9 00        	LDA	#$00			; clear byte
001CB0r 1  85 B8        	STA	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
001CB2r 1  20 rr rr     	JSR	LAB_SUBTRACT	; perform subtraction, FAC2 from FAC1
001CB5r 1  A9 rr        	LDA	#<LAB_2C80		; set 0.25 pointer low byte
001CB7r 1  A0 rr        	LDY	#>LAB_2C80		; set 0.25 pointer high byte
001CB9r 1  20 rr rr     	JSR	LAB_2455		; perform subtraction, (AY) from FAC1
001CBCr 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001CBEr 1  48           	PHA				; save FAC1 sign
001CBFr 1  10 0D        	BPL	LAB_2C35		; branch if +ve
001CC1r 1               
001CC1r 1               					; FAC1 sign was -ve
001CC1r 1  20 rr rr     	JSR	LAB_244E		; add 0.5 to FAC1
001CC4r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001CC6r 1  30 09        	BMI	LAB_2C38		; branch if -ve
001CC8r 1               
001CC8r 1  A5 63        	LDA	Cflag			; get comparison evaluation flag
001CCAr 1  49 FF        	EOR	#$FF			; toggle flag
001CCCr 1  85 63        	STA	Cflag			; save comparison evaluation flag
001CCEr 1               LAB_2C35:
001CCEr 1  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001CD1r 1               LAB_2C38:
001CD1r 1  A9 rr        	LDA	#<LAB_2C80		; set 0.25 pointer low byte
001CD3r 1  A0 rr        	LDY	#>LAB_2C80		; set 0.25 pointer high byte
001CD5r 1  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001CD8r 1  68           	PLA				; restore FAC1 sign
001CD9r 1  10 03        	BPL	LAB_2C45		; branch if was +ve
001CDBr 1               
001CDBr 1               					; else correct FAC1
001CDBr 1  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001CDEr 1               LAB_2C45:
001CDEr 1  A9 rr        	LDA	#<LAB_2C84		; set pointer low byte to counter
001CE0r 1  A0 rr        	LDY	#>LAB_2C84		; set pointer high byte to counter
001CE2r 1  4C rr rr     	JMP	LAB_2B6E		; ^2 then series evaluation and return
001CE5r 1               
001CE5r 1               ; perform TAN()
001CE5r 1               
001CE5r 1               LAB_TAN:
001CE5r 1  20 rr rr     	JSR	LAB_276E		; pack FAC1 into Adatal
001CE8r 1  A9 00        	LDA	#$00			; clear byte
001CEAr 1  85 63        	STA	Cflag			; clear comparison evaluation flag
001CECr 1  20 rr rr     	JSR	LAB_SIN		; go do SIN(n)
001CEFr 1  A2 9C        	LDX	#<func_l		; set sin(n) pointer low byte
001CF1r 1  A0 00        	LDY	#>func_l		; set sin(n) pointer high byte
001CF3r 1  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001CF6r 1  A9 A4        	LDA	#<Adatal		; set n pointer low addr
001CF8r 1  A0 00        	LDY	#>Adatal		; set n pointer high addr
001CFAr 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
001CFDr 1  A9 00        	LDA	#$00			; clear byte
001CFFr 1  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
001D01r 1  A5 63        	LDA	Cflag			; get comparison evaluation flag
001D03r 1  20 rr rr     	JSR	LAB_2C74		; save flag and go do series evaluation
001D06r 1               
001D06r 1  A9 9C        	LDA	#<func_l		; set sin(n) pointer low byte
001D08r 1  A0 00        	LDY	#>func_l		; set sin(n) pointer high byte
001D0Ar 1  4C rr rr     	JMP	LAB_26CA		; convert AY and do (AY)/FAC1
001D0Dr 1               
001D0Dr 1               LAB_2C74:
001D0Dr 1  48           	PHA				; save comparison evaluation flag
001D0Er 1  4C rr rr     	JMP	LAB_2C35		; go do series evaluation
001D11r 1               
001D11r 1               ; perform USR()
001D11r 1               
001D11r 1               LAB_USR:
001D11r 1  20 3A 00     	JSR	Usrjmp		; call user code
001D14r 1  4C rr rr     	JMP	LAB_1BFB		; scan for ")", else do syntax error then warm start
001D17r 1               
001D17r 1               ; perform ATN()
001D17r 1               
001D17r 1               LAB_ATN:
001D17r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001D19r 1  48           	PHA				; save sign
001D1Ar 1  10 03        	BPL	LAB_2CA1		; branch if +ve
001D1Cr 1               
001D1Cr 1  20 rr rr     	JSR	LAB_GTHAN		; else do - FAC1
001D1Fr 1               LAB_2CA1:
001D1Fr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001D21r 1  48           	PHA				; push exponent
001D22r 1  C9 81        	CMP	#$81			; compare with 1
001D24r 1  90 07        	BCC	LAB_2CAF		; branch if FAC1<1
001D26r 1               
001D26r 1  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
001D28r 1  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high byte
001D2Ar 1  20 rr rr     	JSR	LAB_26CA		; convert AY and do (AY)/FAC1
001D2Dr 1               LAB_2CAF:
001D2Dr 1  A9 rr        	LDA	#<LAB_2CC9		; set pointer low byte to counter
001D2Fr 1  A0 rr        	LDY	#>LAB_2CC9		; set pointer high byte to counter
001D31r 1  20 rr rr     	JSR	LAB_2B6E		; ^2 then series evaluation
001D34r 1  68           	PLA				; restore old FAC1 exponent
001D35r 1  C9 81        	CMP	#$81			; compare with 1
001D37r 1  90 07        	BCC	LAB_2CC2		; branch if FAC1<1
001D39r 1               
001D39r 1  A9 rr        	LDA	#<LAB_2C78		; set (pi/2) pointer low byte
001D3Br 1  A0 rr        	LDY	#>LAB_2C78		; set (pi/2) pointer high byte
001D3Dr 1  20 rr rr     	JSR	LAB_2455		; perform subtraction, (AY) from FAC1
001D40r 1               LAB_2CC2:
001D40r 1  68           	PLA				; restore FAC1 sign
001D41r 1  10 16        	BPL	LAB_2D04		; exit if was +ve
001D43r 1               
001D43r 1  4C rr rr     	JMP	LAB_GTHAN		; else do - FAC1 and return
001D46r 1               
001D46r 1               ; perform BITSET
001D46r 1               
001D46r 1               LAB_BITSET:
001D46r 1  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001D49r 1  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001D4Br 1  B0 20        	BCS	FCError		; branch if > 7
001D4Dr 1               
001D4Dr 1  A9 00        	LDA	#$00			; clear A
001D4Fr 1  38           	SEC				; set the carry
001D50r 1               S_Bits:
001D50r 1  2A           	ROL				; shift bit
001D51r 1  CA           	DEX				; decrement bit number
001D52r 1  10 FC        	BPL	S_Bits		; loop if still +ve
001D54r 1               
001D54r 1  E8           	INX				; make X = $00
001D55r 1  01 41        	ORA	(Itempl,X)		; or with byte via temporary integer (addr)
001D57r 1  81 41        	STA	(Itempl,X)		; save byte via temporary integer (addr)
001D59r 1               LAB_2D04:
001D59r 1  60           	RTS
001D5Ar 1               
001D5Ar 1               ; perform BITCLR
001D5Ar 1               
001D5Ar 1               LAB_BITCLR:
001D5Ar 1  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001D5Dr 1  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001D5Fr 1  B0 0C        	BCS	FCError		; branch if > 7
001D61r 1               
001D61r 1  A9 FF        	LDA	#$FF			; set A
001D63r 1               S_Bitc:
001D63r 1  2A           	ROL				; shift bit
001D64r 1  CA           	DEX				; decrement bit number
001D65r 1  10 FC        	BPL	S_Bitc		; loop if still +ve
001D67r 1               
001D67r 1  E8           	INX				; make X = $00
001D68r 1  21 41        	AND	(Itempl,X)		; and with byte via temporary integer (addr)
001D6Ar 1  81 41        	STA	(Itempl,X)		; save byte via temporary integer (addr)
001D6Cr 1  60           	RTS
001D6Dr 1               
001D6Dr 1               FCError:
001D6Dr 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
001D70r 1               
001D70r 1               ; perform BITTST()
001D70r 1               
001D70r 1               LAB_BTST:
001D70r 1  20 BC 00     	JSR	LAB_IGBY		; increment BASIC pointer
001D73r 1  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001D76r 1  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001D78r 1  B0 F3        	BCS	FCError		; branch if > 7
001D7Ar 1               
001D7Ar 1  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
001D7Dr 1  C9 29        	CMP	#')'			; is next character ")"
001D7Fr 1  F0 03        	BEQ	TST_OK		; if ")" go do rest of function
001D81r 1               
001D81r 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001D84r 1               
001D84r 1               TST_OK:
001D84r 1  20 BC 00     	JSR	LAB_IGBY		; update BASIC execute pointer (to character past ")")
001D87r 1  A9 00        	LDA	#$00			; clear A
001D89r 1  38           	SEC				; set the carry
001D8Ar 1               T_Bits:
001D8Ar 1  2A           	ROL				; shift bit
001D8Br 1  CA           	DEX				; decrement bit number
001D8Cr 1  10 FC        	BPL	T_Bits		; loop if still +ve
001D8Er 1               
001D8Er 1  E8           	INX				; make X = $00
001D8Fr 1  21 41        	AND	(Itempl,X)		; AND with byte via temporary integer (addr)
001D91r 1  F0 02        	BEQ	LAB_NOTT		; branch if zero (already correct)
001D93r 1               
001D93r 1  A9 FF        	LDA	#$FF			; set for -1 result
001D95r 1               LAB_NOTT:
001D95r 1  4C rr rr     	JMP	LAB_27DB		; go do SGN tail
001D98r 1               
001D98r 1               ; perform BIN$()
001D98r 1               
001D98r 1               LAB_BINS:
001D98r 1  E0 19        	CPX	#$19			; max + 1
001D9Ar 1  B0 48        	BCS	BinFErr		; exit if too big ( > or = )
001D9Cr 1               
001D9Cr 1  86 78        	STX	TempB			; save # of characters ($00 = leading zero remove)
001D9Er 1  A9 18        	LDA	#$18			; need A byte long space
001DA0r 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long
001DA3r 1  A0 17        	LDY	#$17			; set index
001DA5r 1  A2 18        	LDX	#$18			; character count
001DA7r 1               NextB1:
001DA7r 1  46 41        	LSR	nums_1		; shift highest byte
001DA9r 1  66 42        	ROR	nums_2		; shift middle byte
001DABr 1  66 43        	ROR	nums_3		; shift lowest byte bit 0 to carry
001DADr 1  8A           	TXA				; load with "0"/2
001DAEr 1  2A           	ROL				; shift in carry
001DAFr 1  91 AD        	STA	(str_pl),Y		; save to temp string + index
001DB1r 1  88           	DEY				; decrement index
001DB2r 1  10 F3        	BPL	NextB1		; loop if not done
001DB4r 1               
001DB4r 1  A5 78        	LDA	TempB			; get # of characters
001DB6r 1  F0 0A        	BEQ	EndBHS		; branch if truncate
001DB8r 1               
001DB8r 1  AA           	TAX				; copy length to X
001DB9r 1  38           	SEC				; set carry for add !
001DBAr 1  49 FF        	EOR	#$FF			; 1's complement
001DBCr 1  69 18        	ADC	#$18			; add 24d
001DBEr 1  F0 1C        	BEQ	GoPr2			; if zero print whole string
001DC0r 1               
001DC0r 1  D0 0F        	BNE	GoPr1			; else go make output string
001DC2r 1               
001DC2r 1               ; this is the exit code and is also used by HEX$()
001DC2r 1               ; truncate string to remove leading "0"s
001DC2r 1               
001DC2r 1               EndBHS:
001DC2r 1  A8           	TAY				; clear index (A=0, X=length here)
001DC3r 1               NextB2:
001DC3r 1  B1 AD        	LDA	(str_pl),Y		; get character from string
001DC5r 1  C9 30        	CMP	#'0'			; compare with "0"
001DC7r 1  D0 07        	BNE	GoPr			; if not "0" then go print string from here
001DC9r 1               
001DC9r 1  CA           	DEX				; decrement character count
001DCAr 1  F0 03        	BEQ	GoPr3			; if zero then end of string so go print it
001DCCr 1               
001DCCr 1  C8           	INY				; else increment index
001DCDr 1  10 F4        	BPL	NextB2		; loop always
001DCFr 1               
001DCFr 1               ; make fixed length output string - ignore overflows!
001DCFr 1               
001DCFr 1               GoPr3:
001DCFr 1  E8           	INX				; need at least 1 character
001DD0r 1               GoPr:
001DD0r 1  98           	TYA				; copy result
001DD1r 1               GoPr1:
001DD1r 1  18           	CLC				; clear carry for add
001DD2r 1  65 AD        	ADC	str_pl		; add low address
001DD4r 1  85 AD        	STA	str_pl		; save low address
001DD6r 1  A9 00        	LDA	#$00			; do high byte
001DD8r 1  65 AE        	ADC	str_ph		; add high address
001DDAr 1  85 AE        	STA	str_ph		; save high address
001DDCr 1               GoPr2:
001DDCr 1  86 AC        	STX	str_ln		; X holds string length
001DDEr 1  20 BC 00     	JSR	LAB_IGBY		; update BASIC execute pointer (to character past ")")
001DE1r 1  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put address
001DE4r 1               					; and length on descriptor stack and update stack pointers
001DE4r 1               
001DE4r 1               BinFErr:
001DE4r 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
001DE7r 1               
001DE7r 1               ; perform HEX$()
001DE7r 1               
001DE7r 1               LAB_HEXS:
001DE7r 1  E0 07        	CPX	#$07			; max + 1
001DE9r 1  B0 F9        	BCS	BinFErr		; exit if too big ( > or = )
001DEBr 1               
001DEBr 1  86 78        	STX	TempB			; save # of characters
001DEDr 1               
001DEDr 1  A9 06        	LDA	#$06			; need 6 bytes for string
001DEFr 1  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long
001DF2r 1  A0 05        	LDY	#$05			; set string index
001DF4r 1               
001DF4r 1  F8           	SED				; need decimal mode for nibble convert
001DF5r 1  A5 43        	LDA	nums_3		; get lowest byte
001DF7r 1  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001DFAr 1  A5 42        	LDA	nums_2		; get middle byte
001DFCr 1  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001DFFr 1  A5 41        	LDA	nums_1		; get highest byte
001E01r 1  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001E04r 1  D8           	CLD				; back to binary
001E05r 1               
001E05r 1  A2 06        	LDX	#$06			; character count
001E07r 1  A5 78        	LDA	TempB			; get # of characters
001E09r 1  F0 B7        	BEQ	EndBHS		; branch if truncate
001E0Br 1               
001E0Br 1  AA           	TAX				; copy length to X
001E0Cr 1  38           	SEC				; set carry for add !
001E0Dr 1  49 FF        	EOR	#$FF			; 1's complement
001E0Fr 1  69 06        	ADC	#$06			; add 6d
001E11r 1  F0 C9        	BEQ	GoPr2			; if zero print whole string
001E13r 1               
001E13r 1  D0 BC        	BNE	GoPr1			; else go make output string (branch always)
001E15r 1               
001E15r 1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
001E15r 1               
001E15r 1               LAB_A2HX:
001E15r 1  AA           	TAX				; save byte
001E16r 1  29 0F        	AND	#$0F			; mask off top bits
001E18r 1  20 rr rr     	JSR	LAB_AL2X		; convert low nibble to ASCII and output
001E1Br 1  8A           	TXA				; get byte back
001E1Cr 1  4A           	LSR				; /2	shift high nibble to low nibble
001E1Dr 1  4A           	LSR				; /4
001E1Er 1  4A           	LSR				; /8
001E1Fr 1  4A           	LSR				; /16
001E20r 1               LAB_AL2X:
001E20r 1  C9 0A        	CMP	#$0A			; set carry for +1 if >9
001E22r 1  69 30        	ADC	#'0'			; add ASCII "0"
001E24r 1  91 AD        	STA	(str_pl),Y		; save to temp string
001E26r 1  88           	DEY				; decrement counter
001E27r 1  60           	RTS
001E28r 1               
001E28r 1               LAB_NLTO:
001E28r 1  85 AC        	STA	FAC1_e		; save FAC1 exponent
001E2Ar 1  A9 00        	LDA	#$00			; clear sign compare
001E2Cr 1               LAB_MLTE:
001E2Cr 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001E2Er 1  8A           	TXA				; restore character
001E2Fr 1  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001E32r 1               
001E32r 1               ; gets here if the first character was "$" for hex
001E32r 1               ; get hex number
001E32r 1               
001E32r 1               LAB_CHEX:
001E32r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001E35r 1  90 0A        	BCC	LAB_ISHN		; branch if numeric character
001E37r 1               
001E37r 1  09 20        	ORA	#$20			; case convert, allow "A" to "F" and "a" to "f"
001E39r 1  E9 61        	SBC	#'a'			; subtract "a" (carry set here)
001E3Br 1  C9 06        	CMP	#$06			; compare normalised with $06 (max+1)
001E3Dr 1  B0 2A        	BCS	LAB_EXCH		; exit if >"f" or <"0"
001E3Fr 1               
001E3Fr 1  69 0A        	ADC	#$0A			; convert to nibble
001E41r 1               LAB_ISHN:
001E41r 1  29 0F        	AND	#$0F			; convert to binary
001E43r 1  AA           	TAX				; save nibble
001E44r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001E46r 1  F0 E4        	BEQ	LAB_MLTE		; skip multiply if zero
001E48r 1               
001E48r 1  69 04        	ADC	#$04			; add four to exponent (*16 - carry clear here)
001E4Ar 1  90 DC        	BCC	LAB_NLTO		; if no overflow do evaluate digit
001E4Cr 1               
001E4Cr 1               LAB_MLTO:
001E4Cr 1  4C rr rr     	JMP	LAB_2564		; do overflow error and warm start
001E4Fr 1               
001E4Fr 1               LAB_NXCH:
001E4Fr 1  AA           	TAX				; save bit
001E50r 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001E52r 1  F0 06        	BEQ	LAB_MLBT		; skip multiply if zero
001E54r 1               
001E54r 1  E6 AC        	INC	FAC1_e		; increment FAC1 exponent (*2)
001E56r 1  F0 F4        	BEQ	LAB_MLTO		; do overflow error if = $00
001E58r 1               
001E58r 1  A9 00        	LDA	#$00			; clear sign compare
001E5Ar 1               LAB_MLBT:
001E5Ar 1  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001E5Cr 1  8A           	TXA				; restore bit
001E5Dr 1  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001E60r 1               
001E60r 1               ; gets here if the first character was  "%" for binary
001E60r 1               ; get binary number
001E60r 1               
001E60r 1               LAB_CBIN:
001E60r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001E63r 1  49 30        	EOR	#'0'			; convert "0" to 0 etc.
001E65r 1  C9 02        	CMP	#$02			; compare with max+1
001E67r 1  90 E6        	BCC	LAB_NXCH		; branch exit if < 2
001E69r 1               
001E69r 1               LAB_EXCH:
001E69r 1  4C rr rr     	JMP	LAB_28F6		; evaluate -ve flag and return
001E6Cr 1               
001E6Cr 1               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
001E6Cr 1               ; now also the code that checks to see if an interrupt has occurred
001E6Cr 1               
001E6Cr 1               CTRLC:
001E6Cr 1  AD 00 03     	LDA	ccflag		; get [CTRL-C] check flag
001E6Fr 1  D0 18        	BNE	LAB_FBA2		; exit if inhibited
001E71r 1               
001E71r 1  20 rr rr     	JSR	V_INPT		; scan input device
001E74r 1  90 0B        	BCC	LAB_FBA0		; exit if buffer empty
001E76r 1               
001E76r 1  8D 01 03     	STA	ccbyte		; save received byte
001E79r 1  A2 20        	LDX	#$20			; "life" timer for bytes
001E7Br 1  8E 02 03     	STX	ccnull		; set countdown
001E7Er 1  4C rr rr     	JMP	LAB_1636		; return to BASIC
001E81r 1               
001E81r 1               LAB_FBA0:
001E81r 1  AE 02 03     	LDX	ccnull		; get countdown byte
001E84r 1  F0 03        	BEQ	LAB_FBA2		; exit if finished
001E86r 1               
001E86r 1  CE 02 03     	DEC	ccnull		; else decrement countdown
001E89r 1               LAB_FBA2:
001E89r 1  A2 D8        	LDX	#NmiBase		; set pointer to NMI values
001E8Br 1  20 rr rr     	JSR	LAB_CKIN		; go check interrupt
001E8Er 1  A2 DB        	LDX	#IrqBase		; set pointer to IRQ values
001E90r 1  20 rr rr     	JSR	LAB_CKIN		; go check interrupt
001E93r 1               LAB_CRTS:
001E93r 1  60           	RTS
001E94r 1               
001E94r 1               ; check whichever interrupt is indexed by X
001E94r 1               
001E94r 1               LAB_CKIN:
001E94r 1  B5 00        	LDA	PLUS_0,X		; get interrupt flag byte
001E96r 1  10 FB        	BPL	LAB_CRTS		; branch if interrupt not enabled
001E98r 1               
001E98r 1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
001E98r 1               ; automatically enable the interrupt when we exit
001E98r 1               
001E98r 1  0A           	ASL				; move happened bit to setup bit
001E99r 1  29 40        	AND	#$40			; mask happened bits
001E9Br 1  F0 F6        	BEQ	LAB_CRTS		; if no interrupt then exit
001E9Dr 1               
001E9Dr 1  95 00        	STA	PLUS_0,X		; save interrupt flag byte
001E9Fr 1               
001E9Fr 1  8A           	TXA				; copy index ..
001EA0r 1  A8           	TAY				; .. to Y
001EA1r 1               
001EA1r 1  68           	PLA				; dump return address low byte, call from CTRL-C
001EA2r 1  68           	PLA				; dump return address high byte
001EA3r 1               
001EA3r 1  A9 05        	LDA	#$05			; need 5 bytes for GOSUB
001EA5r 1  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
001EA8r 1  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
001EAAr 1  48           	PHA				; push on stack
001EABr 1  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
001EADr 1  48           	PHA				; push on stack
001EAEr 1  A5 88        	LDA	Clineh		; get current line high byte
001EB0r 1  48           	PHA				; push on stack
001EB1r 1  A5 87        	LDA	Clinel		; get current line low byte
001EB3r 1  48           	PHA				; push on stack
001EB4r 1  A9 8D        	LDA	#TK_GOSUB		; token for GOSUB
001EB6r 1  48           	PHA				; push on stack
001EB7r 1               
001EB7r 1  B9 01 00     	LDA	PLUS_1,Y		; get interrupt code pointer low byte
001EBAr 1  85 C3        	STA	Bpntrl		; save as BASIC execute pointer low byte
001EBCr 1  B9 02 00     	LDA	PLUS_2,Y		; get interrupt code pointer high byte
001EBFr 1  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
001EC1r 1               
001EC1r 1  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
001EC4r 1               					; can't RTS, we used the stack! the RTS from the ctrl-c
001EC4r 1               					; check will be taken when the RETIRQ/RETNMI/RETURN is
001EC4r 1               					; executed at the end of the subroutine
001EC4r 1               
001EC4r 1               ; get byte from input device, no waiting
001EC4r 1               ; returns with carry set if byte in A
001EC4r 1               
001EC4r 1               INGET:
001EC4r 1  20 rr rr     	JSR	V_INPT		; call scan input device
001EC7r 1  B0 09        	BCS	LAB_FB95		; if byte go reset timer
001EC9r 1               
001EC9r 1  AD 02 03     	LDA	ccnull		; get countdown
001ECCr 1  F0 09        	BEQ	LAB_FB96		; exit if empty
001ECEr 1               
001ECEr 1  AD 01 03     	LDA	ccbyte		; get last received byte
001ED1r 1  38           	SEC				; flag we got a byte
001ED2r 1               LAB_FB95:
001ED2r 1  A2 00        	LDX	#$00			; clear X
001ED4r 1  8E 02 03     	STX	ccnull		; clear timer because we got a byte
001ED7r 1               LAB_FB96:
001ED7r 1  60           	RTS
001ED8r 1               
001ED8r 1               ; these routines only enable the interrupts if the set-up flag is set
001ED8r 1               ; if not they have no effect
001ED8r 1               
001ED8r 1               ; perform IRQ {ON|OFF|CLEAR}
001ED8r 1               
001ED8r 1               LAB_IRQ:
001ED8r 1  A2 DB        	LDX	#IrqBase		; set pointer to IRQ values
001EDAr 1  2C           	.byte	$2C			; make next line BIT abs.
001EDBr 1               
001EDBr 1               ; perform NMI {ON|OFF|CLEAR}
001EDBr 1               
001EDBr 1               LAB_NMI:
001EDBr 1  A2 D8        	LDX	#NmiBase		; set pointer to NMI values
001EDDr 1  C9 93        	CMP	#TK_ON		; compare with token for ON
001EDFr 1  F0 11        	BEQ	LAB_INON		; go turn on interrupt
001EE1r 1               
001EE1r 1  C9 B4        	CMP	#TK_OFF		; compare with token for OFF
001EE3r 1  F0 07        	BEQ	LAB_IOFF		; go turn off interrupt
001EE5r 1               
001EE5r 1  49 A2        	EOR	#TK_CLEAR		; compare with token for CLEAR, A = $00 if = TK_CLEAR
001EE7r 1  F0 0E        	BEQ	LAB_INEX		; go clear interrupt flags and return
001EE9r 1               
001EE9r 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001EECr 1               
001EECr 1               LAB_IOFF:
001EECr 1  A9 7F        	LDA	#$7F			; clear A
001EEEr 1  35 00        	AND	PLUS_0,X		; AND with interrupt setup flag
001EF0r 1  10 05        	BPL	LAB_INEX		; go clear interrupt enabled flag and return
001EF2r 1               
001EF2r 1               LAB_INON:
001EF2r 1  B5 00        	LDA	PLUS_0,X		; get interrupt setup flag
001EF4r 1  0A           	ASL				; Shift bit to enabled flag
001EF5r 1  15 00        	ORA	PLUS_0,X		; OR with flag byte
001EF7r 1               LAB_INEX:
001EF7r 1  95 00        	STA	PLUS_0,X		; save interrupt flag byte
001EF9r 1  4C BC 00     	JMP	LAB_IGBY		; update BASIC execute pointer and return
001EFCr 1               
001EFCr 1               ; these routines set up the pointers and flags for the interrupt routines
001EFCr 1               ; note that the interrupts are also enabled by these commands
001EFCr 1               
001EFCr 1               ; perform ON IRQ
001EFCr 1               
001EFCr 1               LAB_SIRQ:
001EFCr 1  58           	CLI				; enable interrupts
001EFDr 1  A2 DB        	LDX	#IrqBase		; set pointer to IRQ values
001EFFr 1  2C           	.byte	$2C			; make next line BIT abs.
001F00r 1               
001F00r 1               ; perform ON NMI
001F00r 1               
001F00r 1               LAB_SNMI:
001F00r 1  A2 D8        	LDX	#NmiBase		; set pointer to NMI values
001F02r 1               
001F02r 1  86 78        	STX	TempB			; save interrupt pointer
001F04r 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (past token)
001F07r 1  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
001F0Ar 1  A5 79        	LDA	Smeml			; get start of mem low byte
001F0Cr 1  A6 7A        	LDX	Smemh			; get start of mem high byte
001F0Er 1  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
001F11r 1  B0 03        	BCS	LAB_LFND		; if carry set go set-up interrupt
001F13r 1               
001F13r 1  4C rr rr     	JMP	LAB_16F7		; else go do "Undefined statement" error and warm start
001F16r 1               
001F16r 1               LAB_LFND:
001F16r 1  A6 78        	LDX	TempB			; get interrupt pointer
001F18r 1  A5 AA        	LDA	Baslnl		; get pointer low byte
001F1Ar 1  E9 01        	SBC	#$01			; -1 (carry already set for subtract)
001F1Cr 1  95 01        	STA	PLUS_1,X		; save as interrupt pointer low byte
001F1Er 1  A5 AB        	LDA	Baslnh		; get pointer high byte
001F20r 1  E9 00        	SBC	#$00			; subtract carry
001F22r 1  95 02        	STA	PLUS_2,X		; save as interrupt pointer high byte
001F24r 1               
001F24r 1  A9 C0        	LDA	#$C0			; set interrupt enabled/setup bits
001F26r 1  95 00        	STA	PLUS_0,X		; set interrupt flags
001F28r 1               LAB_IRTS:
001F28r 1  60           	RTS
001F29r 1               
001F29r 1               ; return from IRQ service, restores the enabled flag.
001F29r 1               
001F29r 1               ; perform RETIRQ
001F29r 1               
001F29r 1               LAB_RETIRQ:
001F29r 1  D0 FD        	BNE	LAB_IRTS		; exit if following token (to allow syntax error)
001F2Br 1               
001F2Br 1  A5 DB        	LDA	IrqBase		; get interrupt flags
001F2Dr 1  0A           	ASL				; copy setup to enabled (b7)
001F2Er 1  05 DB        	ORA	IrqBase		; OR in setup flag
001F30r 1  85 DB        	STA	IrqBase		; save enabled flag
001F32r 1  4C rr rr     	JMP	LAB_16E8		; go do rest of RETURN
001F35r 1               
001F35r 1               ; return from NMI service, restores the enabled flag.
001F35r 1               
001F35r 1               ; perform RETNMI
001F35r 1               
001F35r 1               LAB_RETNMI:
001F35r 1  D0 F1        	BNE	LAB_IRTS		; exit if following token (to allow syntax error)
001F37r 1               
001F37r 1  A5 D8        	LDA	NmiBase		; get set-up flag
001F39r 1  0A           	ASL				; copy setup to enabled (b7)
001F3Ar 1  05 D8        	ORA	NmiBase		; OR in setup flag
001F3Cr 1  85 D8        	STA	NmiBase		; save enabled flag
001F3Er 1  4C rr rr     	JMP	LAB_16E8		; go do rest of RETURN
001F41r 1               
001F41r 1               ; MAX() MIN() pre process
001F41r 1               
001F41r 1               LAB_MMPP:
001F41r 1  20 rr rr     	JSR	LAB_EVEZ		; process expression
001F44r 1  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric, else do type mismatch
001F47r 1               
001F47r 1               ; perform MAX()
001F47r 1               
001F47r 1               LAB_MAX:
001F47r 1  20 rr rr     	JSR	LAB_PHFA		; push FAC1, evaluate expression,
001F4Ar 1               					; pull FAC2 and compare with FAC1
001F4Ar 1  10 FB        	BPL	LAB_MAX		; branch if no swap to do
001F4Cr 1               
001F4Cr 1  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001F4Er 1  09 80        	ORA	#$80			; set top bit (clear sign from compare)
001F50r 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001F52r 1  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1
001F55r 1  F0 F0        	BEQ	LAB_MAX		; go do next (branch always)
001F57r 1               
001F57r 1               ; perform MIN()
001F57r 1               
001F57r 1               LAB_MIN:
001F57r 1  20 rr rr     	JSR	LAB_PHFA		; push FAC1, evaluate expression,
001F5Ar 1               					; pull FAC2 and compare with FAC1
001F5Ar 1  30 FB        	BMI	LAB_MIN		; branch if no swap to do
001F5Cr 1               
001F5Cr 1  F0 F9        	BEQ	LAB_MIN		; branch if no swap to do
001F5Er 1               
001F5Er 1  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001F60r 1  09 80        	ORA	#$80			; set top bit (clear sign from compare)
001F62r 1  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001F64r 1  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1
001F67r 1  F0 EE        	BEQ	LAB_MIN		; go do next (branch always)
001F69r 1               
001F69r 1               ; exit routine. don't bother returning to the loop code
001F69r 1               ; check for correct exit, else so syntax error
001F69r 1               
001F69r 1               LAB_MMEC:
001F69r 1  C9 29        	CMP	#')'			; is it end of function?
001F6Br 1  D0 05        	BNE	LAB_MMSE		; if not do MAX MIN syntax error
001F6Dr 1               
001F6Dr 1  68           	PLA				; dump return address low byte
001F6Er 1  68           	PLA				; dump return address high byte
001F6Fr 1  4C BC 00     	JMP	LAB_IGBY		; update BASIC execute pointer (to chr past ")")
001F72r 1               
001F72r 1               LAB_MMSE:
001F72r 1  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001F75r 1               
001F75r 1               ; check for next, evaluate and return or exit
001F75r 1               ; this is the routine that does most of the work
001F75r 1               
001F75r 1               LAB_PHFA:
001F75r 1  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
001F78r 1  C9 2C        	CMP	#','			; is there more ?
001F7Ar 1  D0 ED        	BNE	LAB_MMEC		; if not go do end check
001F7Cr 1               
001F7Cr 1               					; push FAC1
001F7Cr 1  20 rr rr     	JSR	LAB_27BA		; round FAC1
001F7Fr 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign
001F81r 1  09 7F        	ORA	#$7F			; set all non sign bits
001F83r 1  25 AD        	AND	FAC1_1		; AND FAC1 mantissa1 (AND in sign bit)
001F85r 1  48           	PHA				; push on stack
001F86r 1  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001F88r 1  48           	PHA				; push on stack
001F89r 1  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001F8Br 1  48           	PHA				; push on stack
001F8Cr 1  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001F8Er 1  48           	PHA				; push on stack
001F8Fr 1               
001F8Fr 1  20 BC 00     	JSR	LAB_IGBY		; scan and get next BASIC byte (after ",")
001F92r 1  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001F95r 1               					; else do type mismatch
001F95r 1               
001F95r 1               					; pop FAC2 (MAX/MIN expression so far)
001F95r 1  68           	PLA				; pop exponent
001F96r 1  85 B3        	STA	FAC2_e		; save FAC2 exponent
001F98r 1  68           	PLA				; pop mantissa3
001F99r 1  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
001F9Br 1  68           	PLA				; pop mantissa1
001F9Cr 1  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
001F9Er 1  68           	PLA				; pop sign/mantissa1
001F9Fr 1  85 B4        	STA	FAC2_1		; save FAC2 sign/mantissa1
001FA1r 1  85 B7        	STA	FAC2_s		; save FAC2 sign
001FA3r 1               
001FA3r 1               					; compare FAC1 with (packed) FAC2
001FA3r 1  A9 B3        	LDA	#<FAC2_e		; set pointer low byte to FAC2
001FA5r 1  A0 00        	LDY	#>FAC2_e		; set pointer high byte to FAC2
001FA7r 1  4C rr rr     	JMP	LAB_27F8		; compare FAC1 with FAC2 (AY) and return
001FAAr 1               					; returns A=$00 if FAC1 = (AY)
001FAAr 1               					; returns A=$01 if FAC1 > (AY)
001FAAr 1               					; returns A=$FF if FAC1 < (AY)
001FAAr 1               
001FAAr 1               ; perform WIDTH
001FAAr 1               
001FAAr 1               LAB_WDTH:
001FAAr 1  C9 2C        	CMP	#','			; is next byte ","
001FACr 1  F0 1B        	BEQ	LAB_TBSZ		; if so do tab size
001FAEr 1               
001FAEr 1  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
001FB1r 1  8A           	TXA				; copy width to A
001FB2r 1  F0 0A        	BEQ	LAB_NSTT		; branch if set for infinite line
001FB4r 1               
001FB4r 1  E0 10        	CPX	#$10			; else make min width = 16d
001FB6r 1  90 45        	BCC	TabErr		; if less do function call error and exit
001FB8r 1               
001FB8r 1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
001FB8r 1               ; tab size greater than the line length.
001FB8r 1               
001FB8r 1  E4 64        	CPX	TabSiz		; compare with tab size
001FBAr 1  B0 02        	BCS	LAB_NSTT		; branch if >= tab size
001FBCr 1               
001FBCr 1  86 64        	STX	TabSiz		; else make tab size = terminal width
001FBEr 1               LAB_NSTT:
001FBEr 1  86 3F        	STX	TWidth		; set the terminal width
001FC0r 1  20 C2 00     	JSR	LAB_GBYT		; get BASIC byte back
001FC3r 1  F0 1A        	BEQ	WExit			; exit if no following
001FC5r 1               
001FC5r 1  C9 2C        	CMP	#','			; else is it ","
001FC7r 1  D0 A9        	BNE	LAB_MMSE		; if not do syntax error
001FC9r 1               
001FC9r 1               LAB_TBSZ:
001FC9r 1  20 rr rr     	JSR	LAB_SGBY		; scan and get byte parameter
001FCCr 1  8A           	TXA				; copy TAB size
001FCDr 1  30 2E        	BMI	TabErr		; if >127 do function call error and exit
001FCFr 1               
001FCFr 1  E0 01        	CPX	#$01			; compare with min-1
001FD1r 1  90 2A        	BCC	TabErr		; if <=1 do function call error and exit
001FD3r 1               
001FD3r 1  A5 3F        	LDA	TWidth		; set flags for width
001FD5r 1  F0 06        	BEQ	LAB_SVTB		; skip check if infinite line
001FD7r 1               
001FD7r 1  E4 3F        	CPX	TWidth		; compare TAB with width
001FD9r 1  F0 02        	BEQ	LAB_SVTB		; ok if =
001FDBr 1               
001FDBr 1  B0 20        	BCS	TabErr		; branch if too big
001FDDr 1               
001FDDr 1               LAB_SVTB:
001FDDr 1  86 64        	STX	TabSiz		; save TAB size
001FDFr 1               
001FDFr 1               ; calculate tab column limit from TAB size. The Iclim is set to the last tab
001FDFr 1               ; position on a line that still has at least one whole tab width between it
001FDFr 1               ; and the end of the line.
001FDFr 1               
001FDFr 1               WExit:
001FDFr 1  A5 3F        	LDA	TWidth		; get width
001FE1r 1  F0 06        	BEQ	LAB_SULP		; branch if infinite line
001FE3r 1               
001FE3r 1  C5 64        	CMP	TabSiz		; compare with tab size
001FE5r 1  B0 03        	BCS	LAB_WDLP		; branch if >= tab size
001FE7r 1               
001FE7r 1  85 64        	STA	TabSiz		; else make tab size = terminal width
001FE9r 1               LAB_SULP:
001FE9r 1  38           	SEC				; set carry for subtract
001FEAr 1               LAB_WDLP:
001FEAr 1  E5 64        	SBC	TabSiz		; subtract tab size
001FECr 1  B0 FC        	BCS	LAB_WDLP		; loop while no borrow
001FEEr 1               
001FEEr 1  65 64        	ADC	TabSiz		; add tab size back
001FF0r 1  18           	CLC				; clear carry for add
001FF1r 1  65 64        	ADC	TabSiz		; add tab size back again
001FF3r 1  85 40        	STA	Iclim			; save for now
001FF5r 1  A5 3F        	LDA	TWidth		; get width back
001FF7r 1  38           	SEC				; set carry for subtract
001FF8r 1  E5 40        	SBC	Iclim			; subtract remainder
001FFAr 1  85 40        	STA	Iclim			; save tab column limit
001FFCr 1               LAB_NOSQ:
001FFCr 1  60           	RTS
001FFDr 1               
001FFDr 1               TabErr:
001FFDr 1  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
002000r 1               
002000r 1               ; perform SQR()
002000r 1               
002000r 1               LAB_SQR:
002000r 1  A5 B0        	LDA	FAC1_s		; get FAC1 sign
002002r 1  30 F9        	BMI	TabErr		; if -ve do function call error
002004r 1               
002004r 1  A5 AC        	LDA	FAC1_e		; get exponent
002006r 1  F0 F4        	BEQ	LAB_NOSQ		; do root if non zero
002008r 1               
002008r 1  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
00200Br 1  A9 00        	LDA	#$00			; clear A
00200Dr 1               
00200Dr 1  85 77        	STA	FACt_3		; clear remainder
00200Fr 1  85 76        	STA	FACt_2		; ..
002011r 1  85 75        	STA	FACt_1		; ..
002013r 1  85 78        	STA	TempB			; ..
002015r 1               
002015r 1  85 AF        	STA	FAC1_3		; clear root
002017r 1  85 AE        	STA	FAC1_2		; ..
002019r 1  85 AD        	STA	FAC1_1		; ..
00201Br 1               
00201Br 1  A2 18        	LDX	#$18			; 24 pairs of bits to do
00201Dr 1  A5 B3        	LDA	FAC2_e		; get exponent
00201Fr 1  4A           	LSR				; check odd/even
002020r 1  B0 0E        	BCS	LAB_SQE2		; if odd only 1 shift first time
002022r 1               
002022r 1               LAB_SQE1:
002022r 1  06 B6        	ASL	FAC2_3		; shift highest bit of number ..
002024r 1  26 B5        	ROL	FAC2_2		; ..
002026r 1  26 B4        	ROL	FAC2_1		; ..
002028r 1  26 77        	ROL	FACt_3		; .. into remainder
00202Ar 1  26 76        	ROL	FACt_2		; ..
00202Cr 1  26 75        	ROL	FACt_1		; ..
00202Er 1  26 78        	ROL	TempB			; .. never overflows
002030r 1               LAB_SQE2:
002030r 1  06 B6        	ASL	FAC2_3		; shift highest bit of number ..
002032r 1  26 B5        	ROL	FAC2_2		; ..
002034r 1  26 B4        	ROL	FAC2_1		; ..
002036r 1  26 77        	ROL	FACt_3		; .. into remainder
002038r 1  26 76        	ROL	FACt_2		; ..
00203Ar 1  26 75        	ROL	FACt_1		; ..
00203Cr 1  26 78        	ROL	TempB			; .. never overflows
00203Er 1               
00203Er 1  06 AF        	ASL	FAC1_3		; root = root * 2
002040r 1  26 AE        	ROL	FAC1_2		; ..
002042r 1  26 AD        	ROL	FAC1_1		; .. never overflows
002044r 1               
002044r 1  A5 AF        	LDA	FAC1_3		; get root low byte
002046r 1  2A           	ROL				; *2
002047r 1  85 5B        	STA	Temp3			; save partial low byte
002049r 1  A5 AE        	LDA	FAC1_2		; get root low mid byte
00204Br 1  2A           	ROL				; *2
00204Cr 1  85 5C        	STA	Temp3+1		; save partial low mid byte
00204Er 1  A5 AD        	LDA	FAC1_1		; get root high mid byte
002050r 1  2A           	ROL				; *2
002051r 1  85 5D        	STA	Temp3+2		; save partial high mid byte
002053r 1  A9 00        	LDA	#$00			; get root high byte (always $00)
002055r 1  2A           	ROL				; *2
002056r 1  85 5E        	STA	Temp3+3		; save partial high byte
002058r 1               
002058r 1               					; carry clear for subtract +1
002058r 1  A5 77        	LDA	FACt_3		; get remainder low byte
00205Ar 1  E5 5B        	SBC	Temp3			; subtract partial low byte
00205Cr 1  85 5B        	STA	Temp3			; save partial low byte
00205Er 1               
00205Er 1  A5 76        	LDA	FACt_2		; get remainder low mid byte
002060r 1  E5 5C        	SBC	Temp3+1		; subtract partial low mid byte
002062r 1  85 5C        	STA	Temp3+1		; save partial low mid byte
002064r 1               
002064r 1  A5 75        	LDA	FACt_1		; get remainder high mid byte
002066r 1  E5 5D        	SBC	Temp3+2		; subtract partial high mid byte
002068r 1  A8           	TAY				; copy partial high mid byte
002069r 1               
002069r 1  A5 78        	LDA	TempB			; get remainder high byte
00206Br 1  E5 5E        	SBC	Temp3+3		; subtract partial high byte
00206Dr 1  90 0E        	BCC	LAB_SQNS		; skip sub if remainder smaller
00206Fr 1               
00206Fr 1  85 78        	STA	TempB			; save remainder high byte
002071r 1               
002071r 1  84 75        	STY	FACt_1		; save remainder high mid byte
002073r 1               
002073r 1  A5 5C        	LDA	Temp3+1		; get remainder low mid byte
002075r 1  85 76        	STA	FACt_2		; save remainder low mid byte
002077r 1               
002077r 1  A5 5B        	LDA	Temp3			; get partial low byte
002079r 1  85 77        	STA	FACt_3		; save remainder low byte
00207Br 1               
00207Br 1  E6 AF        	INC	FAC1_3		; increment root low byte (never any rollover)
00207Dr 1               LAB_SQNS:
00207Dr 1  CA           	DEX				; decrement bit pair count
00207Er 1  D0 A2        	BNE	LAB_SQE1		; loop if not all done
002080r 1               
002080r 1  38           	SEC				; set carry for subtract
002081r 1  A5 B3        	LDA	FAC2_e		; get exponent
002083r 1  E9 80        	SBC	#$80			; normalise
002085r 1  6A           	ROR				; /2 and re-bias to $80
002086r 1  69 00        	ADC	#$00			; add bit zero back in (allow for half shift)
002088r 1  85 AC        	STA	FAC1_e		; save it
00208Ar 1  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
00208Dr 1               
00208Dr 1               ; perform VARPTR()
00208Dr 1               
00208Dr 1               LAB_VARPTR:
00208Dr 1  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
002090r 1  20 rr rr     	JSR	LAB_GVAR		; get var address
002093r 1  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
002096r 1  A4 95        	LDY	Cvaral		; get var address low byte
002098r 1  A5 96        	LDA	Cvarah		; get var address high byte
00209Ar 1  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
00209Dr 1               
00209Dr 1               ; perform PI
00209Dr 1               
00209Dr 1               LAB_PI:
00209Dr 1  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
00209Fr 1  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
0020A1r 1  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
0020A4r 1  C6 AC        	DEC	FAC1_e		; make result = PI
0020A6r 1  60           	RTS
0020A7r 1               
0020A7r 1               ; perform TWOPI
0020A7r 1               
0020A7r 1               LAB_TWOPI:
0020A7r 1  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
0020A9r 1  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
0020ABr 1  4C rr rr     	JMP	LAB_UFAC		; unpack memory (AY) into FAC1 and return
0020AEr 1               
0020AEr 1               ; system dependant i/o vectors
0020AEr 1               ; these are in RAM and are set by the monitor at start-up
0020AEr 1               
0020AEr 1               V_INPT:
0020AEr 1  6C 05 03     	JMP	(VEC_IN)		; non halting scan input device
0020B1r 1               V_OUTP:
0020B1r 1  6C 07 03     	JMP	(VEC_OUT)		; send byte to output device
0020B4r 1               V_LOAD:
0020B4r 1  6C 09 03     	JMP	(VEC_LD)		; load BASIC program
0020B7r 1               V_SAVE:
0020B7r 1  6C 0B 03     	JMP	(VEC_SV)		; save BASIC program
0020BAr 1               
0020BAr 1               ; The rest are tables messages and code for RAM
0020BAr 1               
0020BAr 1               ; the rest of the code is tables and BASIC start-up code
0020BAr 1               
0020BAr 1               PG2_TABS:
0020BAr 1  00           	.byte	$00			; ctrl-c flag		-	$00 = enabled
0020BBr 1  00           	.byte	$00			; ctrl-c byte		-	GET needs this
0020BCr 1  00           	.byte	$00			; ctrl-c byte timeout	-	GET needs this
0020BDr 1  rr rr        	.word	CTRLC			; ctrl c check vector
0020BFr 1  2A FF        	.word	$FF2A		; non halting key input	-	monitor to set this
0020C1r 1  24 FF        	.word	$FF24		; output vector		-	monitor to set this
0020C3r 1  rr rr        	.word	crts			; load vector		-	monitor to set this
0020C5r 1  rr rr        	.word	crts			; save vector		-	monitor to set this
0020C7r 1               PG2_TABE:
0020C7r 1               
0020C7r 1               ; character get subroutine for zero page
0020C7r 1               
0020C7r 1               ; For a 1.8432MHz 6502 including the JSR and RTS
0020C7r 1               ; fastest (>=":")	=  29 cycles =  15.7uS
0020C7r 1               ; slowest (<":")	=  40 cycles =  21.7uS
0020C7r 1               ; space skip	= +21 cycles = +11.4uS
0020C7r 1               ; inc across page	=  +4 cycles =  +2.2uS
0020C7r 1               
0020C7r 1               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
0020C7r 1               ; block is copied to it's destination, any non zero page address will do at assembly
0020C7r 1               ; time, to assemble a three byte instruction.
0020C7r 1               
0020C7r 1               ; page 0 initialisation table from $BC
0020C7r 1               ; increment and scan memory
0020C7r 1               
0020C7r 1               LAB_2CEE:
0020C7r 1  E6 C3        	INC	Bpntrl		; increment BASIC execute pointer low byte
0020C9r 1  D0 02        	BNE	LAB_2CF4		; branch if no carry
0020CBr 1               					; else
0020CBr 1  E6 C4        	INC	Bpntrh		; increment BASIC execute pointer high byte
0020CDr 1               
0020CDr 1               ; page 0 initialisation table from $C2
0020CDr 1               ; scan memory
0020CDr 1               
0020CDr 1               LAB_2CF4:
0020CDr 1  AD FF FF     	LDA	$FFFF			; get byte to scan (addr set by call routine)
0020D0r 1  C9 3A        	CMP	#':'			; compare with ":"
0020D2r 1  B0 0A        	BCS	LAB_2D05		; exit if >= ":", not numeric, carry set
0020D4r 1               
0020D4r 1  C9 20        	CMP	#' '			; compare with " "
0020D6r 1  F0 EF        	BEQ	LAB_2CEE		; if " " go do next
0020D8r 1               
0020D8r 1  38           	SEC				; set carry for SBC
0020D9r 1  E9 30        	SBC	#'0'			; subtract "0"
0020DBr 1  38           	SEC				; set carry for SBC
0020DCr 1  E9 D0        	SBC	#$D0			; subtract -"0"
0020DEr 1               					; clear carry if byte = "0"-"9"
0020DEr 1               LAB_2D05:
0020DEr 1  60           	RTS
0020DFr 1               
0020DFr 1               ; page zero initialisation table $00-$12 inclusive
0020DFr 1               
0020DFr 1               StrTab:
0020DFr 1  4C           	.byte	$4C			; JMP opcode
0020E0r 1  rr rr        	.word LAB_COLD		; initial warm start vector (cold start)
0020E2r 1               
0020E2r 1  00           	.byte	$00			; these bytes are not used by BASIC
0020E3r 1  00 00        	.word	$0000			;
0020E5r 1  00 00        	.word	$0000			;
0020E7r 1  00 00        	.word	$0000			;
0020E9r 1               
0020E9r 1  4C           	.byte	$4C			; JMP opcode
0020EAr 1  rr rr        	.word	LAB_FCER		; initial user function vector ("Function call" error)
0020ECr 1  00           	.byte	$00			; default NULL count
0020EDr 1  00           	.byte	$00			; clear terminal position
0020EEr 1  00           	.byte	$00			; default terminal width byte
0020EFr 1  F2           	.byte	$F2			; default limit for TAB = 14
0020F0r 1  00 04        	.word	Ram_base		; start of user RAM
0020F2r 1               EndTab:
0020F2r 1               
0020F2r 1               LAB_MSZM:
0020F2r 1  0D 0A 4D 65  	.byte	$0D,$0A,"Memory size ",$00
0020F6r 1  6D 6F 72 79  
0020FAr 1  20 73 69 7A  
002101r 1               
002101r 1               LAB_SMSG:
002101r 1  20 42 79 74  	.byte	" Bytes free",$0D,$0A,$0A
002105r 1  65 73 20 66  
002109r 1  72 65 65 0D  
00210Fr 1  45 6E 68 61  	.byte	"Enhanced BASIC 2.10",$0A,$00
002113r 1  6E 63 65 64  
002117r 1  20 42 41 53  
002124r 1               
002124r 1               ; numeric constants and series
002124r 1               
002124r 1               					; constants and series for LOG(n)
002124r 1               LAB_25A0:
002124r 1  02           	.byte	$02			; counter
002125r 1  80 19 56 62  	.byte	$80,$19,$56,$62	; 0.59898
002129r 1  80 76 22 F3  	.byte	$80,$76,$22,$F3	; 0.96147
00212Dr 1  82 38 AA 40  	.byte	$82,$38,$AA,$40	; 2.88539
002131r 1               
002131r 1               LAB_25AD:
002131r 1  80 35 04 F3  	.byte	$80,$35,$04,$F3	; 0.70711	1/root 2
002135r 1               LAB_25B1:
002135r 1  81 35 04 F3  	.byte	$81,$35,$04,$F3	; 1.41421	root 2
002139r 1               LAB_25B5:
002139r 1  80 80 00 00  	.byte	$80,$80,$00,$00	; -0.5
00213Dr 1               LAB_25B9:
00213Dr 1  80 31 72 18  	.byte	$80,$31,$72,$18	; 0.69315	LOG(2)
002141r 1               
002141r 1               					; numeric PRINT constants
002141r 1               LAB_2947:
002141r 1  91 43 4F F8  	.byte	$91,$43,$4F,$F8	; 99999.9375 (max value with at least one decimal)
002145r 1               LAB_294B:
002145r 1  94 74 23 F7  	.byte	$94,$74,$23,$F7	; 999999.4375 (max value before scientific notation)
002149r 1               LAB_294F:
002149r 1  94 74 24 00  	.byte	$94,$74,$24,$00	; 1000000
00214Dr 1               
00214Dr 1               					; EXP(n) constants and series
00214Dr 1               LAB_2AFA:
00214Dr 1  81 38 AA 3B  	.byte	$81,$38,$AA,$3B	; 1.4427	(1/LOG base 2 e)
002151r 1               LAB_2AFE:
002151r 1  06           	.byte	$06			; counter
002152r 1  74 63 90 8C  	.byte	$74,$63,$90,$8C	; 2.17023e-4
002156r 1  77 23 0C AB  	.byte	$77,$23,$0C,$AB	; 0.00124
00215Ar 1  7A 1E 94 00  	.byte	$7A,$1E,$94,$00	; 0.00968
00215Er 1  7C 63 42 80  	.byte	$7C,$63,$42,$80	; 0.05548
002162r 1  7E 75 FE D0  	.byte	$7E,$75,$FE,$D0	; 0.24023
002166r 1  80 31 72 15  	.byte	$80,$31,$72,$15	; 0.69315
00216Ar 1  81 00 00 00  	.byte	$81,$00,$00,$00	; 1.00000
00216Er 1               
00216Er 1               					; trigonometric constants and series
00216Er 1               LAB_2C78:
00216Er 1  81 49 0F DB  	.byte	$81,$49,$0F,$DB	; 1.570796371 (pi/2) as floating #
002172r 1               LAB_2C84:
002172r 1  04           	.byte	$04			; counter
002173r 1  86 1E D7 FB  	.byte	$86,$1E,$D7,$FB	; 39.7109
002177r 1  87 99 26 65  	.byte	$87,$99,$26,$65	;-76.575
00217Br 1  87 23 34 58  	.byte	$87,$23,$34,$58	; 81.6022
00217Fr 1  86 A5 5D E1  	.byte	$86,$A5,$5D,$E1	;-41.3417
002183r 1               LAB_2C7C:
002183r 1  83 49 0F DB  	.byte	$83,$49,$0F,$DB	; 6.28319 (2*pi) as floating #
002187r 1               
002187r 1               LAB_2CC9:
002187r 1  08           	.byte	$08			; counter
002188r 1  78 3A C5 37  	.byte	$78,$3A,$C5,$37	; 0.00285
00218Cr 1  7B 83 A2 5C  	.byte	$7B,$83,$A2,$5C	;-0.0160686
002190r 1  7C 2E DD 4D  	.byte	$7C,$2E,$DD,$4D	; 0.0426915
002194r 1  7D 99 B0 1E  	.byte	$7D,$99,$B0,$1E	;-0.0750429
002198r 1  7D 59 ED 24  	.byte	$7D,$59,$ED,$24	; 0.106409
00219Cr 1  7E 91 72 00  	.byte	$7E,$91,$72,$00	;-0.142036
0021A0r 1  7E 4C B9 73  	.byte	$7E,$4C,$B9,$73	; 0.199926
0021A4r 1  7F AA AA 53  	.byte	$7F,$AA,$AA,$53	;-0.333331
0021A8r 1               LAB_1D96	= *+1			; $00,$00 used for undefined variables
0021A8r 1               LAB_259C:
0021A8r 1  81 00 00 00  	.byte	$81,$00,$00,$00	; 1.000000, used for INC
0021ACr 1               LAB_2AFD:
0021ACr 1  81 80 00 00  	.byte	$81,$80,$00,$00	; -1.00000, used for DEC. must be on the same page as +1.00
0021B0r 1               
0021B0r 1               					; misc constants
0021B0r 1               LAB_1DF7:
0021B0r 1  90           	.byte	$90			;-32768 (uses first three bytes from 0.5)
0021B1r 1               LAB_2A96:
0021B1r 1  80 00 00 00  	.byte	$80,$00,$00,$00	; 0.5
0021B5r 1               LAB_2C80:
0021B5r 1  7F 00 00 00  	.byte	$7F,$00,$00,$00	; 0.25
0021B9r 1               LAB_26B5:
0021B9r 1  84 20 00 00  	.byte	$84,$20,$00,$00	; 10.0000 divide by 10 constant
0021BDr 1               
0021BDr 1               ; This table is used in converting numbers to ASCII.
0021BDr 1               
0021BDr 1               LAB_2A9A:
0021BDr 1               LAB_2A9B = LAB_2A9A+1
0021BDr 1               LAB_2A9C = LAB_2A9B+1
0021BDr 1  FE 79 60     	.byte	$FE,$79,$60		; -100000
0021C0r 1  00 27 10     	.byte	$00,$27,$10		; 10000
0021C3r 1  FF FC 18     	.byte	$FF,$FC,$18		; -1000
0021C6r 1  00 00 64     	.byte	$00,$00,$64		; 100
0021C9r 1  FF FF F6     	.byte	$FF,$FF,$F6		; -10
0021CCr 1  00 00 01     	.byte	$00,$00,$01		; 1
0021CFr 1               
0021CFr 1               LAB_CTBL:
0021CFr 1  rr rr        	.word	LAB_END-1		; END
0021D1r 1  rr rr        	.word	LAB_FOR-1		; FOR
0021D3r 1  rr rr        	.word	LAB_NEXT-1		; NEXT
0021D5r 1  rr rr        	.word	LAB_DATA-1		; DATA
0021D7r 1  rr rr        	.word	LAB_INPUT-1		; INPUT
0021D9r 1  rr rr        	.word	LAB_DIM-1		; DIM
0021DBr 1  rr rr        	.word	LAB_READ-1		; READ
0021DDr 1  rr rr        	.word	LAB_LET-1		; LET
0021DFr 1  rr rr        	.word	LAB_DEC-1		; DEC			new command
0021E1r 1  rr rr        	.word	LAB_GOTO-1		; GOTO
0021E3r 1  rr rr        	.word	LAB_RUN-1		; RUN
0021E5r 1  rr rr        	.word	LAB_IF-1		; IF
0021E7r 1  rr rr        	.word	LAB_RESTORE-1	; RESTORE		modified command
0021E9r 1  rr rr        	.word	LAB_GOSUB-1		; GOSUB
0021EBr 1  rr rr        	.word	LAB_RETIRQ-1	; RETIRQ		new command
0021EDr 1  rr rr        	.word	LAB_RETNMI-1	; RETNMI		new command
0021EFr 1  rr rr        	.word	LAB_RETURN-1	; RETURN
0021F1r 1  rr rr        	.word	LAB_REM-1		; REM
0021F3r 1  rr rr        	.word	LAB_STOP-1		; STOP
0021F5r 1  rr rr        	.word	LAB_ON-1		; ON			modified command
0021F7r 1  rr rr        	.word	LAB_NULL-1		; NULL		modified command
0021F9r 1  rr rr        	.word	LAB_INC-1		; INC			new command
0021FBr 1  rr rr        	.word	LAB_WAIT-1		; WAIT
0021FDr 1  rr rr        	.word	V_LOAD-1		; LOAD
0021FFr 1  rr rr        	.word	V_SAVE-1		; SAVE
002201r 1  rr rr        	.word	LAB_DEF-1		; DEF
002203r 1  rr rr        	.word	LAB_POKE-1		; POKE
002205r 1  rr rr        	.word	LAB_DOKE-1		; DOKE		new command
002207r 1  rr rr        	.word	LAB_CALL-1		; CALL		new command
002209r 1  rr rr        	.word	LAB_DO-1		; DO			new command
00220Br 1  rr rr        	.word	LAB_LOOP-1		; LOOP		new command
00220Dr 1  rr rr        	.word	LAB_PRINT-1		; PRINT
00220Fr 1  rr rr        	.word	LAB_CONT-1		; CONT
002211r 1  rr rr        	.word	LAB_LIST-1		; LIST
002213r 1  rr rr        	.word	LAB_CLEAR-1		; CLEAR
002215r 1  rr rr        	.word	LAB_NEW-1		; NEW
002217r 1  rr rr        	.word	LAB_WDTH-1		; WIDTH		new command
002219r 1  rr rr        	.word	LAB_GET-1		; GET			new command
00221Br 1  rr rr        	.word	LAB_SWAP-1		; SWAP		new command
00221Dr 1  rr rr        	.word	LAB_BITSET-1	; BITSET		new command
00221Fr 1  rr rr        	.word	LAB_BITCLR-1	; BITCLR		new command
002221r 1  rr rr        	.word	LAB_IRQ-1		; IRQ			new command
002223r 1  rr rr        	.word	LAB_NMI-1		; NMI			new command
002225r 1               
002225r 1               ; function pre process routine table
002225r 1               
002225r 1               LAB_FTPL:
002225r 1               LAB_FTPM	= LAB_FTPL+$01
002225r 1  rr rr        	.word	LAB_PPFN-1		; SGN(n)	process numeric expression in ()
002227r 1  rr rr        	.word	LAB_PPFN-1		; INT(n)		"
002229r 1  rr rr        	.word	LAB_PPFN-1		; ABS(n)		"
00222Br 1  rr rr        	.word	LAB_EVEZ-1		; USR(x)	process any expression
00222Dr 1  rr rr        	.word	LAB_1BF7-1		; FRE(x)		"
00222Fr 1  rr rr        	.word	LAB_1BF7-1		; POS(x)		"
002231r 1  rr rr        	.word	LAB_PPFN-1		; SQR(n)	process numeric expression in ()
002233r 1  rr rr        	.word	LAB_PPFN-1		; RND(n)		"
002235r 1  rr rr        	.word	LAB_PPFN-1		; LOG(n)		"
002237r 1  rr rr        	.word	LAB_PPFN-1		; EXP(n)		"
002239r 1  rr rr        	.word	LAB_PPFN-1		; COS(n)		"
00223Br 1  rr rr        	.word	LAB_PPFN-1		; SIN(n)		"
00223Dr 1  rr rr        	.word	LAB_PPFN-1		; TAN(n)		"
00223Fr 1  rr rr        	.word	LAB_PPFN-1		; ATN(n)		"
002241r 1  rr rr        	.word	LAB_PPFN-1		; PEEK(n)		"
002243r 1  rr rr        	.word	LAB_PPFN-1		; DEEK(n)		"
002245r 1  00 00        	.word	$0000			; SADD()	none
002247r 1  rr rr        	.word	LAB_PPFS-1		; LEN($)	process string expression in ()
002249r 1  rr rr        	.word	LAB_PPFN-1		; STR$(n)	process numeric expression in ()
00224Br 1  rr rr        	.word	LAB_PPFS-1		; VAL($)	process string expression in ()
00224Dr 1  rr rr        	.word	LAB_PPFS-1		; ASC($)		"
00224Fr 1  rr rr        	.word	LAB_PPFS-1		; UCASE$($)		"
002251r 1  rr rr        	.word	LAB_PPFS-1		; LCASE$($)		"
002253r 1  rr rr        	.word	LAB_PPFN-1		; CHR$(n)	process numeric expression in ()
002255r 1  rr rr        	.word	LAB_BHSS-1		; HEX$(n)		"
002257r 1  rr rr        	.word	LAB_BHSS-1		; BIN$(n)		"
002259r 1  00 00        	.word	$0000			; BITTST()	none
00225Br 1  rr rr        	.word	LAB_MMPP-1		; MAX()	process numeric expression
00225Dr 1  rr rr        	.word	LAB_MMPP-1		; MIN()		"
00225Fr 1  rr rr        	.word	LAB_PPBI-1		; PI		advance pointer
002261r 1  rr rr        	.word	LAB_PPBI-1		; TWOPI		"
002263r 1  00 00        	.word	$0000			; VARPTR()	none
002265r 1  rr rr        	.word	LAB_LRMS-1		; LEFT$()	process string expression
002267r 1  rr rr        	.word	LAB_LRMS-1		; RIGHT$()		"
002269r 1  rr rr        	.word	LAB_LRMS-1		; MID$()		"
00226Br 1               
00226Br 1               ; action addresses for functions
00226Br 1               
00226Br 1               LAB_FTBL:
00226Br 1               LAB_FTBM	= LAB_FTBL+$01
00226Br 1  rr rr        	.word	LAB_SGN-1		; SGN()
00226Dr 1  rr rr        	.word	LAB_INT-1		; INT()
00226Fr 1  rr rr        	.word	LAB_ABS-1		; ABS()
002271r 1  rr rr        	.word	LAB_USR-1		; USR()
002273r 1  rr rr        	.word	LAB_FRE-1		; FRE()
002275r 1  rr rr        	.word	LAB_POS-1		; POS()
002277r 1  rr rr        	.word	LAB_SQR-1		; SQR()
002279r 1  rr rr        	.word	LAB_RND-1		; RND()		modified function
00227Br 1  rr rr        	.word	LAB_LOG-1		; LOG()
00227Dr 1  rr rr        	.word	LAB_EXP-1		; EXP()
00227Fr 1  rr rr        	.word	LAB_COS-1		; COS()
002281r 1  rr rr        	.word	LAB_SIN-1		; SIN()
002283r 1  rr rr        	.word	LAB_TAN-1		; TAN()
002285r 1  rr rr        	.word	LAB_ATN-1		; ATN()
002287r 1  rr rr        	.word	LAB_PEEK-1		; PEEK()
002289r 1  rr rr        	.word	LAB_DEEK-1		; DEEK()		new function
00228Br 1  rr rr        	.word	LAB_SADD-1		; SADD()		new function
00228Dr 1  rr rr        	.word	LAB_LENS-1		; LEN()
00228Fr 1  rr rr        	.word	LAB_STRS-1		; STR$()
002291r 1  rr rr        	.word	LAB_VAL-1		; VAL()
002293r 1  rr rr        	.word	LAB_ASC-1		; ASC()
002295r 1  rr rr        	.word	LAB_UCASE-1		; UCASE$()		new function
002297r 1  rr rr        	.word	LAB_LCASE-1		; LCASE$()		new function
002299r 1  rr rr        	.word	LAB_CHRS-1		; CHR$()
00229Br 1  rr rr        	.word	LAB_HEXS-1		; HEX$()		new function
00229Dr 1  rr rr        	.word	LAB_BINS-1		; BIN$()		new function
00229Fr 1  rr rr        	.word	LAB_BTST-1		; BITTST()		new function
0022A1r 1  rr rr        	.word	LAB_MAX-1		; MAX()		new function
0022A3r 1  rr rr        	.word	LAB_MIN-1		; MIN()		new function
0022A5r 1  rr rr        	.word	LAB_PI-1		; PI			new function
0022A7r 1  rr rr        	.word	LAB_TWOPI-1		; TWOPI		new function
0022A9r 1  rr rr        	.word	LAB_VARPTR-1	; VARPTR()		new function
0022ABr 1  rr rr        	.word	LAB_LEFT-1		; LEFT$()
0022ADr 1  rr rr        	.word	LAB_RIGHT-1		; RIGHT$()
0022AFr 1  rr rr        	.word	LAB_MIDS-1		; MID$()
0022B1r 1               
0022B1r 1               ; hierarchy and action addresses for operator
0022B1r 1               
0022B1r 1               LAB_OPPT:
0022B1r 1  79           	.byte	$79			; +
0022B2r 1  rr rr        	.word	LAB_ADD-1
0022B4r 1  79           	.byte	$79			; -
0022B5r 1  rr rr        	.word	LAB_SUBTRACT-1
0022B7r 1  7B           	.byte	$7B			; *
0022B8r 1  rr rr        	.word	LAB_MULTIPLY-1
0022BAr 1  7B           	.byte	$7B			; /
0022BBr 1  rr rr        	.word	LAB_DIVIDE-1
0022BDr 1  7F           	.byte	$7F			; ^
0022BEr 1  rr rr        	.word	LAB_POWER-1
0022C0r 1  50           	.byte	$50			; AND
0022C1r 1  rr rr        	.word	LAB_AND-1
0022C3r 1  46           	.byte	$46			; EOR			new operator
0022C4r 1  rr rr        	.word	LAB_EOR-1
0022C6r 1  46           	.byte	$46			; OR
0022C7r 1  rr rr        	.word	LAB_OR-1
0022C9r 1  56           	.byte	$56			; >>			new operator
0022CAr 1  rr rr        	.word	LAB_RSHIFT-1
0022CCr 1  56           	.byte	$56			; <<			new operator
0022CDr 1  rr rr        	.word	LAB_LSHIFT-1
0022CFr 1  7D           	.byte	$7D			; >
0022D0r 1  rr rr        	.word	LAB_GTHAN-1
0022D2r 1  5A           	.byte	$5A			; =
0022D3r 1  rr rr        	.word	LAB_EQUAL-1
0022D5r 1  64           	.byte	$64			; <
0022D6r 1  rr rr        	.word	LAB_LTHAN-1
0022D8r 1               
0022D8r 1               ; keywords start with ..
0022D8r 1               ; this is the first character table and must be in alphabetic order
0022D8r 1               
0022D8r 1               TAB_1STC:
0022D8r 1  2A           	.byte	"*"
0022D9r 1  2B           	.byte	"+"
0022DAr 1  2D           	.byte	"-"
0022DBr 1  2F           	.byte	"/"
0022DCr 1  3C           	.byte	"<"
0022DDr 1  3D           	.byte	"="
0022DEr 1  3E           	.byte	">"
0022DFr 1  3F           	.byte	"?"
0022E0r 1  41           	.byte	"A"
0022E1r 1  42           	.byte	"B"
0022E2r 1  43           	.byte	"C"
0022E3r 1  44           	.byte	"D"
0022E4r 1  45           	.byte	"E"
0022E5r 1  46           	.byte	"F"
0022E6r 1  47           	.byte	"G"
0022E7r 1  48           	.byte	"H"
0022E8r 1  49           	.byte	"I"
0022E9r 1  4C           	.byte	"L"
0022EAr 1  4D           	.byte	"M"
0022EBr 1  4E           	.byte	"N"
0022ECr 1  4F           	.byte	"O"
0022EDr 1  50           	.byte	"P"
0022EEr 1  52           	.byte	"R"
0022EFr 1  53           	.byte	"S"
0022F0r 1  54           	.byte	"T"
0022F1r 1  55           	.byte	"U"
0022F2r 1  56           	.byte	"V"
0022F3r 1  57           	.byte	"W"
0022F4r 1  5E           	.byte	"^"
0022F5r 1  00           	.byte	$00			; table terminator
0022F6r 1               
0022F6r 1               ; pointers to keyword tables
0022F6r 1               
0022F6r 1               TAB_CHRT:
0022F6r 1  rr rr        	.word	TAB_STAR		; table for "*"
0022F8r 1  rr rr        	.word	TAB_PLUS		; table for "+"
0022FAr 1  rr rr        	.word	TAB_MNUS		; table for "-"
0022FCr 1  rr rr        	.word	TAB_SLAS		; table for "/"
0022FEr 1  rr rr        	.word	TAB_LESS		; table for "<"
002300r 1  rr rr        	.word	TAB_EQUL		; table for "="
002302r 1  rr rr        	.word	TAB_MORE		; table for ">"
002304r 1  rr rr        	.word	TAB_QEST		; table for "?"
002306r 1  rr rr        	.word	TAB_ASCA		; table for "A"
002308r 1  rr rr        	.word	TAB_ASCB		; table for "B"
00230Ar 1  rr rr        	.word	TAB_ASCC		; table for "C"
00230Cr 1  rr rr        	.word	TAB_ASCD		; table for "D"
00230Er 1  rr rr        	.word	TAB_ASCE		; table for "E"
002310r 1  rr rr        	.word	TAB_ASCF		; table for "F"
002312r 1  rr rr        	.word	TAB_ASCG		; table for "G"
002314r 1  rr rr        	.word	TAB_ASCH		; table for "H"
002316r 1  rr rr        	.word	TAB_ASCI		; table for "I"
002318r 1  rr rr        	.word	TAB_ASCL		; table for "L"
00231Ar 1  rr rr        	.word	TAB_ASCM		; table for "M"
00231Cr 1  rr rr        	.word	TAB_ASCN		; table for "N"
00231Er 1  rr rr        	.word	TAB_ASCO		; table for "O"
002320r 1  rr rr        	.word	TAB_ASCP		; table for "P"
002322r 1  rr rr        	.word	TAB_ASCR		; table for "R"
002324r 1  rr rr        	.word	TAB_ASCS		; table for "S"
002326r 1  rr rr        	.word	TAB_ASCT		; table for "T"
002328r 1  rr rr        	.word	TAB_ASCU		; table for "U"
00232Ar 1  rr rr        	.word	TAB_ASCV		; table for "V"
00232Cr 1  rr rr        	.word	TAB_ASCW		; table for "W"
00232Er 1  rr rr        	.word	TAB_POWR		; table for "^"
002330r 1               
002330r 1               ; tables for each start character, note if a longer keyword with the same start
002330r 1               ; letters as a shorter one exists then it must come first, else the list is in
002330r 1               ; alphabetical order as follows ..
002330r 1               
002330r 1               ; [keyword,token
002330r 1               ; [keyword,token]]
002330r 1               ; end marker (#$00)
002330r 1               
002330r 1               TAB_STAR:
002330r 1  B7 00        	.byte TK_MUL,$00		; *
002332r 1               TAB_PLUS:
002332r 1  B5 00        	.byte TK_PLUS,$00		; +
002334r 1               TAB_MNUS:
002334r 1  B6 00        	.byte TK_MINUS,$00	; -
002336r 1               TAB_SLAS:
002336r 1  B8 00        	.byte TK_DIV,$00		; /
002338r 1               TAB_LESS:
002338r 1               LBB_LSHIFT:
002338r 1  3C BE        	.byte	"<",TK_LSHIFT	; <<	note - "<<" must come before "<"
00233Ar 1  C1           	.byte TK_LT			; <
00233Br 1  00           	.byte	$00
00233Cr 1               TAB_EQUL:
00233Cr 1  C0 00        	.byte TK_EQUAL,$00	; =
00233Er 1               TAB_MORE:
00233Er 1               LBB_RSHIFT:
00233Er 1  3E BD        	.byte	">",TK_RSHIFT	; >>	note - ">>" must come before ">"
002340r 1  BF           	.byte TK_GT			; >
002341r 1  00           	.byte	$00
002342r 1               TAB_QEST:
002342r 1  9F 00        	.byte TK_PRINT,$00	; ?
002344r 1               TAB_ASCA:
002344r 1               LBB_ABS:
002344r 1  42 53 28 C4  	.byte	"BS(",TK_ABS	; ABS(
002348r 1               LBB_AND:
002348r 1  4E 44 BA     	.byte	"ND",TK_AND		; AND
00234Br 1               LBB_ASC:
00234Br 1  53 43 28 D6  	.byte	"SC(",TK_ASC	; ASC(
00234Fr 1               LBB_ATN:
00234Fr 1  54 4E 28 CF  	.byte	"TN(",TK_ATN	; ATN(
002353r 1  00           	.byte	$00
002354r 1               TAB_ASCB:
002354r 1               LBB_BINS:
002354r 1  49 4E 24 28  	.byte	"IN$(",TK_BINS	; BIN$(
002358r 1  DB           
002359r 1               LBB_BITCLR:
002359r 1  49 54 43 4C  	.byte	"ITCLR",TK_BITCLR	; BITCLR
00235Dr 1  52 A8        
00235Fr 1               LBB_BITSET:
00235Fr 1  49 54 53 45  	.byte	"ITSET",TK_BITSET	; BITSET
002363r 1  54 A7        
002365r 1               LBB_BITTST:
002365r 1  49 54 54 53  	.byte	"ITTST(",TK_BITTST
002369r 1  54 28 DC     
00236Cr 1               					; BITTST(
00236Cr 1  00           	.byte	$00
00236Dr 1               TAB_ASCC:
00236Dr 1               LBB_CALL:
00236Dr 1  41 4C 4C 9C  	.byte	"ALL",TK_CALL	; CALL
002371r 1               LBB_CHRS:
002371r 1  48 52 24 28  	.byte	"HR$(",TK_CHRS	; CHR$(
002375r 1  D9           
002376r 1               LBB_CLEAR:
002376r 1  4C 45 41 52  	.byte	"LEAR",TK_CLEAR	; CLEAR
00237Ar 1  A2           
00237Br 1               LBB_CONT:
00237Br 1  4F 4E 54 A0  	.byte	"ONT",TK_CONT	; CONT
00237Fr 1               LBB_COS:
00237Fr 1  4F 53 28 CC  	.byte	"OS(",TK_COS	; COS(
002383r 1  00           	.byte	$00
002384r 1               TAB_ASCD:
002384r 1               LBB_DATA:
002384r 1  41 54 41 83  	.byte	"ATA",TK_DATA	; DATA
002388r 1               LBB_DEC:
002388r 1  45 43 88     	.byte	"EC",TK_DEC		; DEC
00238Br 1               LBB_DEEK:
00238Br 1  45 45 4B 28  	.byte	"EEK(",TK_DEEK	; DEEK(
00238Fr 1  D1           
002390r 1               LBB_DEF:
002390r 1  45 46 99     	.byte	"EF",TK_DEF		; DEF
002393r 1               LBB_DIM:
002393r 1  49 4D 85     	.byte	"IM",TK_DIM		; DIM
002396r 1               LBB_DOKE:
002396r 1  4F 4B 45 9B  	.byte	"OKE",TK_DOKE	; DOKE note - "DOKE" must come before "DO"
00239Ar 1               LBB_DO:
00239Ar 1  4F 9D        	.byte	"O",TK_DO		; DO
00239Cr 1  00           	.byte	$00
00239Dr 1               TAB_ASCE:
00239Dr 1               LBB_END:
00239Dr 1  4E 44 80     	.byte	"ND",TK_END		; END
0023A0r 1               LBB_EOR:
0023A0r 1  4F 52 BB     	.byte	"OR",TK_EOR		; EOR
0023A3r 1               LBB_EXP:
0023A3r 1  58 50 28 CB  	.byte	"XP(",TK_EXP	; EXP(
0023A7r 1  00           	.byte	$00
0023A8r 1               TAB_ASCF:
0023A8r 1               LBB_FN:
0023A8r 1  4E AD        	.byte	"N",TK_FN		; FN
0023AAr 1               LBB_FOR:
0023AAr 1  4F 52 81     	.byte	"OR",TK_FOR		; FOR
0023ADr 1               LBB_FRE:
0023ADr 1  52 45 28 C6  	.byte	"RE(",TK_FRE	; FRE(
0023B1r 1  00           	.byte	$00
0023B2r 1               TAB_ASCG:
0023B2r 1               LBB_GET:
0023B2r 1  45 54 A5     	.byte	"ET",TK_GET		; GET
0023B5r 1               LBB_GOSUB:
0023B5r 1  4F 53 55 42  	.byte	"OSUB",TK_GOSUB	; GOSUB
0023B9r 1  8D           
0023BAr 1               LBB_GOTO:
0023BAr 1  4F 54 4F 89  	.byte	"OTO",TK_GOTO	; GOTO
0023BEr 1  00           	.byte	$00
0023BFr 1               TAB_ASCH:
0023BFr 1               LBB_HEXS:
0023BFr 1  45 58 24 28  	.byte	"EX$(",TK_HEXS	; HEX$(
0023C3r 1  DA           
0023C4r 1  00           	.byte	$00
0023C5r 1               TAB_ASCI:
0023C5r 1               LBB_IF:
0023C5r 1  46 8B        	.byte	"F",TK_IF		; IF
0023C7r 1               LBB_INC:
0023C7r 1  4E 43 95     	.byte	"NC",TK_INC		; INC
0023CAr 1               LBB_INPUT:
0023CAr 1  4E 50 55 54  	.byte	"NPUT",TK_INPUT	; INPUT
0023CEr 1  84           
0023CFr 1               LBB_INT:
0023CFr 1  4E 54 28 C3  	.byte	"NT(",TK_INT	; INT(
0023D3r 1               LBB_IRQ:
0023D3r 1  52 51 A9     	.byte	"RQ",TK_IRQ		; IRQ
0023D6r 1  00           	.byte	$00
0023D7r 1               TAB_ASCL:
0023D7r 1               LBB_LCASES:
0023D7r 1  43 41 53 45  	.byte	"CASE$(",TK_LCASES
0023DBr 1  24 28 D8     
0023DEr 1               					; LCASE$(
0023DEr 1               LBB_LEFTS:
0023DEr 1  45 46 54 24  	.byte	"EFT$(",TK_LEFTS	; LEFT$(
0023E2r 1  28 E2        
0023E4r 1               LBB_LEN:
0023E4r 1  45 4E 28 D3  	.byte	"EN(",TK_LEN	; LEN(
0023E8r 1               LBB_LET:
0023E8r 1  45 54 87     	.byte	"ET",TK_LET		; LET
0023EBr 1               LBB_LIST:
0023EBr 1  49 53 54 A1  	.byte	"IST",TK_LIST	; LIST
0023EFr 1               LBB_LOAD:
0023EFr 1  4F 41 44 97  	.byte	"OAD",TK_LOAD	; LOAD
0023F3r 1               LBB_LOG:
0023F3r 1  4F 47 28 CA  	.byte	"OG(",TK_LOG	; LOG(
0023F7r 1               LBB_LOOP:
0023F7r 1  4F 4F 50 9E  	.byte	"OOP",TK_LOOP	; LOOP
0023FBr 1  00           	.byte	$00
0023FCr 1               TAB_ASCM:
0023FCr 1               LBB_MAX:
0023FCr 1  41 58 28 DD  	.byte	"AX(",TK_MAX	; MAX(
002400r 1               LBB_MIDS:
002400r 1  49 44 24 28  	.byte	"ID$(",TK_MIDS	; MID$(
002404r 1  E4           
002405r 1               LBB_MIN:
002405r 1  49 4E 28 DE  	.byte	"IN(",TK_MIN	; MIN(
002409r 1  00           	.byte	$00
00240Ar 1               TAB_ASCN:
00240Ar 1               LBB_NEW:
00240Ar 1  45 57 A3     	.byte	"EW",TK_NEW		; NEW
00240Dr 1               LBB_NEXT:
00240Dr 1  45 58 54 82  	.byte	"EXT",TK_NEXT	; NEXT
002411r 1               LBB_NMI:
002411r 1  4D 49 AA     	.byte	"MI",TK_NMI		; NMI
002414r 1               LBB_NOT:
002414r 1  4F 54 B0     	.byte	"OT",TK_NOT		; NOT
002417r 1               LBB_NULL:
002417r 1  55 4C 4C 94  	.byte	"ULL",TK_NULL	; NULL
00241Br 1  00           	.byte	$00
00241Cr 1               TAB_ASCO:
00241Cr 1               LBB_OFF:
00241Cr 1  46 46 B4     	.byte	"FF",TK_OFF		; OFF
00241Fr 1               LBB_ON:
00241Fr 1  4E 93        	.byte	"N",TK_ON		; ON
002421r 1               LBB_OR:
002421r 1  52 BC        	.byte	"R",TK_OR		; OR
002423r 1  00           	.byte	$00
002424r 1               TAB_ASCP:
002424r 1               LBB_PEEK:
002424r 1  45 45 4B 28  	.byte	"EEK(",TK_PEEK	; PEEK(
002428r 1  D0           
002429r 1               LBB_PI:
002429r 1  49 DF        	.byte	"I",TK_PI		; PI
00242Br 1               LBB_POKE:
00242Br 1  4F 4B 45 9A  	.byte	"OKE",TK_POKE	; POKE
00242Fr 1               LBB_POS:
00242Fr 1  4F 53 28 C7  	.byte	"OS(",TK_POS	; POS(
002433r 1               LBB_PRINT:
002433r 1  52 49 4E 54  	.byte	"RINT",TK_PRINT	; PRINT
002437r 1  9F           
002438r 1  00           	.byte	$00
002439r 1               TAB_ASCR:
002439r 1               LBB_READ:
002439r 1  45 41 44 86  	.byte	"EAD",TK_READ	; READ
00243Dr 1               LBB_REM:
00243Dr 1  45 4D 91     	.byte	"EM",TK_REM		; REM
002440r 1               LBB_RESTORE:
002440r 1  45 53 54 4F  	.byte	"ESTORE",TK_RESTORE
002444r 1  52 45 8C     
002447r 1               					; RESTORE
002447r 1               LBB_RETIRQ:
002447r 1  45 54 49 52  	.byte	"ETIRQ",TK_RETIRQ	; RETIRQ
00244Br 1  51 8E        
00244Dr 1               LBB_RETNMI:
00244Dr 1  45 54 4E 4D  	.byte	"ETNMI",TK_RETNMI	; RETNMI
002451r 1  49 8F        
002453r 1               LBB_RETURN:
002453r 1  45 54 55 52  	.byte	"ETURN",TK_RETURN	; RETURN
002457r 1  4E 90        
002459r 1               LBB_RIGHTS:
002459r 1  49 47 48 54  	.byte	"IGHT$(",TK_RIGHTS
00245Dr 1  24 28 E3     
002460r 1               					; RIGHT$(
002460r 1               LBB_RND:
002460r 1  4E 44 28 C9  	.byte	"ND(",TK_RND	; RND(
002464r 1               LBB_RUN:
002464r 1  55 4E 8A     	.byte	"UN",TK_RUN		; RUN
002467r 1  00           	.byte	$00
002468r 1               TAB_ASCS:
002468r 1               LBB_SADD:
002468r 1  41 44 44 28  	.byte	"ADD(",TK_SADD	; SADD(
00246Cr 1  D2           
00246Dr 1               LBB_SAVE:
00246Dr 1  41 56 45 98  	.byte	"AVE",TK_SAVE	; SAVE
002471r 1               LBB_SGN:
002471r 1  47 4E 28 C2  	.byte	"GN(",TK_SGN	; SGN(
002475r 1               LBB_SIN:
002475r 1  49 4E 28 CD  	.byte	"IN(",TK_SIN	; SIN(
002479r 1               LBB_SPC:
002479r 1  50 43 28 AE  	.byte	"PC(",TK_SPC	; SPC(
00247Dr 1               LBB_SQR:
00247Dr 1  51 52 28 C8  	.byte	"QR(",TK_SQR	; SQR(
002481r 1               LBB_STEP:
002481r 1  54 45 50 B1  	.byte	"TEP",TK_STEP	; STEP
002485r 1               LBB_STOP:
002485r 1  54 4F 50 92  	.byte	"TOP",TK_STOP	; STOP
002489r 1               LBB_STRS:
002489r 1  54 52 24 28  	.byte	"TR$(",TK_STRS	; STR$(
00248Dr 1  D4           
00248Er 1               LBB_SWAP:
00248Er 1  57 41 50 A6  	.byte	"WAP",TK_SWAP	; SWAP
002492r 1  00           	.byte	$00
002493r 1               TAB_ASCT:
002493r 1               LBB_TAB:
002493r 1  41 42 28 AB  	.byte	"AB(",TK_TAB	; TAB(
002497r 1               LBB_TAN:
002497r 1  41 4E 28 CE  	.byte	"AN(",TK_TAN	; TAN(
00249Br 1               LBB_THEN:
00249Br 1  48 45 4E AF  	.byte	"HEN",TK_THEN	; THEN
00249Fr 1               LBB_TO:
00249Fr 1  4F AC        	.byte	"O",TK_TO		; TO
0024A1r 1               LBB_TWOPI:
0024A1r 1  57 4F 50 49  	.byte	"WOPI",TK_TWOPI	; TWOPI
0024A5r 1  E0           
0024A6r 1  00           	.byte	$00
0024A7r 1               TAB_ASCU:
0024A7r 1               LBB_UCASES:
0024A7r 1  43 41 53 45  	.byte	"CASE$(",TK_UCASES
0024ABr 1  24 28 D7     
0024AEr 1               					; UCASE$(
0024AEr 1               LBB_UNTIL:
0024AEr 1  4E 54 49 4C  	.byte	"NTIL",TK_UNTIL	; UNTIL
0024B2r 1  B2           
0024B3r 1               LBB_USR:
0024B3r 1  53 52 28 C5  	.byte	"SR(",TK_USR	; USR(
0024B7r 1  00           	.byte	$00
0024B8r 1               TAB_ASCV:
0024B8r 1               LBB_VAL:
0024B8r 1  41 4C 28 D5  	.byte	"AL(",TK_VAL	; VAL(
0024BCr 1               LBB_VPTR:
0024BCr 1  41 52 50 54  	.byte	"ARPTR(",TK_VPTR	; VARPTR(
0024C0r 1  52 28 E1     
0024C3r 1  00           	.byte	$00
0024C4r 1               TAB_ASCW:
0024C4r 1               LBB_WAIT:
0024C4r 1  41 49 54 96  	.byte	"AIT",TK_WAIT	; WAIT
0024C8r 1               LBB_WHILE:
0024C8r 1  48 49 4C 45  	.byte	"HILE",TK_WHILE	; WHILE
0024CCr 1  B3           
0024CDr 1               LBB_WIDTH:
0024CDr 1  49 44 54 48  	.byte	"IDTH",TK_WIDTH	; WIDTH
0024D1r 1  A4           
0024D2r 1  00           	.byte	$00
0024D3r 1               TAB_POWR:
0024D3r 1  B9 00        	.byte	TK_POWER,$00	; ^
0024D5r 1               
0024D5r 1               ; new decode table for LIST
0024D5r 1               ; Table is ..
0024D5r 1               ; byte - keyword length, keyword first character
0024D5r 1               ; word - pointer to rest of keyword from dictionary
0024D5r 1               
0024D5r 1               ; note if length is 1 then the pointer is ignored
0024D5r 1               
0024D5r 1               LAB_KEYT:
0024D5r 1  03 45        	.byte	3,'E'
0024D7r 1  rr rr        	.word	LBB_END		; END
0024D9r 1  03 46        	.byte	3,'F'
0024DBr 1  rr rr        	.word	LBB_FOR		; FOR
0024DDr 1  04 4E        	.byte	4,'N'
0024DFr 1  rr rr        	.word	LBB_NEXT		; NEXT
0024E1r 1  04 44        	.byte	4,'D'
0024E3r 1  rr rr        	.word	LBB_DATA		; DATA
0024E5r 1  05 49        	.byte	5,'I'
0024E7r 1  rr rr        	.word	LBB_INPUT		; INPUT
0024E9r 1  03 44        	.byte	3,'D'
0024EBr 1  rr rr        	.word	LBB_DIM		; DIM
0024EDr 1  04 52        	.byte	4,'R'
0024EFr 1  rr rr        	.word	LBB_READ		; READ
0024F1r 1  03 4C        	.byte	3,'L'
0024F3r 1  rr rr        	.word	LBB_LET		; LET
0024F5r 1  03 44        	.byte	3,'D'
0024F7r 1  rr rr        	.word	LBB_DEC		; DEC
0024F9r 1  04 47        	.byte	4,'G'
0024FBr 1  rr rr        	.word	LBB_GOTO		; GOTO
0024FDr 1  03 52        	.byte	3,'R'
0024FFr 1  rr rr        	.word	LBB_RUN		; RUN
002501r 1  02 49        	.byte	2,'I'
002503r 1  rr rr        	.word	LBB_IF		; IF
002505r 1  07 52        	.byte	7,'R'
002507r 1  rr rr        	.word	LBB_RESTORE		; RESTORE
002509r 1  05 47        	.byte	5,'G'
00250Br 1  rr rr        	.word	LBB_GOSUB		; GOSUB
00250Dr 1  06 52        	.byte	6,'R'
00250Fr 1  rr rr        	.word	LBB_RETIRQ		; RETIRQ
002511r 1  06 52        	.byte	6,'R'
002513r 1  rr rr        	.word	LBB_RETNMI		; RETNMI
002515r 1  06 52        	.byte	6,'R'
002517r 1  rr rr        	.word	LBB_RETURN		; RETURN
002519r 1  03 52        	.byte	3,'R'
00251Br 1  rr rr        	.word	LBB_REM		; REM
00251Dr 1  04 53        	.byte	4,'S'
00251Fr 1  rr rr        	.word	LBB_STOP		; STOP
002521r 1  02 4F        	.byte	2,'O'
002523r 1  rr rr        	.word	LBB_ON		; ON
002525r 1  04 4E        	.byte	4,'N'
002527r 1  rr rr        	.word	LBB_NULL		; NULL
002529r 1  03 49        	.byte	3,'I'
00252Br 1  rr rr        	.word	LBB_INC		; INC
00252Dr 1  04 57        	.byte	4,'W'
00252Fr 1  rr rr        	.word	LBB_WAIT		; WAIT
002531r 1  04 4C        	.byte	4,'L'
002533r 1  rr rr        	.word	LBB_LOAD		; LOAD
002535r 1  04 53        	.byte	4,'S'
002537r 1  rr rr        	.word	LBB_SAVE		; SAVE
002539r 1  03 44        	.byte	3,'D'
00253Br 1  rr rr        	.word	LBB_DEF		; DEF
00253Dr 1  04 50        	.byte	4,'P'
00253Fr 1  rr rr        	.word	LBB_POKE		; POKE
002541r 1  04 44        	.byte	4,'D'
002543r 1  rr rr        	.word	LBB_DOKE		; DOKE
002545r 1  04 43        	.byte	4,'C'
002547r 1  rr rr        	.word	LBB_CALL		; CALL
002549r 1  02 44        	.byte	2,'D'
00254Br 1  rr rr        	.word	LBB_DO		; DO
00254Dr 1  04 4C        	.byte	4,'L'
00254Fr 1  rr rr        	.word	LBB_LOOP		; LOOP
002551r 1  05 50        	.byte	5,'P'
002553r 1  rr rr        	.word	LBB_PRINT		; PRINT
002555r 1  04 43        	.byte	4,'C'
002557r 1  rr rr        	.word	LBB_CONT		; CONT
002559r 1  04 4C        	.byte	4,'L'
00255Br 1  rr rr        	.word	LBB_LIST		; LIST
00255Dr 1  05 43        	.byte	5,'C'
00255Fr 1  rr rr        	.word	LBB_CLEAR		; CLEAR
002561r 1  03 4E        	.byte	3,'N'
002563r 1  rr rr        	.word	LBB_NEW		; NEW
002565r 1  05 57        	.byte	5,'W'
002567r 1  rr rr        	.word	LBB_WIDTH		; WIDTH
002569r 1  03 47        	.byte	3,'G'
00256Br 1  rr rr        	.word	LBB_GET		; GET
00256Dr 1  04 53        	.byte	4,'S'
00256Fr 1  rr rr        	.word	LBB_SWAP		; SWAP
002571r 1  06 42        	.byte	6,'B'
002573r 1  rr rr        	.word	LBB_BITSET		; BITSET
002575r 1  06 42        	.byte	6,'B'
002577r 1  rr rr        	.word	LBB_BITCLR		; BITCLR
002579r 1  03 49        	.byte	3,'I'
00257Br 1  rr rr        	.word	LBB_IRQ		; IRQ
00257Dr 1  03 4E        	.byte	3,'N'
00257Fr 1  rr rr        	.word	LBB_NMI		; NMI
002581r 1               
002581r 1               ; secondary commands (can't start a statement)
002581r 1               
002581r 1  04 54        	.byte	4,'T'
002583r 1  rr rr        	.word	LBB_TAB		; TAB
002585r 1  02 54        	.byte	2,'T'
002587r 1  rr rr        	.word	LBB_TO		; TO
002589r 1  02 46        	.byte	2,'F'
00258Br 1  rr rr        	.word	LBB_FN		; FN
00258Dr 1  04 53        	.byte	4,'S'
00258Fr 1  rr rr        	.word	LBB_SPC		; SPC
002591r 1  04 54        	.byte	4,'T'
002593r 1  rr rr        	.word	LBB_THEN		; THEN
002595r 1  03 4E        	.byte	3,'N'
002597r 1  rr rr        	.word	LBB_NOT		; NOT
002599r 1  04 53        	.byte	4,'S'
00259Br 1  rr rr        	.word	LBB_STEP		; STEP
00259Dr 1  05 55        	.byte	5,'U'
00259Fr 1  rr rr        	.word	LBB_UNTIL		; UNTIL
0025A1r 1  05 57        	.byte	5,'W'
0025A3r 1  rr rr        	.word	LBB_WHILE		; WHILE
0025A5r 1  03 4F        	.byte	3,'O'
0025A7r 1  rr rr        	.word	LBB_OFF		; OFF
0025A9r 1               
0025A9r 1               ; opperators
0025A9r 1               
0025A9r 1  01 2B        	.byte	1,'+'
0025ABr 1  00 00        	.word	$0000			; +
0025ADr 1  01 2D        	.byte	1,'-'
0025AFr 1  00 00        	.word	$0000			; -
0025B1r 1  01 2A        	.byte	1,'*'
0025B3r 1  00 00        	.word	$0000			; *
0025B5r 1  01 2F        	.byte	1,'/'
0025B7r 1  00 00        	.word	$0000			; /
0025B9r 1  01 5E        	.byte	1,'^'
0025BBr 1  00 00        	.word	$0000			; ^
0025BDr 1  03 41        	.byte	3,'A'
0025BFr 1  rr rr        	.word	LBB_AND		; AND
0025C1r 1  03 45        	.byte	3,'E'
0025C3r 1  rr rr        	.word	LBB_EOR		; EOR
0025C5r 1  02 4F        	.byte	2,'O'
0025C7r 1  rr rr        	.word	LBB_OR		; OR
0025C9r 1  02 3E        	.byte	2,'>'
0025CBr 1  rr rr        	.word	LBB_RSHIFT		; >>
0025CDr 1  02 3C        	.byte	2,'<'
0025CFr 1  rr rr        	.word	LBB_LSHIFT		; <<
0025D1r 1  01 3E        	.byte	1,'>'
0025D3r 1  00 00        	.word	$0000			; >
0025D5r 1  01 3D        	.byte	1,'='
0025D7r 1  00 00        	.word	$0000			; =
0025D9r 1  01 3C        	.byte	1,'<'
0025DBr 1  00 00        	.word	$0000			; <
0025DDr 1               
0025DDr 1               ; functions
0025DDr 1               
0025DDr 1  04 53        	.byte	4,'S'			;
0025DFr 1  rr rr        	.word	LBB_SGN		; SGN
0025E1r 1  04 49        	.byte	4,'I'			;
0025E3r 1  rr rr        	.word	LBB_INT		; INT
0025E5r 1  04 41        	.byte	4,'A'			;
0025E7r 1  rr rr        	.word	LBB_ABS		; ABS
0025E9r 1  04 55        	.byte	4,'U'			;
0025EBr 1  rr rr        	.word	LBB_USR		; USR
0025EDr 1  04 46        	.byte	4,'F'			;
0025EFr 1  rr rr        	.word	LBB_FRE		; FRE
0025F1r 1  04 50        	.byte	4,'P'			;
0025F3r 1  rr rr        	.word	LBB_POS		; POS
0025F5r 1  04 53        	.byte	4,'S'			;
0025F7r 1  rr rr        	.word	LBB_SQR		; SQR
0025F9r 1  04 52        	.byte	4,'R'			;
0025FBr 1  rr rr        	.word	LBB_RND		; RND
0025FDr 1  04 4C        	.byte	4,'L'			;
0025FFr 1  rr rr        	.word	LBB_LOG		; LOG
002601r 1  04 45        	.byte	4,'E'			;
002603r 1  rr rr        	.word	LBB_EXP		; EXP
002605r 1  04 43        	.byte	4,'C'			;
002607r 1  rr rr        	.word	LBB_COS		; COS
002609r 1  04 53        	.byte	4,'S'			;
00260Br 1  rr rr        	.word	LBB_SIN		; SIN
00260Dr 1  04 54        	.byte	4,'T'			;
00260Fr 1  rr rr        	.word	LBB_TAN		; TAN
002611r 1  04 41        	.byte	4,'A'			;
002613r 1  rr rr        	.word	LBB_ATN		; ATN
002615r 1  05 50        	.byte	5,'P'			;
002617r 1  rr rr        	.word	LBB_PEEK		; PEEK
002619r 1  05 44        	.byte	5,'D'			;
00261Br 1  rr rr        	.word	LBB_DEEK		; DEEK
00261Dr 1  05 53        	.byte	5,'S'			;
00261Fr 1  rr rr        	.word	LBB_SADD		; SADD
002621r 1  04 4C        	.byte	4,'L'			;
002623r 1  rr rr        	.word	LBB_LEN		; LEN
002625r 1  05 53        	.byte	5,'S'			;
002627r 1  rr rr        	.word	LBB_STRS		; STR$
002629r 1  04 56        	.byte	4,'V'			;
00262Br 1  rr rr        	.word	LBB_VAL		; VAL
00262Dr 1  04 41        	.byte	4,'A'			;
00262Fr 1  rr rr        	.word	LBB_ASC		; ASC
002631r 1  07 55        	.byte	7,'U'			;
002633r 1  rr rr        	.word	LBB_UCASES		; UCASE$
002635r 1  07 4C        	.byte	7,'L'			;
002637r 1  rr rr        	.word	LBB_LCASES		; LCASE$
002639r 1  05 43        	.byte	5,'C'			;
00263Br 1  rr rr        	.word	LBB_CHRS		; CHR$
00263Dr 1  05 48        	.byte	5,'H'			;
00263Fr 1  rr rr        	.word	LBB_HEXS		; HEX$
002641r 1  05 42        	.byte	5,'B'			;
002643r 1  rr rr        	.word	LBB_BINS		; BIN$
002645r 1  07 42        	.byte	7,'B'			;
002647r 1  rr rr        	.word	LBB_BITTST		; BITTST
002649r 1  04 4D        	.byte	4,'M'			;
00264Br 1  rr rr        	.word	LBB_MAX		; MAX
00264Dr 1  04 4D        	.byte	4,'M'			;
00264Fr 1  rr rr        	.word	LBB_MIN		; MIN
002651r 1  02 50        	.byte	2,'P'			;
002653r 1  rr rr        	.word	LBB_PI		; PI
002655r 1  05 54        	.byte	5,'T'			;
002657r 1  rr rr        	.word	LBB_TWOPI		; TWOPI
002659r 1  07 56        	.byte	7,'V'			;
00265Br 1  rr rr        	.word	LBB_VPTR		; VARPTR
00265Dr 1  06 4C        	.byte	6,'L'			;
00265Fr 1  rr rr        	.word	LBB_LEFTS		; LEFT$
002661r 1  07 52        	.byte	7,'R'			;
002663r 1  rr rr        	.word	LBB_RIGHTS		; RIGHT$
002665r 1  05 4D        	.byte	5,'M'			;
002667r 1  rr rr        	.word	LBB_MIDS		; MID$
002669r 1               
002669r 1               ; BASIC messages, mostly error messages
002669r 1               
002669r 1               LAB_BAER:
002669r 1  rr rr        	.word	ERR_NF		;$00 NEXT without FOR
00266Br 1  rr rr        	.word	ERR_SN		;$02 syntax
00266Dr 1  rr rr        	.word	ERR_RG		;$04 RETURN without GOSUB
00266Fr 1  rr rr        	.word	ERR_OD		;$06 out of data
002671r 1  rr rr        	.word	ERR_FC		;$08 function call
002673r 1  rr rr        	.word	ERR_OV		;$0A overflow
002675r 1  rr rr        	.word	ERR_OM		;$0C out of memory
002677r 1  rr rr        	.word	ERR_US		;$0E undefined statement
002679r 1  rr rr        	.word	ERR_BS		;$10 array bounds
00267Br 1  rr rr        	.word	ERR_DD		;$12 double dimension array
00267Dr 1  rr rr        	.word	ERR_D0		;$14 divide by 0
00267Fr 1  rr rr        	.word	ERR_ID		;$16 illegal direct
002681r 1  rr rr        	.word	ERR_TM		;$18 type mismatch
002683r 1  rr rr        	.word	ERR_LS		;$1A long string
002685r 1  rr rr        	.word	ERR_ST		;$1C string too complex
002687r 1  rr rr        	.word	ERR_CN		;$1E continue error
002689r 1  rr rr        	.word	ERR_UF		;$20 undefined function
00268Br 1  rr rr        	.word ERR_LD		;$22 LOOP without DO
00268Dr 1               
00268Dr 1               ; I may implement these two errors to force definition of variables and
00268Dr 1               ; dimensioning of arrays before use.
00268Dr 1               
00268Dr 1               ;	.word ERR_UV		;$24 undefined variable
00268Dr 1               
00268Dr 1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
00268Dr 1               
00268Dr 1               ;	.word ERR_UA		;$26 undimensioned array
00268Dr 1               
00268Dr 1  4E 45 58 54  ERR_NF:	.byte	"NEXT without FOR",$00
002691r 1  20 77 69 74  
002695r 1  68 6F 75 74  
00269Er 1  53 79 6E 74  ERR_SN:	.byte	"Syntax",$00
0026A2r 1  61 78 00     
0026A5r 1  52 45 54 55  ERR_RG:	.byte	"RETURN without GOSUB",$00
0026A9r 1  52 4E 20 77  
0026ADr 1  69 74 68 6F  
0026BAr 1  4F 75 74 20  ERR_OD:	.byte	"Out of DATA",$00
0026BEr 1  6F 66 20 44  
0026C2r 1  41 54 41 00  
0026C6r 1  46 75 6E 63  ERR_FC:	.byte	"Function call",$00
0026CAr 1  74 69 6F 6E  
0026CEr 1  20 63 61 6C  
0026D4r 1  4F 76 65 72  ERR_OV:	.byte	"Overflow",$00
0026D8r 1  66 6C 6F 77  
0026DCr 1  00           
0026DDr 1  4F 75 74 20  ERR_OM:	.byte	"Out of memory",$00
0026E1r 1  6F 66 20 6D  
0026E5r 1  65 6D 6F 72  
0026EBr 1  55 6E 64 65  ERR_US:	.byte	"Undefined statement",$00
0026EFr 1  66 69 6E 65  
0026F3r 1  64 20 73 74  
0026FFr 1  41 72 72 61  ERR_BS:	.byte	"Array bounds",$00
002703r 1  79 20 62 6F  
002707r 1  75 6E 64 73  
00270Cr 1  44 6F 75 62  ERR_DD:	.byte	"Double dimension",$00
002710r 1  6C 65 20 64  
002714r 1  69 6D 65 6E  
00271Dr 1  44 69 76 69  ERR_D0:	.byte	"Divide by zero",$00
002721r 1  64 65 20 62  
002725r 1  79 20 7A 65  
00272Cr 1  49 6C 6C 65  ERR_ID:	.byte	"Illegal direct",$00
002730r 1  67 61 6C 20  
002734r 1  64 69 72 65  
00273Br 1  54 79 70 65  ERR_TM:	.byte	"Type mismatch",$00
00273Fr 1  20 6D 69 73  
002743r 1  6D 61 74 63  
002749r 1  53 74 72 69  ERR_LS:	.byte	"String too long",$00
00274Dr 1  6E 67 20 74  
002751r 1  6F 6F 20 6C  
002759r 1  53 74 72 69  ERR_ST:	.byte	"String too complex",$00
00275Dr 1  6E 67 20 74  
002761r 1  6F 6F 20 63  
00276Cr 1  43 61 6E 27  ERR_CN:	.byte	"Can't continue",$00
002770r 1  74 20 63 6F  
002774r 1  6E 74 69 6E  
00277Br 1  55 6E 64 65  ERR_UF:	.byte	"Undefined function",$00
00277Fr 1  66 69 6E 65  
002783r 1  64 20 66 75  
00278Er 1  4C 4F 4F 50  ERR_LD:	.byte	"LOOP without DO",$00
002792r 1  20 77 69 74  
002796r 1  68 6F 75 74  
00279Er 1               
00279Er 1               ;ERR_UV	.byte	"Undefined variable",$00
00279Er 1               
00279Er 1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
00279Er 1               
00279Er 1               ;ERR_UA	.byte	"Undimensioned array",$00
00279Er 1               
00279Er 1  0D 0A 42 72  LAB_BMSG:	.byte	$0D,$0A,"Break",$00
0027A2r 1  65 61 6B 00  
0027A6r 1  20 45 72 72  LAB_EMSG:	.byte	" Error",$00
0027AAr 1  6F 72 00     
0027ADr 1  20 69 6E 20  LAB_LMSG:	.byte	" in line ",$00
0027B1r 1  6C 69 6E 65  
0027B5r 1  20 00        
0027B7r 1  0D 0A 52 65  LAB_RMSG:	.byte	$0D,$0A,"Ready",$0D,$0A,$00
0027BBr 1  61 64 79 0D  
0027BFr 1  0A 00        
0027C1r 1               
0027C1r 1  20 45 78 74  LAB_IMSG:	.byte	" Extra ignored",$0D,$0A,$00
0027C5r 1  72 61 20 69  
0027C9r 1  67 6E 6F 72  
0027D2r 1  20 52 65 64  LAB_REDO:	.byte	" Redo from start",$0D,$0A,$00
0027D6r 1  6F 20 66 72  
0027DAr 1  6F 6D 20 73  
0027E5r 1               
0027E5r 1               AA_end_basic:
0027E5r 1               
0027E5r 1  60           crts:	rts
0027E6r 1               
0027E6r 1               fini:
0027E6r 1               .data
000000r 1               .bss
000000r 1               
000000r 1               
