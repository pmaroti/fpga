ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : nrom.s
Current file: nrom.s

000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define the I/O registres
000000r 1               	UTXD	=	$E000
000000r 1               	URXD	=	$E000
000000r 1               	USTAT	=	$E001
000000r 1               	BORDER	=	$E001
000000r 1               	CTRL1	=	$E002
000000r 1               	STAT1	=	$E002
000000r 1               	CTRL2	=	$E003
000000r 1               	STAT2	=	$E003
000000r 1               	PINOUT	=	$E004
000000r 1               	PININ	=	$E005
000000r 1               	PAL0	=	$E005
000000r 1               	PAL1	=	$E006
000000r 1               	PWM	=	$E007
000000r 1               	KBD	=	$E007
000000r 1               	PAGE0	=	$E008
000000r 1               	PAGE1	=	$E009
000000r 1               	PAGE2	=	$E00A
000000r 1               	PAGE3	=	$E00B
000000r 1               	PAGE4	=	$E00C
000000r 1               	PAGE5	=	$E00D
000000r 1               	PAGE6	=	$E00E
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define the ZP variables
000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1               zpstart	= *
000000r 1  xx           tmp1:	      	.res	1	; $00  Estas variables se salvan en pila
000001r 1  xx           tmp2:	      	.res	1	; $01  si se entra en el monitor
000002r 1  xx           tmp3:	      	.res	1	; $02  |
000003r 1  xx           tmp4:	      	.res	1	; $03  |
000004r 1  xx xx        ptr1:	      	.res	2	; $04  |
000006r 1  xx xx        ptr2:	      	.res	2	; $06  |
000008r 1  xx xx        ptr3:	      	.res	2	; $08  |
00000Ar 1               ; Variables de prop√≥sito general usadas en rutinas de video
00000Ar 1  xx           tmp5:	      	.res	1	; $0A
00000Br 1  xx xx        ptr4:	      	.res	2	; $0B
00000Dr 1  xx xx        ptr5:	      	.res	2	; $0D
00000Fr 1               ; Variables del sistema
00000Fr 1  xx           tposx:		.res	1	; $0F  text position X (in chars)
000010r 1  xx           tposy:		.res	1	; $10  text position Y (in chars)
000011r 1  xx           cinflg:		.res	1	; $11  UART RX flags (via IRQ)
000012r 1  xx           urxd:		.res	1	; $12  UART RX data (via IRQ)
000013r 1  xx xx xx     brkp:		.res	3	; $13  Breakpoint address and op-code copy
000016r 1  xx           spare:		.res	1	; $16
000017r 1  xx           coltxt:		.res	1	; $17  Text columns -1 (for monochrome mode)
000018r 1  xx           iochan:		.res	1	; $18  canales de E/S (4 bit out, 4 bit in)
000019r 1  xx           scankey:	.res	1	; $19  Scancode teclado
00001Ar 1  xx           oscank:		.res	1	; $1A  Scancode anterior
00001Br 1  xx           modkey:		.res	1	; $1B  Modificadores del teclado (Mayusculas, ctrl,...)
00001Cr 1  xx           keyrx:		.res	1	; $1C  Caracter tecleado
00001Dr 1               
00001Dr 1               	.exportzp tposx, tposy, cinflg, urxd, brkp, endzp
00001Dr 1               endzp:
00001Dr 1               
00001Dr 1               
00001Dr 1               ; ------------------------------------------------------------------------
00001Dr 1               ; ------------------------------------------------------------------------
00001Dr 1               
00001Dr 1               .segment	"INIT"
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               .code
000000r 1               
000000r 1  xx xx xx xx  	.res	16	; Espacio para I/O
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
000010r 1               ;-----------------------------------------------------------------------
000010r 1               ;-----------------------------------------------------------------------
000010r 1               ;			VIDEO routines
000010r 1               ;-----------------------------------------------------------------------
000010r 1               ;-----------------------------------------------------------------------
000010r 1               
000010r 1               	.include "video.s"
000010r 2               	.include "font8x16.inc"
000010r 3               	.export font8x16
000010r 3               font8x16:
000010r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
000014r 3  00 00 00 00  
000018r 3  00 00 00 00  
000020r 3  00 00 18 3C  	.byte $00,$00,$18,$3C,$3C,$3C,$18,$18, $18,$00,$18,$18,$00,$00,$00,$00
000024r 3  3C 3C 18 18  
000028r 3  18 00 18 18  
000030r 3  00 66 66 66  	.byte $00,$66,$66,$66,$24,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
000034r 3  24 00 00 00  
000038r 3  00 00 00 00  
000040r 3  00 00 00 6C  	.byte $00,$00,$00,$6C,$6C,$FE,$6C,$6C, $6C,$FE,$6C,$6C,$00,$00,$00,$00
000044r 3  6C FE 6C 6C  
000048r 3  6C FE 6C 6C  
000050r 3  18 18 7C C6  	.byte $18,$18,$7C,$C6,$C2,$C0,$7C,$06, $06,$86,$C6,$7C,$18,$18,$00,$00
000054r 3  C2 C0 7C 06  
000058r 3  06 86 C6 7C  
000060r 3  00 00 00 00  	.byte $00,$00,$00,$00,$C2,$C6,$0C,$18, $30,$60,$C6,$86,$00,$00,$00,$00
000064r 3  C2 C6 0C 18  
000068r 3  30 60 C6 86  
000070r 3  00 00 38 6C  	.byte $00,$00,$38,$6C,$6C,$38,$76,$DC, $CC,$CC,$CC,$76,$00,$00,$00,$00
000074r 3  6C 38 76 DC  
000078r 3  CC CC CC 76  
000080r 3  00 30 30 30  	.byte $00,$30,$30,$30,$60,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
000084r 3  60 00 00 00  
000088r 3  00 00 00 00  
000090r 3  00 00 0C 18  	.byte $00,$00,$0C,$18,$30,$30,$30,$30, $30,$30,$18,$0C,$00,$00,$00,$00
000094r 3  30 30 30 30  
000098r 3  30 30 18 0C  
0000A0r 3  00 00 30 18  	.byte $00,$00,$30,$18,$0C,$0C,$0C,$0C, $0C,$0C,$18,$30,$00,$00,$00,$00
0000A4r 3  0C 0C 0C 0C  
0000A8r 3  0C 0C 18 30  
0000B0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$66,$3C,$FF, $3C,$66,$00,$00,$00,$00,$00,$00
0000B4r 3  00 66 3C FF  
0000B8r 3  3C 66 00 00  
0000C0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$18,$18,$7E, $18,$18,$00,$00,$00,$00,$00,$00
0000C4r 3  00 18 18 7E  
0000C8r 3  18 18 00 00  
0000D0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00, $00,$18,$18,$18,$30,$00,$00,$00
0000D4r 3  00 00 00 00  
0000D8r 3  00 18 18 18  
0000E0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$FE, $00,$00,$00,$00,$00,$00,$00,$00
0000E4r 3  00 00 00 FE  
0000E8r 3  00 00 00 00  
0000F0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00, $00,$00,$18,$18,$00,$00,$00,$00
0000F4r 3  00 00 00 00  
0000F8r 3  00 00 18 18  
000100r 3  00 00 00 00  	.byte $00,$00,$00,$00,$02,$06,$0C,$18, $30,$60,$C0,$80,$00,$00,$00,$00
000104r 3  02 06 0C 18  
000108r 3  30 60 C0 80  
000110r 3  00 00 3C 66  	.byte $00,$00,$3C,$66,$C3,$C3,$DB,$DB, $C3,$C3,$66,$3C,$00,$00,$00,$00
000114r 3  C3 C3 DB DB  
000118r 3  C3 C3 66 3C  
000120r 3  00 00 18 38  	.byte $00,$00,$18,$38,$78,$18,$18,$18, $18,$18,$18,$7E,$00,$00,$00,$00
000124r 3  78 18 18 18  
000128r 3  18 18 18 7E  
000130r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$06,$0C,$18,$30, $60,$C0,$C6,$FE,$00,$00,$00,$00
000134r 3  06 0C 18 30  
000138r 3  60 C0 C6 FE  
000140r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$06,$06,$3C,$06, $06,$06,$C6,$7C,$00,$00,$00,$00
000144r 3  06 06 3C 06  
000148r 3  06 06 C6 7C  
000150r 3  00 00 0C 1C  	.byte $00,$00,$0C,$1C,$3C,$6C,$CC,$FE, $0C,$0C,$0C,$1E,$00,$00,$00,$00
000154r 3  3C 6C CC FE  
000158r 3  0C 0C 0C 1E  
000160r 3  00 00 FE C0  	.byte $00,$00,$FE,$C0,$C0,$C0,$FC,$06, $06,$06,$C6,$7C,$00,$00,$00,$00
000164r 3  C0 C0 FC 06  
000168r 3  06 06 C6 7C  
000170r 3  00 00 38 60  	.byte $00,$00,$38,$60,$C0,$C0,$FC,$C6, $C6,$C6,$C6,$7C,$00,$00,$00,$00
000174r 3  C0 C0 FC C6  
000178r 3  C6 C6 C6 7C  
000180r 3  00 00 FE C6  	.byte $00,$00,$FE,$C6,$06,$06,$0C,$18, $30,$30,$30,$30,$00,$00,$00,$00
000184r 3  06 06 0C 18  
000188r 3  30 30 30 30  
000190r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$C6,$7C,$C6, $C6,$C6,$C6,$7C,$00,$00,$00,$00
000194r 3  C6 C6 7C C6  
000198r 3  C6 C6 C6 7C  
0001A0r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$C6,$7E,$06, $06,$06,$0C,$78,$00,$00,$00,$00
0001A4r 3  C6 C6 7E 06  
0001A8r 3  06 06 0C 78  
0001B0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$18,$18,$00,$00, $00,$18,$18,$00,$00,$00,$00,$00
0001B4r 3  18 18 00 00  
0001B8r 3  00 18 18 00  
0001C0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$18,$18,$00,$00, $00,$18,$18,$30,$00,$00,$00,$00
0001C4r 3  18 18 00 00  
0001C8r 3  00 18 18 30  
0001D0r 3  00 00 00 06  	.byte $00,$00,$00,$06,$0C,$18,$30,$60, $30,$18,$0C,$06,$00,$00,$00,$00
0001D4r 3  0C 18 30 60  
0001D8r 3  30 18 0C 06  
0001E0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$7E,$00,$00, $7E,$00,$00,$00,$00,$00,$00,$00
0001E4r 3  00 7E 00 00  
0001E8r 3  7E 00 00 00  
0001F0r 3  00 00 00 60  	.byte $00,$00,$00,$60,$30,$18,$0C,$06, $0C,$18,$30,$60,$00,$00,$00,$00
0001F4r 3  30 18 0C 06  
0001F8r 3  0C 18 30 60  
000200r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$0C,$18,$18, $18,$00,$18,$18,$00,$00,$00,$00
000204r 3  C6 0C 18 18  
000208r 3  18 00 18 18  
000210r 3  00 00 00 7C  	.byte $00,$00,$00,$7C,$C6,$C6,$DE,$DE, $DE,$DC,$C0,$7C,$00,$00,$00,$00
000214r 3  C6 C6 DE DE  
000218r 3  DE DC C0 7C  
000220r 3  00 00 10 38  	.byte $00,$00,$10,$38,$6C,$C6,$C6,$FE, $C6,$C6,$C6,$C6,$00,$00,$00,$00
000224r 3  6C C6 C6 FE  
000228r 3  C6 C6 C6 C6  
000230r 3  00 00 FC 66  	.byte $00,$00,$FC,$66,$66,$66,$7C,$66, $66,$66,$66,$FC,$00,$00,$00,$00
000234r 3  66 66 7C 66  
000238r 3  66 66 66 FC  
000240r 3  00 00 3C 66  	.byte $00,$00,$3C,$66,$C2,$C0,$C0,$C0, $C0,$C2,$66,$3C,$00,$00,$00,$00
000244r 3  C2 C0 C0 C0  
000248r 3  C0 C2 66 3C  
000250r 3  00 00 F8 6C  	.byte $00,$00,$F8,$6C,$66,$66,$66,$66, $66,$66,$6C,$F8,$00,$00,$00,$00
000254r 3  66 66 66 66  
000258r 3  66 66 6C F8  
000260r 3  00 00 FE 66  	.byte $00,$00,$FE,$66,$62,$68,$78,$68, $60,$62,$66,$FE,$00,$00,$00,$00
000264r 3  62 68 78 68  
000268r 3  60 62 66 FE  
000270r 3  00 00 FE 66  	.byte $00,$00,$FE,$66,$62,$68,$78,$68, $60,$60,$60,$F0,$00,$00,$00,$00
000274r 3  62 68 78 68  
000278r 3  60 60 60 F0  
000280r 3  00 00 3C 66  	.byte $00,$00,$3C,$66,$C2,$C0,$C0,$DE, $C6,$C6,$66,$3A,$00,$00,$00,$00
000284r 3  C2 C0 C0 DE  
000288r 3  C6 C6 66 3A  
000290r 3  00 00 C6 C6  	.byte $00,$00,$C6,$C6,$C6,$C6,$FE,$C6, $C6,$C6,$C6,$C6,$00,$00,$00,$00
000294r 3  C6 C6 FE C6  
000298r 3  C6 C6 C6 C6  
0002A0r 3  00 00 3C 18  	.byte $00,$00,$3C,$18,$18,$18,$18,$18, $18,$18,$18,$3C,$00,$00,$00,$00
0002A4r 3  18 18 18 18  
0002A8r 3  18 18 18 3C  
0002B0r 3  00 00 1E 0C  	.byte $00,$00,$1E,$0C,$0C,$0C,$0C,$0C, $CC,$CC,$CC,$78,$00,$00,$00,$00
0002B4r 3  0C 0C 0C 0C  
0002B8r 3  CC CC CC 78  
0002C0r 3  00 00 E6 66  	.byte $00,$00,$E6,$66,$66,$6C,$78,$78, $6C,$66,$66,$E6,$00,$00,$00,$00
0002C4r 3  66 6C 78 78  
0002C8r 3  6C 66 66 E6  
0002D0r 3  00 00 F0 60  	.byte $00,$00,$F0,$60,$60,$60,$60,$60, $60,$62,$66,$FE,$00,$00,$00,$00
0002D4r 3  60 60 60 60  
0002D8r 3  60 62 66 FE  
0002E0r 3  00 00 C3 E7  	.byte $00,$00,$C3,$E7,$FF,$FF,$DB,$C3, $C3,$C3,$C3,$C3,$00,$00,$00,$00
0002E4r 3  FF FF DB C3  
0002E8r 3  C3 C3 C3 C3  
0002F0r 3  00 00 C6 E6  	.byte $00,$00,$C6,$E6,$F6,$FE,$DE,$CE, $C6,$C6,$C6,$C6,$00,$00,$00,$00
0002F4r 3  F6 FE DE CE  
0002F8r 3  C6 C6 C6 C6  
000300r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$C6,$C6,$C6, $C6,$C6,$C6,$7C,$00,$00,$00,$00
000304r 3  C6 C6 C6 C6  
000308r 3  C6 C6 C6 7C  
000310r 3  00 00 FC 66  	.byte $00,$00,$FC,$66,$66,$66,$7C,$60, $60,$60,$60,$F0,$00,$00,$00,$00
000314r 3  66 66 7C 60  
000318r 3  60 60 60 F0  
000320r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$C6,$C6,$C6, $C6,$D6,$DE,$7C,$0C,$0E,$00,$00
000324r 3  C6 C6 C6 C6  
000328r 3  C6 D6 DE 7C  
000330r 3  00 00 FC 66  	.byte $00,$00,$FC,$66,$66,$66,$7C,$6C, $66,$66,$66,$E6,$00,$00,$00,$00
000334r 3  66 66 7C 6C  
000338r 3  66 66 66 E6  
000340r 3  00 00 7C C6  	.byte $00,$00,$7C,$C6,$C6,$60,$38,$0C, $06,$C6,$C6,$7C,$00,$00,$00,$00
000344r 3  C6 60 38 0C  
000348r 3  06 C6 C6 7C  
000350r 3  00 00 FF DB  	.byte $00,$00,$FF,$DB,$99,$18,$18,$18, $18,$18,$18,$3C,$00,$00,$00,$00
000354r 3  99 18 18 18  
000358r 3  18 18 18 3C  
000360r 3  00 00 C6 C6  	.byte $00,$00,$C6,$C6,$C6,$C6,$C6,$C6, $C6,$C6,$C6,$7C,$00,$00,$00,$00
000364r 3  C6 C6 C6 C6  
000368r 3  C6 C6 C6 7C  
000370r 3  00 00 C3 C3  	.byte $00,$00,$C3,$C3,$C3,$C3,$C3,$C3, $C3,$66,$3C,$18,$00,$00,$00,$00
000374r 3  C3 C3 C3 C3  
000378r 3  C3 66 3C 18  
000380r 3  00 00 C3 C3  	.byte $00,$00,$C3,$C3,$C3,$C3,$C3,$DB, $DB,$FF,$66,$66,$00,$00,$00,$00
000384r 3  C3 C3 C3 DB  
000388r 3  DB FF 66 66  
000390r 3  00 00 C3 C3  	.byte $00,$00,$C3,$C3,$66,$3C,$18,$18, $3C,$66,$C3,$C3,$00,$00,$00,$00
000394r 3  66 3C 18 18  
000398r 3  3C 66 C3 C3  
0003A0r 3  00 00 C3 C3  	.byte $00,$00,$C3,$C3,$C3,$66,$3C,$18, $18,$18,$18,$3C,$00,$00,$00,$00
0003A4r 3  C3 66 3C 18  
0003A8r 3  18 18 18 3C  
0003B0r 3  00 00 FF C3  	.byte $00,$00,$FF,$C3,$86,$0C,$18,$30, $60,$C1,$C3,$FF,$00,$00,$00,$00
0003B4r 3  86 0C 18 30  
0003B8r 3  60 C1 C3 FF  
0003C0r 3  00 00 3C 30  	.byte $00,$00,$3C,$30,$30,$30,$30,$30, $30,$30,$30,$3C,$00,$00,$00,$00
0003C4r 3  30 30 30 30  
0003C8r 3  30 30 30 3C  
0003D0r 3  00 00 00 80  	.byte $00,$00,$00,$80,$C0,$E0,$70,$38, $1C,$0E,$06,$02,$00,$00,$00,$00
0003D4r 3  C0 E0 70 38  
0003D8r 3  1C 0E 06 02  
0003E0r 3  00 00 3C 0C  	.byte $00,$00,$3C,$0C,$0C,$0C,$0C,$0C, $0C,$0C,$0C,$3C,$00,$00,$00,$00
0003E4r 3  0C 0C 0C 0C  
0003E8r 3  0C 0C 0C 3C  
0003F0r 3  10 38 6C C6  	.byte $10,$38,$6C,$C6,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
0003F4r 3  00 00 00 00  
0003F8r 3  00 00 00 00  
000400r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00, $00,$00,$00,$00,$00,$FF,$00,$00
000404r 3  00 00 00 00  
000408r 3  00 00 00 00  
000410r 3  30 30 18 00  	.byte $30,$30,$18,$00,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
000414r 3  00 00 00 00  
000418r 3  00 00 00 00  
000420r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$78,$0C,$7C, $CC,$CC,$CC,$76,$00,$00,$00,$00
000424r 3  00 78 0C 7C  
000428r 3  CC CC CC 76  
000430r 3  00 00 E0 60  	.byte $00,$00,$E0,$60,$60,$78,$6C,$66, $66,$66,$66,$7C,$00,$00,$00,$00
000434r 3  60 78 6C 66  
000438r 3  66 66 66 7C  
000440r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$7C,$C6,$C0, $C0,$C0,$C6,$7C,$00,$00,$00,$00
000444r 3  00 7C C6 C0  
000448r 3  C0 C0 C6 7C  
000450r 3  00 00 1C 0C  	.byte $00,$00,$1C,$0C,$0C,$3C,$6C,$CC, $CC,$CC,$CC,$76,$00,$00,$00,$00
000454r 3  0C 3C 6C CC  
000458r 3  CC CC CC 76  
000460r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$7C,$C6,$FE, $C0,$C0,$C6,$7C,$00,$00,$00,$00
000464r 3  00 7C C6 FE  
000468r 3  C0 C0 C6 7C  
000470r 3  00 00 38 6C  	.byte $00,$00,$38,$6C,$64,$60,$F0,$60, $60,$60,$60,$F0,$00,$00,$00,$00
000474r 3  64 60 F0 60  
000478r 3  60 60 60 F0  
000480r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$76,$CC,$CC, $CC,$CC,$CC,$7C,$0C,$CC,$78,$00
000484r 3  00 76 CC CC  
000488r 3  CC CC CC 7C  
000490r 3  00 00 E0 60  	.byte $00,$00,$E0,$60,$60,$6C,$76,$66, $66,$66,$66,$E6,$00,$00,$00,$00
000494r 3  60 6C 76 66  
000498r 3  66 66 66 E6  
0004A0r 3  00 00 18 18  	.byte $00,$00,$18,$18,$00,$38,$18,$18, $18,$18,$18,$3C,$00,$00,$00,$00
0004A4r 3  00 38 18 18  
0004A8r 3  18 18 18 3C  
0004B0r 3  00 00 06 06  	.byte $00,$00,$06,$06,$00,$0E,$06,$06, $06,$06,$06,$06,$66,$66,$3C,$00
0004B4r 3  00 0E 06 06  
0004B8r 3  06 06 06 06  
0004C0r 3  00 00 E0 60  	.byte $00,$00,$E0,$60,$60,$66,$6C,$78, $78,$6C,$66,$E6,$00,$00,$00,$00
0004C4r 3  60 66 6C 78  
0004C8r 3  78 6C 66 E6  
0004D0r 3  00 00 38 18  	.byte $00,$00,$38,$18,$18,$18,$18,$18, $18,$18,$18,$3C,$00,$00,$00,$00
0004D4r 3  18 18 18 18  
0004D8r 3  18 18 18 3C  
0004E0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$E6,$FF,$DB, $DB,$DB,$DB,$DB,$00,$00,$00,$00
0004E4r 3  00 E6 FF DB  
0004E8r 3  DB DB DB DB  
0004F0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$DC,$66,$66, $66,$66,$66,$66,$00,$00,$00,$00
0004F4r 3  00 DC 66 66  
0004F8r 3  66 66 66 66  
000500r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$7C,$C6,$C6, $C6,$C6,$C6,$7C,$00,$00,$00,$00
000504r 3  00 7C C6 C6  
000508r 3  C6 C6 C6 7C  
000510r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$DC,$66,$66, $66,$66,$66,$7C,$60,$60,$F0,$00
000514r 3  00 DC 66 66  
000518r 3  66 66 66 7C  
000520r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$76,$CC,$CC, $CC,$CC,$CC,$7C,$0C,$0C,$1E,$00
000524r 3  00 76 CC CC  
000528r 3  CC CC CC 7C  
000530r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$DC,$76,$66, $60,$60,$60,$F0,$00,$00,$00,$00
000534r 3  00 DC 76 66  
000538r 3  60 60 60 F0  
000540r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$7C,$C6,$60, $38,$0C,$C6,$7C,$00,$00,$00,$00
000544r 3  00 7C C6 60  
000548r 3  38 0C C6 7C  
000550r 3  00 00 10 30  	.byte $00,$00,$10,$30,$30,$FC,$30,$30, $30,$30,$36,$1C,$00,$00,$00,$00
000554r 3  30 FC 30 30  
000558r 3  30 30 36 1C  
000560r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$CC,$CC,$CC, $CC,$CC,$CC,$76,$00,$00,$00,$00
000564r 3  00 CC CC CC  
000568r 3  CC CC CC 76  
000570r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$C3,$C3,$C3, $C3,$66,$3C,$18,$00,$00,$00,$00
000574r 3  00 C3 C3 C3  
000578r 3  C3 66 3C 18  
000580r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$C3,$C3,$C3, $DB,$DB,$FF,$66,$00,$00,$00,$00
000584r 3  00 C3 C3 C3  
000588r 3  DB DB FF 66  
000590r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$C3,$66,$3C, $18,$3C,$66,$C3,$00,$00,$00,$00
000594r 3  00 C3 66 3C  
000598r 3  18 3C 66 C3  
0005A0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$C6,$C6,$C6, $C6,$C6,$C6,$7E,$06,$0C,$F8,$00
0005A4r 3  00 C6 C6 C6  
0005A8r 3  C6 C6 C6 7E  
0005B0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$FE,$CC,$18, $30,$60,$C6,$FE,$00,$00,$00,$00
0005B4r 3  00 FE CC 18  
0005B8r 3  30 60 C6 FE  
0005C0r 3  00 00 0E 18  	.byte $00,$00,$0E,$18,$18,$18,$70,$18, $18,$18,$18,$0E,$00,$00,$00,$00
0005C4r 3  18 18 70 18  
0005C8r 3  18 18 18 0E  
0005D0r 3  00 00 18 18  	.byte $00,$00,$18,$18,$18,$18,$18,$18, $18,$18,$18,$18,$00,$00,$00,$00
0005D4r 3  18 18 18 18  
0005D8r 3  18 18 18 18  
0005E0r 3  00 00 70 18  	.byte $00,$00,$70,$18,$18,$18,$0E,$18, $18,$18,$18,$70,$00,$00,$00,$00
0005E4r 3  18 18 0E 18  
0005E8r 3  18 18 18 70  
0005F0r 3  00 00 76 DC  	.byte $00,$00,$76,$DC,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00
0005F4r 3  00 00 00 00  
0005F8r 3  00 00 00 00  
000600r 3  00 00 00 00  	.byte $00,$00,$00,$00,$10,$38,$6C,$C6, $C6,$C6,$FE,$00,$00,$00,$00,$00
000604r 3  10 38 6C C6  
000608r 3  C6 C6 FE 00  
000610r 3               
000610r 2               	.include "font6x8.inc"
000610r 3               	.export font6x8
000610r 3               font6x8:
000610r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00, $20,$20,$20,$20,$20,$00,$20,$00
000614r 3  00 00 00 00  
000618r 3  20 20 20 20  
000620r 3  50 50 50 00  	.byte $50,$50,$50,$00,$00,$00,$00,$00, $50,$50,$F8,$50,$F8,$50,$50,$00
000624r 3  00 00 00 00  
000628r 3  50 50 F8 50  
000630r 3  20 78 A0 70  	.byte $20,$78,$A0,$70,$28,$F0,$20,$00, $C0,$C8,$10,$20,$40,$98,$18,$00
000634r 3  28 F0 20 00  
000638r 3  C0 C8 10 20  
000640r 3  60 90 A0 40  	.byte $60,$90,$A0,$40,$A8,$90,$68,$00, $60,$20,$40,$00,$00,$00,$00,$00
000644r 3  A8 90 68 00  
000648r 3  60 20 40 00  
000650r 3  10 20 40 40  	.byte $10,$20,$40,$40,$40,$20,$10,$00, $40,$20,$10,$10,$10,$20,$40,$00
000654r 3  40 20 10 00  
000658r 3  40 20 10 10  
000660r 3  00 50 20 F8  	.byte $00,$50,$20,$F8,$20,$50,$00,$00, $00,$20,$20,$F8,$20,$20,$00,$00
000664r 3  20 50 00 00  
000668r 3  00 20 20 F8  
000670r 3  00 00 00 00  	.byte $00,$00,$00,$00,$60,$20,$40,$00, $00,$00,$00,$F8,$00,$00,$00,$00
000674r 3  60 20 40 00  
000678r 3  00 00 00 F8  
000680r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$60,$60,$00, $00,$08,$10,$20,$40,$80,$00,$00
000684r 3  00 60 60 00  
000688r 3  00 08 10 20  
000690r 3  70 88 98 A8  	.byte $70,$88,$98,$A8,$C8,$88,$70,$00, $20,$60,$20,$20,$20,$20,$70,$00
000694r 3  C8 88 70 00  
000698r 3  20 60 20 20  
0006A0r 3  70 88 08 10  	.byte $70,$88,$08,$10,$20,$40,$F8,$00, $F8,$10,$20,$10,$08,$88,$70,$00
0006A4r 3  20 40 F8 00  
0006A8r 3  F8 10 20 10  
0006B0r 3  10 30 50 90  	.byte $10,$30,$50,$90,$F8,$10,$10,$00, $F8,$80,$F0,$08,$08,$88,$70,$00
0006B4r 3  F8 10 10 00  
0006B8r 3  F8 80 F0 08  
0006C0r 3  30 40 80 F0  	.byte $30,$40,$80,$F0,$88,$88,$70,$00, $F8,$08,$10,$20,$40,$40,$40,$00
0006C4r 3  88 88 70 00  
0006C8r 3  F8 08 10 20  
0006D0r 3  70 88 88 70  	.byte $70,$88,$88,$70,$88,$88,$70,$00, $70,$88,$88,$78,$08,$10,$60,$00
0006D4r 3  88 88 70 00  
0006D8r 3  70 88 88 78  
0006E0r 3  00 60 60 00  	.byte $00,$60,$60,$00,$60,$60,$00,$00, $00,$60,$60,$00,$60,$20,$40,$00
0006E4r 3  60 60 00 00  
0006E8r 3  00 60 60 00  
0006F0r 3  08 10 20 40  	.byte $08,$10,$20,$40,$20,$10,$08,$00, $00,$00,$F8,$00,$F8,$00,$00,$00
0006F4r 3  20 10 08 00  
0006F8r 3  00 00 F8 00  
000700r 3  80 40 20 10  	.byte $80,$40,$20,$10,$20,$40,$80,$00, $70,$88,$08,$10,$20,$00,$20,$00
000704r 3  20 40 80 00  
000708r 3  70 88 08 10  
000710r 3  70 88 08 68  	.byte $70,$88,$08,$68,$A8,$A8,$70,$00, $70,$88,$88,$88,$F8,$88,$88,$00
000714r 3  A8 A8 70 00  
000718r 3  70 88 88 88  
000720r 3  F0 88 88 F0  	.byte $F0,$88,$88,$F0,$88,$88,$F0,$00, $70,$88,$80,$80,$80,$88,$70,$00
000724r 3  88 88 F0 00  
000728r 3  70 88 80 80  
000730r 3  E0 90 88 88  	.byte $E0,$90,$88,$88,$88,$90,$E0,$00, $F8,$80,$80,$F0,$80,$80,$F8,$00
000734r 3  88 90 E0 00  
000738r 3  F8 80 80 F0  
000740r 3  F8 80 80 E0  	.byte $F8,$80,$80,$E0,$80,$80,$80,$00, $70,$88,$80,$80,$98,$88,$70,$00
000744r 3  80 80 80 00  
000748r 3  70 88 80 80  
000750r 3  88 88 88 F8  	.byte $88,$88,$88,$F8,$88,$88,$88,$00, $70,$20,$20,$20,$20,$20,$70,$00
000754r 3  88 88 88 00  
000758r 3  70 20 20 20  
000760r 3  38 10 10 10  	.byte $38,$10,$10,$10,$10,$90,$60,$00, $88,$90,$A0,$C0,$A0,$90,$88,$00
000764r 3  10 90 60 00  
000768r 3  88 90 A0 C0  
000770r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$F8,$00, $88,$D8,$A8,$88,$88,$88,$88,$00
000774r 3  80 80 F8 00  
000778r 3  88 D8 A8 88  
000780r 3  88 88 C8 A8  	.byte $88,$88,$C8,$A8,$98,$88,$88,$00, $70,$88,$88,$88,$88,$88,$70,$00
000784r 3  98 88 88 00  
000788r 3  70 88 88 88  
000790r 3  F0 88 88 F0  	.byte $F0,$88,$88,$F0,$80,$80,$80,$00, $70,$88,$88,$88,$A8,$90,$68,$00
000794r 3  80 80 80 00  
000798r 3  70 88 88 88  
0007A0r 3  F0 88 88 F0  	.byte $F0,$88,$88,$F0,$A0,$90,$88,$00, $78,$80,$80,$70,$08,$08,$F0,$00
0007A4r 3  A0 90 88 00  
0007A8r 3  78 80 80 70  
0007B0r 3  F8 20 20 20  	.byte $F8,$20,$20,$20,$20,$20,$20,$00, $88,$88,$88,$88,$88,$88,$70,$00
0007B4r 3  20 20 20 00  
0007B8r 3  88 88 88 88  
0007C0r 3  88 88 88 88  	.byte $88,$88,$88,$88,$88,$50,$20,$00, $88,$88,$88,$A8,$A8,$D8,$88,$00
0007C4r 3  88 50 20 00  
0007C8r 3  88 88 88 A8  
0007D0r 3  88 88 50 20  	.byte $88,$88,$50,$20,$50,$88,$88,$00, $88,$88,$50,$20,$20,$20,$20,$00
0007D4r 3  50 88 88 00  
0007D8r 3  88 88 50 20  
0007E0r 3  F8 08 10 20  	.byte $F8,$08,$10,$20,$40,$80,$F8,$00, $38,$20,$20,$20,$20,$20,$38,$00
0007E4r 3  40 80 F8 00  
0007E8r 3  38 20 20 20  
0007F0r 3  00 80 40 20  	.byte $00,$80,$40,$20,$10,$08,$00,$00, $E0,$20,$20,$20,$20,$20,$E0,$00
0007F4r 3  10 08 00 00  
0007F8r 3  E0 20 20 20  
000800r 3  20 50 88 00  	.byte $20,$50,$88,$00,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$F8,$00
000804r 3  00 00 00 00  
000808r 3  00 00 00 00  
000810r 3  40 20 10 00  	.byte $40,$20,$10,$00,$00,$00,$00,$00, $00,$00,$70,$08,$78,$88,$78,$00
000814r 3  00 00 00 00  
000818r 3  00 00 70 08  
000820r 3  80 80 B0 C8  	.byte $80,$80,$B0,$C8,$88,$88,$F0,$00, $00,$00,$70,$80,$80,$88,$70,$00
000824r 3  88 88 F0 00  
000828r 3  00 00 70 80  
000830r 3  08 08 68 98  	.byte $08,$08,$68,$98,$88,$88,$78,$00, $00,$00,$70,$88,$F8,$80,$70,$00
000834r 3  88 88 78 00  
000838r 3  00 00 70 88  
000840r 3  30 48 40 E0  	.byte $30,$48,$40,$E0,$40,$40,$40,$00, $00,$00,$78,$88,$78,$08,$30,$00
000844r 3  40 40 40 00  
000848r 3  00 00 78 88  
000850r 3  80 80 B0 C8  	.byte $80,$80,$B0,$C8,$88,$88,$88,$00, $20,$00,$60,$20,$20,$20,$70,$00
000854r 3  88 88 88 00  
000858r 3  20 00 60 20  
000860r 3  10 00 30 10  	.byte $10,$00,$30,$10,$10,$90,$60,$00, $40,$40,$48,$50,$60,$50,$48,$00
000864r 3  10 90 60 00  
000868r 3  40 40 48 50  
000870r 3  60 20 20 20  	.byte $60,$20,$20,$20,$20,$20,$70,$00, $00,$00,$D0,$A8,$A8,$88,$88,$00
000874r 3  20 20 70 00  
000878r 3  00 00 D0 A8  
000880r 3  00 00 B0 C8  	.byte $00,$00,$B0,$C8,$88,$88,$88,$00, $00,$00,$70,$88,$88,$88,$70,$00
000884r 3  88 88 88 00  
000888r 3  00 00 70 88  
000890r 3  00 00 F0 88  	.byte $00,$00,$F0,$88,$F0,$80,$80,$00, $00,$00,$68,$98,$78,$08,$08,$00
000894r 3  F0 80 80 00  
000898r 3  00 00 68 98  
0008A0r 3  00 00 B0 C8  	.byte $00,$00,$B0,$C8,$80,$80,$80,$00, $00,$00,$70,$80,$70,$08,$F0,$00
0008A4r 3  80 80 80 00  
0008A8r 3  00 00 70 80  
0008B0r 3  40 40 E0 40  	.byte $40,$40,$E0,$40,$40,$48,$30,$00, $00,$00,$88,$88,$88,$98,$68,$00
0008B4r 3  40 48 30 00  
0008B8r 3  00 00 88 88  
0008C0r 3  00 00 88 88  	.byte $00,$00,$88,$88,$88,$50,$20,$00, $00,$00,$88,$88,$A8,$A8,$50,$00
0008C4r 3  88 50 20 00  
0008C8r 3  00 00 88 88  
0008D0r 3  00 00 88 50  	.byte $00,$00,$88,$50,$20,$50,$88,$00, $00,$00,$88,$88,$78,$08,$70,$00
0008D4r 3  20 50 88 00  
0008D8r 3  00 00 88 88  
0008E0r 3  00 00 F8 10  	.byte $00,$00,$F8,$10,$20,$40,$F8,$00, $10,$20,$20,$40,$20,$20,$10,$00
0008E4r 3  20 40 F8 00  
0008E8r 3  10 20 20 40  
0008F0r 3  20 20 20 20  	.byte $20,$20,$20,$20,$20,$20,$20,$00, $40,$20,$20,$10,$20,$20,$40,$00
0008F4r 3  20 20 20 00  
0008F8r 3  40 20 20 10  
000900r 3  00 20 10 F8  	.byte $00,$20,$10,$F8,$10,$20,$00,$00, $00,$20,$40,$F8,$40,$20,$00,$00
000904r 3  10 20 00 00  
000908r 3  00 20 40 F8  
000910r 3               
000910r 2               
000910r 2               ;------------------------------------------------------------
000910r 2               ;	Mapeado de Video (bloques 0,1,2,3) a p√°ginas 1,2,3,4
000910r 2               ;------------------------------------------------------------
000910r 2               
000910r 2  48           vmap:	pha
000911r 2  8A           	txa
000912r 2  48           	pha
000913r 2  A2 03        	ldx	#3
000915r 2  AD 0C E0     	lda	PAGE4
000918r 2  8E 0C E0     	stx	PAGE4	; Cambiamos pag 4 a bloque 3
00091Br 2  8D 03 84     	sta	$8403	; Guardamos valores anteriores (ahora al final del video)
00091Er 2  CA           	dex
00091Fr 2  AD 0B E0     	lda	PAGE3
000922r 2  8E 0B E0     	stx	PAGE3
000925r 2  8D 02 84     	sta	$8402
000928r 2  CA           	dex
000929r 2  AD 0A E0     	lda	PAGE2
00092Cr 2  8E 0A E0     	stx	PAGE2
00092Fr 2  8D 01 84     	sta	$8401
000932r 2  CA           	dex
000933r 2  AD 09 E0     	lda	PAGE1
000936r 2  8E 09 E0     	stx	PAGE1
000939r 2  8D 00 84     	sta	$8400
00093Cr 2  68           	pla
00093Dr 2  AA           	tax
00093Er 2  68           	pla
00093Fr 2  60           	rts
000940r 2               
000940r 2               vunmap:	; Recupera mapeado anterior
000940r 2  AD 00 84     	lda	$8400
000943r 2  8D 09 E0     	sta	PAGE1
000946r 2  AD 01 84     	lda	$8401
000949r 2  8D 0A E0     	sta	PAGE2
00094Cr 2  AD 02 84     	lda	$8402
00094Fr 2  8D 0B E0     	sta	PAGE3
000952r 2  AD 03 84     	lda	$8403
000955r 2  8D 0C E0     	sta	PAGE4
000958r 2  60           	rts
000959r 2               ;------------------------------------------------------------
000959r 2               ;	Borra la pantalla
000959r 2               ;------------------------------------------------------------
000959r 2               
000959r 2               	.export cls
000959r 2  20 rr rr     cls:	jsr	vmap
00095Cr 2  A9 64        	lda	#100
00095Er 2  85 rr        	sta	tmp5
000960r 2  A9 20        	lda	#$20	;pagina 1
000962r 2  85 rr        	sta	ptr4+1
000964r 2  A9 00        	lda	#0
000966r 2  85 rr        	sta	ptr4
000968r 2  A8           	tay
000969r 2  A9 00        	lda	#0
00096Br 2  91 rr        cls1:	sta	(ptr4),y
00096Dr 2  C8           	iny
00096Er 2  D0 FB        	bne	cls1
000970r 2  E6 rr        	inc	ptr4+1
000972r 2  C6 rr        	dec	tmp5
000974r 2  D0 F5        	bne	cls1
000976r 2  84 rr        	sty	tposx
000978r 2  84 rr        	sty	tposy
00097Ar 2  F0 C4        	beq	vunmap	;incondicional
00097Cr 2               
00097Cr 2               ;------------------------------------------------------------
00097Cr 2               ;	Borra una l√≠nea de texto (1024 bytes)
00097Cr 2               ;------------------------------------------------------------
00097Cr 2               	.export clrline, clrrest
00097Cr 2               clrline:
00097Cr 2  98           	tya
00097Dr 2  48           	pha
00097Er 2  20 rr rr     	jsr	vmap
000981r 2  A9 04        	lda	#4
000983r 2  85 rr        	sta	tmp5
000985r 2  A5 rr        cll0:	lda	tposy
000987r 2  0A           	asl
000988r 2  0A           	asl
000989r 2  69 20        	adc	#$20	;pagina 1
00098Br 2  85 rr        	sta	ptr4+1
00098Dr 2  A9 00        	lda	#0
00098Fr 2  85 rr        	sta	ptr4
000991r 2  A8           	tay
000992r 2  A9 00        	lda	#0
000994r 2  91 rr        cll1:	sta	(ptr4),y
000996r 2  C8           	iny
000997r 2  D0 FB        	bne	cll1
000999r 2  E6 rr        	inc	ptr4+1
00099Br 2  C6 rr        	dec	tmp5
00099Dr 2  D0 F5        	bne	cll1
00099Fr 2  68           	pla
0009A0r 2  A8           	tay
0009A1r 2  4C rr rr     	jmp	vunmap
0009A4r 2               clrrest:
0009A4r 2  98           	tya
0009A5r 2  48           	pha
0009A6r 2  20 rr rr     	jsr	vmap
0009A9r 2  A9 19        	lda	#25
0009ABr 2  38           	sec
0009ACr 2  E5 rr        	sbc	tposy
0009AEr 2  0A           	asl
0009AFr 2  0A           	asl
0009B0r 2  85 rr        	sta	tmp5
0009B2r 2  4C rr rr     	jmp	cll0
0009B5r 2               
0009B5r 2               ;------------------------------------------------------------
0009B5r 2               ;   Imprime caracter en posici√≥n (tposx,tposy)
0009B5r 2               ;    en unidades de caracteres
0009B5r 2               ;------------------------------------------------------------
0009B5r 2               	.export gputchpos
0009B5r 2               	; tposx: pos X/8
0009B5r 2               	; tposy: pos Y/16
0009B5r 2               	; A:	ASCII
0009B5r 2               gputchpos:
0009B5r 2  38           	sec
0009B6r 2  E9 20        	sbc	#32
0009B8r 2  48           	pha
0009B9r 2  A5 rr        	lda	tposy	; Y*4 (*256)
0009BBr 2  0A           	asl
0009BCr 2  0A           	asl
0009BDr 2  18           	clc
0009BEr 2  69 20        	adc	#$20	;pagina 1
0009C0r 2  85 rr        	sta	ptr5+1
0009C2r 2  A9 01        	lda	#1
0009C4r 2  2C 03 E0     	bit	STAT2	;vmod
0009C7r 2  F0 03        	beq	gptmono
0009C9r 2  4C rr rr     	jmp	gputchpos4
0009CCr 2               gptmono:
0009CCr 2  A5 rr        	lda	coltxt
0009CEr 2  C9 40        	cmp	#64
0009D0r 2  B0 37        	bcs	col85
0009D2r 2               
0009D2r 2  A5 rr        	lda	tposx	; ptr5=destino
0009D4r 2  85 rr        	sta	ptr5
0009D6r 2               
0009D6r 2  A9 00        	lda	#0	; ptr4=origen
0009D8r 2  85 rr        	sta	ptr4+1
0009DAr 2  68           	pla
0009DBr 2  0A           	asl
0009DCr 2  26 rr        	rol	ptr4+1
0009DEr 2  0A           	asl
0009DFr 2  26 rr        	rol	ptr4+1
0009E1r 2  0A           	asl
0009E2r 2  26 rr        	rol	ptr4+1
0009E4r 2  0A           	asl
0009E5r 2  26 rr        	rol	ptr4+1
0009E7r 2  18           	clc
0009E8r 2  69 rr        	adc	#<font8x16
0009EAr 2  85 rr        	sta	ptr4
0009ECr 2  A5 rr        	lda	ptr4+1
0009EEr 2  69 rr        	adc	#>font8x16
0009F0r 2  85 rr        	sta	ptr4+1
0009F2r 2               
0009F2r 2  A0 00        	ldy	#0
0009F4r 2  B1 rr        gpt1:	lda	(ptr4),y
0009F6r 2  91 rr        	sta	(ptr5),y
0009F8r 2  C8           	iny
0009F9r 2  A9 3F        	lda	#63
0009FBr 2  18           	clc
0009FCr 2  65 rr        	adc	ptr5
0009FEr 2  85 rr        	sta	ptr5
000A00r 2  90 02        	bcc	gpt2
000A02r 2  E6 rr        	inc	ptr5+1
000A04r 2  C0 10        gpt2:	cpy	#16
000A06r 2  D0 EC        	bne	gpt1
000A08r 2  60           	rts
000A09r 2               
000A09r 2               
000A09r 2  A5 rr        col85:	lda	tposx	; ptr5=destino
000A0Br 2  4A           	lsr	; X/4
000A0Cr 2  4A           	lsr
000A0Dr 2  85 rr        	sta	ptr5	; (X/4)*3
000A0Fr 2  0A           	asl
000A10r 2  65 rr        	adc	ptr5
000A12r 2  85 rr        	sta	ptr5
000A14r 2               
000A14r 2  A9 00        	lda	#0	; ptr4=origen
000A16r 2  85 rr        	sta	ptr4+1
000A18r 2  68           	pla
000A19r 2               
000A19r 2  0A           	asl		; ASCII*8
000A1Ar 2  26 rr        	rol	ptr4+1
000A1Cr 2  0A           	asl
000A1Dr 2  26 rr        	rol	ptr4+1
000A1Fr 2  0A           	asl
000A20r 2  26 rr        	rol	ptr4+1
000A22r 2  18           	clc
000A23r 2  69 rr        	adc	#<font6x8
000A25r 2  85 rr        	sta	ptr4
000A27r 2  A5 rr        	lda	ptr4+1
000A29r 2  69 rr        	adc	#>font6x8
000A2Br 2  85 rr        	sta	ptr4+1
000A2Dr 2               
000A2Dr 2  A0 00        	ldy	#0
000A2Fr 2  A9 03        	lda	#3
000A31r 2  25 rr        	and	tposx
000A33r 2  D0 34        	bne	gptn00
000A35r 2               gpt00:			; (X&3) == 0
000A35r 2  A9 03        	lda	#3
000A37r 2  31 rr        	and	(ptr5),y
000A39r 2  85 rr        	sta	tmp1
000A3Br 2  B1 rr        	lda	(ptr4),y
000A3Dr 2  05 rr        	ora	tmp1
000A3Fr 2  91 rr        	sta	(ptr5),y
000A41r 2  A9 40        	lda	#64
000A43r 2  18           	clc
000A44r 2  65 rr        	adc	ptr5
000A46r 2  85 rr        	sta	ptr5
000A48r 2  90 02        	bcc	gpt002
000A4Ar 2  E6 rr        	inc	ptr5+1
000A4Cr 2  A9 03        gpt002:	lda	#3
000A4Er 2  31 rr        	and	(ptr5),y
000A50r 2  85 rr        	sta	tmp1
000A52r 2  B1 rr        	lda	(ptr4),y
000A54r 2  05 rr        	ora	tmp1
000A56r 2  91 rr        	sta	(ptr5),y
000A58r 2  C8           	iny
000A59r 2  A9 3F        	lda	#63
000A5Br 2  18           	clc
000A5Cr 2  65 rr        	adc	ptr5
000A5Er 2  85 rr        	sta	ptr5
000A60r 2  90 02        	bcc	gpt003
000A62r 2  E6 rr        	inc	ptr5+1
000A64r 2  C0 08        gpt003:	cpy	#8
000A66r 2  D0 CD        	bne	gpt00
000A68r 2  60           	rts
000A69r 2               gptn00:
000A69r 2  C9 03        	cmp	#3
000A6Br 2  D0 43        	bne	gptn11
000A6Dr 2  A9 02        	lda	#2
000A6Fr 2  18           	clc
000A70r 2  65 rr        	adc	ptr5
000A72r 2  85 rr        	sta	ptr5
000A74r 2  90 02        	bcc	gpt11
000A76r 2  E6 rr        	inc	ptr5+1
000A78r 2               gpt11:			;(X&3) == 3
000A78r 2  A9 C0        	lda	#$C0
000A7Ar 2  31 rr        	and	(ptr5),y
000A7Cr 2  85 rr        	sta	tmp1
000A7Er 2  B1 rr        	lda	(ptr4),y
000A80r 2  4A           	lsr
000A81r 2  4A           	lsr
000A82r 2  05 rr        	ora	tmp1
000A84r 2  91 rr        	sta	(ptr5),y
000A86r 2  A9 40        	lda	#64
000A88r 2  18           	clc
000A89r 2  65 rr        	adc	ptr5
000A8Br 2  85 rr        	sta	ptr5
000A8Dr 2  90 02        	bcc	gpt112
000A8Fr 2  E6 rr        	inc	ptr5+1
000A91r 2  A9 C0        gpt112:	lda	#$C0
000A93r 2  31 rr        	and	(ptr5),y
000A95r 2  85 rr        	sta	tmp1
000A97r 2  B1 rr        	lda	(ptr4),y
000A99r 2  4A           	lsr
000A9Ar 2  4A           	lsr
000A9Br 2  05 rr        	ora	tmp1
000A9Dr 2  91 rr        	sta	(ptr5),y
000A9Fr 2  C8           	iny
000AA0r 2  A9 3F        	lda	#63
000AA2r 2  18           	clc
000AA3r 2  65 rr        	adc	ptr5
000AA5r 2  85 rr        	sta	ptr5
000AA7r 2  90 02        	bcc	gpt113
000AA9r 2  E6 rr        	inc	ptr5+1
000AABr 2  C0 08        gpt113:	cpy	#8
000AADr 2  D0 C9        	bne	gpt11
000AAFr 2  60           	rts
000AB0r 2               
000AB0r 2  C9 01        gptn11:	cmp	#1
000AB2r 2  D0 62        	bne	gpt10a
000AB4r 2               gpt01:	;(X&3) == 1
000AB4r 2  A9 FC        	lda	#$FC
000AB6r 2  31 rr        	and 	(ptr5),y
000AB8r 2  85 rr        	sta	tmp1
000ABAr 2  B1 rr        	lda	(ptr4),y
000ABCr 2  2A           	rol
000ABDr 2  2A           	rol
000ABEr 2  2A           	rol
000ABFr 2  29 03        	and	#3
000AC1r 2  05 rr        	ora	tmp1
000AC3r 2  91 rr        	sta	(ptr5),y
000AC5r 2  A9 0F        	lda	#$0F
000AC7r 2  C8           	iny
000AC8r 2  31 rr        	and 	(ptr5),y
000ACAr 2  85 rr        	sta	tmp1
000ACCr 2  88           	dey
000ACDr 2  B1 rr        	lda	(ptr4),y
000ACFr 2  0A           	asl
000AD0r 2  0A           	asl
000AD1r 2  05 rr        	ora	tmp1
000AD3r 2  C8           	iny
000AD4r 2  91 rr        	sta	(ptr5),y
000AD6r 2  88           	dey
000AD7r 2               
000AD7r 2  A9 40        	lda	#64
000AD9r 2  18           	clc
000ADAr 2  65 rr        	adc	ptr5
000ADCr 2  85 rr        	sta	ptr5
000ADEr 2  90 02        	bcc	gpt012
000AE0r 2  E6 rr        	inc	ptr5+1
000AE2r 2  A9 FC        gpt012:	lda	#$FC
000AE4r 2  31 rr        	and 	(ptr5),y
000AE6r 2  85 rr        	sta	tmp1
000AE8r 2  B1 rr        	lda	(ptr4),y
000AEAr 2  2A           	rol
000AEBr 2  2A           	rol
000AECr 2  2A           	rol
000AEDr 2  29 03        	and	#3
000AEFr 2  05 rr        	ora	tmp1
000AF1r 2  91 rr        	sta	(ptr5),y
000AF3r 2  A9 0F        	lda	#$0F
000AF5r 2  C8           	iny
000AF6r 2  31 rr        	and 	(ptr5),y
000AF8r 2  85 rr        	sta	tmp1
000AFAr 2  88           	dey
000AFBr 2  B1 rr        	lda	(ptr4),y
000AFDr 2  0A           	asl
000AFEr 2  0A           	asl
000AFFr 2  05 rr        	ora	tmp1
000B01r 2  C8           	iny
000B02r 2  91 rr        	sta	(ptr5),y
000B04r 2  88           	dey
000B05r 2               
000B05r 2  A9 3F        	lda	#63
000B07r 2  18           	clc
000B08r 2  65 rr        	adc	ptr5
000B0Ar 2  85 rr        	sta	ptr5
000B0Cr 2  90 02        	bcc	gpt013
000B0Er 2  E6 rr        	inc	ptr5+1
000B10r 2  C8           gpt013:	iny
000B11r 2  C0 08        	cpy	#8
000B13r 2  D0 9F        	bne	gpt01
000B15r 2  60           	rts
000B16r 2               gpt10a:	;(X&3) == 2
000B16r 2  E6 rr        	inc	ptr5
000B18r 2  D0 02        	bne	gpt10
000B1Ar 2  E6 rr        	inc	ptr5+1
000B1Cr 2               gpt10:
000B1Cr 2  A9 F0        	lda	#$F0
000B1Er 2  31 rr        	and	(ptr5),y
000B20r 2  85 rr        	sta	tmp1
000B22r 2  B1 rr        	lda	(ptr4),y
000B24r 2  4A           	lsr
000B25r 2  4A           	lsr
000B26r 2  4A           	lsr
000B27r 2  4A           	lsr
000B28r 2  05 rr        	ora	tmp1
000B2Ar 2  91 rr        	sta	(ptr5),y
000B2Cr 2  C8           	iny
000B2Dr 2  A9 3F        	lda	#$3F
000B2Fr 2  31 rr        	and	(ptr5),y
000B31r 2  85 rr        	sta	tmp1
000B33r 2  88           	dey
000B34r 2  B1 rr        	lda	(ptr4),y
000B36r 2  0A           	asl
000B37r 2  0A           	asl
000B38r 2  0A           	asl
000B39r 2  0A           	asl
000B3Ar 2  05 rr        	ora	tmp1
000B3Cr 2  C8           	iny
000B3Dr 2  91 rr        	sta	(ptr5),y
000B3Fr 2  88           	dey
000B40r 2               
000B40r 2  A9 40        	lda	#64
000B42r 2  18           	clc
000B43r 2  65 rr        	adc	ptr5
000B45r 2  85 rr        	sta	ptr5
000B47r 2  90 02        	bcc	gpt102
000B49r 2  E6 rr        	inc	ptr5+1
000B4Br 2  A9 F0        gpt102:	lda	#$F0
000B4Dr 2  31 rr        	and	(ptr5),y
000B4Fr 2  85 rr        	sta	tmp1
000B51r 2  B1 rr        	lda	(ptr4),y
000B53r 2  4A           	lsr
000B54r 2  4A           	lsr
000B55r 2  4A           	lsr
000B56r 2  4A           	lsr
000B57r 2  05 rr        	ora	tmp1
000B59r 2  91 rr        	sta	(ptr5),y
000B5Br 2  C8           	iny
000B5Cr 2  A9 3F        	lda	#$3F
000B5Er 2  31 rr        	and	(ptr5),y
000B60r 2  85 rr        	sta	tmp1
000B62r 2  88           	dey
000B63r 2  B1 rr        	lda	(ptr4),y
000B65r 2  0A           	asl
000B66r 2  0A           	asl
000B67r 2  0A           	asl
000B68r 2  0A           	asl
000B69r 2  05 rr        	ora	tmp1
000B6Br 2  C8           	iny
000B6Cr 2  91 rr        	sta	(ptr5),y
000B6Er 2  88           	dey
000B6Fr 2               
000B6Fr 2  A9 3F        	lda	#63
000B71r 2  18           	clc
000B72r 2  65 rr        	adc	ptr5
000B74r 2  85 rr        	sta	ptr5
000B76r 2  90 02        	bcc	gpt103
000B78r 2  E6 rr        	inc	ptr5+1
000B7Ar 2  C8           gpt103:	iny
000B7Br 2  C0 08        	cpy	#8
000B7Dr 2  D0 9D        	bne	gpt10
000B7Fr 2  60           	rts
000B80r 2               
000B80r 2               ;----- versi√≥n para modo color
000B80r 2               gputchpos4:
000B80r 2  A5 rr        	lda	tposx	; ptr5=destino
000B82r 2  0A           	asl
000B83r 2  65 rr        	adc	tposx	; X*3
000B85r 2  85 rr        	sta	ptr5
000B87r 2               
000B87r 2  A9 00        	lda	#0	; ptr4=origen
000B89r 2  85 rr        	sta	ptr4+1
000B8Br 2  68           	pla
000B8Cr 2  0A           	asl
000B8Dr 2  26 rr        	rol	ptr4+1
000B8Fr 2  0A           	asl
000B90r 2  26 rr        	rol	ptr4+1
000B92r 2  0A           	asl
000B93r 2  26 rr        	rol	ptr4+1
000B95r 2  18           	clc
000B96r 2  69 rr        	adc	#<font6x8
000B98r 2  85 rr        	sta	ptr4
000B9Ar 2  A5 rr        	lda	ptr4+1
000B9Cr 2  69 rr        	adc	#>font6x8
000B9Er 2  85 rr        	sta	ptr4+1
000BA0r 2               
000BA0r 2               	;jsr	setcol4
000BA0r 2               setcol4:
000BA0r 2  A9 00        	lda	#$00	; Pixel pair: 00
000BA2r 2  85 00        	sta	0
000BA4r 2  A9 0F        	lda	#$0F	; Pixel pair: 01
000BA6r 2  85 01        	sta	1
000BA8r 2  A9 F0        	lda	#$F0	; Pixel pair: 10
000BAAr 2  85 02        	sta	2
000BACr 2  A9 FF        	lda	#$FF	; Pixel pair: 11
000BAEr 2  85 03        	sta	3
000BB0r 2               
000BB0r 2  8A           	txa
000BB1r 2  48           	pha
000BB2r 2               
000BB2r 2  A0 00        	ldy	#0
000BB4r 2  B1 rr        gpt3:	lda	(ptr4),y
000BB6r 2  85 rr        	sta	tmp5
000BB8r 2  2A           	rol
000BB9r 2  26 rr        	rol	tmp5
000BBBr 2  2A           	rol
000BBCr 2  26 rr        	rol	tmp5
000BBEr 2  A5 rr        	lda	tmp5
000BC0r 2  29 03        	and	#3
000BC2r 2  AA           	tax
000BC3r 2  B5 00        	lda	0,x
000BC5r 2  91 rr        	sta	(ptr5),y
000BC7r 2  C8           	iny
000BC8r 2               
000BC8r 2  A5 rr        	lda	tmp5
000BCAr 2  2A           	rol
000BCBr 2  26 rr        	rol	tmp5
000BCDr 2  2A           	rol
000BCEr 2  26 rr        	rol	tmp5
000BD0r 2  A5 rr        	lda	tmp5
000BD2r 2  29 03        	and	#3
000BD4r 2  AA           	tax
000BD5r 2  B5 00        	lda	0,x
000BD7r 2  91 rr        	sta	(ptr5),y
000BD9r 2  C8           	iny
000BDAr 2               
000BDAr 2  A5 rr        	lda	tmp5
000BDCr 2  2A           	rol
000BDDr 2  26 rr        	rol	tmp5
000BDFr 2  2A           	rol
000BE0r 2  26 rr        	rol	tmp5
000BE2r 2  A5 rr        	lda	tmp5
000BE4r 2  29 03        	and	#3
000BE6r 2  AA           	tax
000BE7r 2  B5 00        	lda	0,x
000BE9r 2  91 rr        	sta	(ptr5),y
000BEBr 2  88           	dey
000BECr 2               
000BECr 2  A9 7F        	lda	#127
000BEEr 2  18           	clc
000BEFr 2  65 rr        	adc	ptr5
000BF1r 2  85 rr        	sta	ptr5
000BF3r 2  A5 rr        	lda	ptr5+1
000BF5r 2  69 00        	adc	#0
000BF7r 2  85 rr        	sta	ptr5+1
000BF9r 2               
000BF9r 2  C0 08        	cpy	#8
000BFBr 2  D0 B7        	bne	gpt3
000BFDr 2               
000BFDr 2  68           	pla
000BFEr 2  AA           	tax
000BFFr 2               
000BFFr 2  60           	rts
000C00r 2               
000C00r 2               ;------------------------------------------------------------
000C00r 2               ; EMULACION de TERMINAL
000C00r 2               ;------------------------------------------------------------
000C00r 2               	.export gputch		; Caracteres especiales interpretados
000C00r 2  20 rr rr     gputch:	jsr	vmap
000C03r 2  C9 0A        	cmp	#10		; NL
000C05r 2  D0 4A        	bne	gptch1
000C07r 2  A9 00        	lda	#0
000C09r 2  85 rr        	sta	tposx
000C0Br 2  E6 rr        	inc	tposy
000C0Dr 2  A5 rr        	lda	tposy		; Scrool?
000C0Fr 2  C9 19        	cmp	#25
000C11r 2  F0 03        	beq	scrl0
000C13r 2  4C rr rr     	jmp	vunmap
000C16r 2               	;----------------------
000C16r 2               	; scrool
000C16r 2               	;----------------------
000C16r 2  C6 rr        scrl0:	dec	tposy
000C18r 2  A9 20        	lda	#$20	;vpag
000C1Ar 2  85 rr        	sta	ptr4+1
000C1Cr 2  18           	clc
000C1Dr 2  69 04        	adc	#4
000C1Fr 2  85 rr        	sta	ptr5+1
000C21r 2  A9 00        	lda	#0
000C23r 2  85 rr        	sta	ptr5
000C25r 2  85 rr        	sta	ptr4
000C27r 2  A9 60        	lda	#96
000C29r 2  85 rr        	sta	tmp5
000C2Br 2  A0 00        	ldy	#0
000C2Dr 2  B1 rr        scrl1:	lda	(ptr5),y
000C2Fr 2  91 rr        	sta	(ptr4),y
000C31r 2  C8           	iny
000C32r 2  D0 F9        	bne	scrl1
000C34r 2  E6 rr        	inc	ptr5+1
000C36r 2  E6 rr        	inc	ptr4+1
000C38r 2  C6 rr        	dec	tmp5
000C3Ar 2  D0 F1        	bne	scrl1
000C3Cr 2  A9 04        	lda	#4
000C3Er 2  85 rr        	sta	tmp5
000C40r 2  A0 00        	ldy	#0
000C42r 2  98           	tya
000C43r 2  91 rr        scrl2:	sta	(ptr4),y
000C45r 2  C8           	iny
000C46r 2  D0 FB        	bne	scrl2
000C48r 2  E6 rr        	inc	ptr4+1
000C4Ar 2  C6 rr        	dec	tmp5
000C4Cr 2  D0 F5        	bne	scrl2
000C4Er 2  4C rr rr     	jmp	vunmap	;rts
000C51r 2               
000C51r 2  C9 0D        gptch1:	cmp	#13		; CR
000C53r 2  D0 07        	bne	gptch2
000C55r 2  A9 00        	lda	#0
000C57r 2  85 rr        	sta	tposx
000C59r 2  4C rr rr     	jmp	vunmap	;rts
000C5Cr 2  C9 08        gptch2:	cmp	#8		; backspace
000C5Er 2  D0 09        	bne	gptch3
000C60r 2  C6 rr        	dec	tposx
000C62r 2  10 33        	bpl	retg1
000C64r 2  E6 rr        	inc	tposx
000C66r 2  4C rr rr     	jmp	vunmap	;rts
000C69r 2  C9 09        gptch3:	cmp	#9		; Tab
000C6Br 2  D0 0C        	bne	gptch4
000C6Dr 2  A9 08        	lda	#8
000C6Fr 2  18           	clc
000C70r 2  65 rr        	adc	tposx
000C72r 2  29 F8        	and	#$F8
000C74r 2  85 rr        	sta	tposx
000C76r 2  4C rr rr     	jmp	vunmap	;rts
000C79r 2               
000C79r 2               gptch4:
000C79r 2  48           	pha			; Caracteres normales (imprimibles)
000C7Ar 2  A9 01        	lda	#1
000C7Cr 2  2C 03 E0     	bit	STAT2		;vmod
000C7Fr 2  F0 0A        	beq	gptch8
000C81r 2  68           	pla
000C82r 2  A0 29        	ldy	#41
000C84r 2  C4 rr        	cpy	tposx
000C86r 2  B0 0A        	bcs	gptch9
000C88r 2  4C rr rr     	jmp	vunmap	;rts
000C8Br 2  68           gptch8:	pla
000C8Cr 2  A4 rr        	ldy	coltxt
000C8Er 2  C4 rr        	cpy	tposx		; X > coltxt => fuera de pantalla
000C90r 2  90 05        	bcc	retg1
000C92r 2  20 rr rr     gptch9:	jsr	gputchpos
000C95r 2  E6 rr        	inc	tposx
000C97r 2  4C rr rr     retg1:	jmp	vunmap	;rts
000C9Ar 2               
000C9Ar 2               	.export gputs
000C9Ar 2               	; X offset desde msgs
000C9Ar 2  60           retg2:	rts
000C9Br 2  BD rr rr     gputs:	lda	msgs,x
000C9Er 2  F0 FA        	beq	retg2
000CA0r 2  20 rr rr     	jsr	gputch
000CA3r 2  E8           	inx
000CA4r 2  4C rr rr     	jmp	gputs
000CA7r 2               
000CA7r 2               ;--------------------------------------
000CA7r 2               ; Setpixel, clrpixel, tglpixel
000CA7r 2               ;	tmp1,tmp2: X
000CA7r 2               ;	tmp3,tmp4: Y
000CA7r 2               
000CA7r 2               	.export setpixel, clrpixel, tglpixel
000CA7r 2               
000CA7r 2               
000CA7r 2               calpxaddr:
000CA7r 2  20 rr rr     	jsr	vmap
000CAAr 2  AD rr rr     	lda	param
000CADr 2  85 rr        	sta	tmp1
000CAFr 2  AD rr rr     	lda	param+1
000CB2r 2  85 rr        	sta	tmp2
000CB4r 2  AD rr rr     	lda	param+2
000CB7r 2  85 rr        	sta	tmp3
000CB9r 2  AD rr rr     	lda	param+3
000CBCr 2  85 rr        	sta	tmp4
000CBEr 2               
000CBEr 2  A9 80        	lda	#$80
000CC0r 2  85 rr        	sta	tmp5
000CC2r 2  A9 07        	lda	#7	; tmp5=(0x80>>(x&7))
000CC4r 2  25 rr        	and	tmp1
000CC6r 2  F0 06        	beq	spx2
000CC8r 2  A8           	tay
000CC9r 2  46 rr        spx1:	lsr	tmp5
000CCBr 2  88           	dey
000CCCr 2  D0 FB        	bne	spx1
000CCEr 2  46 rr        spx2:	lsr	tmp1+1	; X/8
000CD0r 2  66 rr        	ror	tmp1
000CD2r 2  46 rr        	lsr	tmp1+1
000CD4r 2  66 rr        	ror	tmp1
000CD6r 2  46 rr        	lsr	tmp1+1
000CD8r 2  66 rr        	ror	tmp1
000CDAr 2               
000CDAr 2  66 rr        	ror	tmp3+1	; Y*64
000CDCr 2  66 rr        	ror	tmp3
000CDEr 2  66 rr        	ror	tmp3+1
000CE0r 2  66 rr        	ror	tmp3
000CE2r 2  66 rr        	ror	tmp3+1
000CE4r 2  A9 C0        	lda	#$C0
000CE6r 2  25 rr        	and	tmp3+1	; intercambio H <-> L: ahora tmp3+1 es LSB
000CE8r 2               ;	sta	tmp3+1
000CE8r 2               
000CE8r 2  18           	clc
000CE9r 2               ;	lda	tmp3+1	; tmp1= Y*64 + X/8 +vpag*256
000CE9r 2  65 rr        	adc	tmp1
000CEBr 2  85 rr        	sta	tmp1
000CEDr 2  A5 rr        	lda	tmp3	; MSB
000CEFr 2  65 rr        	adc	tmp1+1
000CF1r 2  69 20        	adc	#$20	; vpag
000CF3r 2  85 rr        	sta	tmp1+1
000CF5r 2  A0 00        	ldy	#0
000CF7r 2  B1 rr        	lda	(tmp1),y
000CF9r 2  60           	rts
000CFAr 2               
000CFAr 2               setpixel:
000CFAr 2  20 rr rr     	jsr	calpxaddr
000CFDr 2  05 rr        	ora	tmp5
000CFFr 2  91 rr        	sta	(tmp1),y
000D01r 2  4C rr rr     	jmp	vunmap
000D04r 2               clrpixel:
000D04r 2  20 rr rr     	jsr	calpxaddr
000D07r 2  05 rr        	ora	tmp5
000D09r 2  45 rr        	eor	tmp5
000D0Br 2  91 rr        	sta	(tmp1),y
000D0Dr 2  4C rr rr     	jmp	vunmap
000D10r 2               tglpixel:
000D10r 2  20 rr rr     	jsr	calpxaddr
000D13r 2  45 rr        	eor	tmp5
000D15r 2  91 rr        	sta	(tmp1),y
000D17r 2  4C rr rr     	jmp	vunmap
000D1Ar 2               
000D1Ar 2               ;------------------------------------------------
000D1Ar 2               ; Putpixel para modo 4bpp
000D1Ar 2               ; tmp1: X
000D1Ar 2               ; tmp2: Y
000D1Ar 2               ; tmp3: color
000D1Ar 2               	.export putpixel4
000D1Ar 2               putpixel4:
000D1Ar 2  20 rr rr     	jsr	vmap
000D1Dr 2  AD rr rr     	lda	param
000D20r 2  85 rr        	sta	tmp1
000D22r 2  AD rr rr     	lda	param+1
000D25r 2  85 rr        	sta	tmp2
000D27r 2               
000D27r 2  A9 0F        	lda	#$0F
000D29r 2  2D rr rr     	and	param+2
000D2Cr 2  85 rr        	sta	tmp3
000D2Er 2  A9 00        	lda 	#0	; tmp2:ptr1 = Y*128 (tmp2: MSB)
000D30r 2  18           	clc
000D31r 2  66 rr        	ror	tmp2
000D33r 2  6A           	ror
000D34r 2  85 rr        	sta	ptr1
000D36r 2               
000D36r 2  A5 rr        	lda	tmp1	; A=X/2
000D38r 2  4A           	lsr
000D39r 2  18           	clc
000D3Ar 2  65 rr        	adc	ptr1	; ptr1 = vpag*256 + Y*128 + X/2
000D3Cr 2  85 rr        	sta	ptr1
000D3Er 2  A5 rr        	lda	tmp2
000D40r 2  69 20        	adc	#$20	;vpag
000D42r 2  85 rr        	sta	ptr1+1
000D44r 2               
000D44r 2  A0 00        	ldy	#0
000D46r 2  46 rr        	lsr	tmp1
000D48r 2  B0 13        	bcs	ppx41
000D4Ar 2  A9 0F        	lda	#$0F
000D4Cr 2  31 rr        	and	(ptr1),y
000D4Er 2  06 rr        	asl	tmp3
000D50r 2  06 rr        	asl	tmp3
000D52r 2  06 rr        	asl	tmp3
000D54r 2  06 rr        	asl	tmp3
000D56r 2  05 rr        	ora	tmp3
000D58r 2  91 rr        	sta	(ptr1),y
000D5Ar 2  4C rr rr     	jmp	vunmap
000D5Dr 2  B1 rr        ppx41:	lda	(ptr1),y
000D5Fr 2  29 F0        	and	#$F0
000D61r 2  05 rr        	ora	tmp3
000D63r 2  91 rr        	sta	(ptr1),y
000D65r 2  4C rr rr     	jmp	vunmap
000D68r 2               
000D68r 2               
000D68r 1               
000D68r 1               ;-----------------------------------------------------------------------
000D68r 1               ;-----------------------------------------------------------------------
000D68r 1               ; 			IRQ/BRK Handler and debugger
000D68r 1               ;   (The first 40 instrucctions of this code must not cross a page)
000D68r 1               ;-----------------------------------------------------------------------
000D68r 1               ;-----------------------------------------------------------------------
000D68r 1               	.include "irqbrk.s"
000D68r 2               ; ------------------------------------------------------------------------
000D68r 2               ; ------------------------------------------------------------------------
000D68r 2               ; 			IRQ & NMI routines
000D68r 2               ; ------------------------------------------------------------------------
000D68r 2               ; ------------------------------------------------------------------------
000D68r 2               
000D68r 2               	.export _irqbrk
000D68r 2               _irqbrk:
000D68r 2  48           rql1:	pha			; save registers
000D69r 2  8A           	txa
000D6Ar 2  48           	pha
000D6Br 2  98           	tya
000D6Cr 2  48           	pha
000D6Dr 2  D8           	cld			; decimal mode off
000D6Er 2               
000D6Er 2               	;--------------------------------
000D6Er 2               	;	Check if BRK
000D6Er 2  BA           	tsx
000D6Fr 2  E8           	inx
000D70r 2  E8           	inx
000D71r 2  E8           	inx
000D72r 2  E8           	inx		; 100,X -> saved P reg in stack
000D73r 2  BD 00 01     	lda	$100,x
000D76r 2  29 10        	and	#$10
000D78r 2  F0 03        	beq	irq05
000D7Ar 2  4C rr rr     	jmp	dobrk
000D7Dr 2               	;--------------------------------
000D7Dr 2               	;  Hardware interrupts
000D7Dr 2  2C 02 E0     irq05:	bit	STAT1		; HSYN?
000D80r 2  30 4D        	bmi	irhsyn
000D82r 2  70 57        	bvs	irvsyn		; VSYN?
000D84r 2  2C 03 E0     	bit	STAT2		; KBD
000D87r 2  10 03        	bpl	irq1
000D89r 2  4C rr rr     	jmp	keyboardirq
000D8Cr 2  A9 10        irq1:	lda	#$10
000D8Er 2  2C 01 E0     	bit 	USTAT		; UART RX?
000D91r 2  F0 15        	beq	irq2
000D93r 2  AD 00 E0     	lda	URXD
000D96r 2  85 rr        	sta	urxd		; save received data
000D98r 2  C9 03        	cmp	#('C'-64)	; CTL-C ? -> enter monitor
000D9Ar 2  D0 03        	bne	irux3
000D9Cr 2  4C rr rr     	jmp	dotim0
000D9Fr 2  A9 01        irux3:	lda	#1		; notify new data
000DA1r 2  05 rr        	ora	cinflg
000DA3r 2  85 rr        	sta	cinflg
000DA5r 2  4C rr rr     	jmp	finirq
000DA8r 2               	;--------------------------------
000DA8r 2  A9 20        irq2:	lda	#$20
000DAAr 2  2C 01 E0     	bit	USTAT
000DADr 2  D0 38        	bne	irutx		; UART TX?
000DAFr 2               	;------------------------------------------
000DAFr 2               irq25:	; Nothing else => was the single-step timer
000DAFr 2  4C rr rr     	jmp	dotimer
000DB2r 2               
000DB2r 2  BA           sstep:	tsx
000DB3r 2  E8           	inx
000DB4r 2  E8           	inx
000DB5r 2  E8           	inx
000DB6r 2  E8           	inx
000DB7r 2  A9 FB        	lda	#(~4)&$ff
000DB9r 2  3D 00 01     	and	$100,x		; Clear the IRQ mask bit on the stack
000DBCr 2  9D 00 01     	sta	$100,x
000DBFr 2               	; new IRQ just after returning and fetching 1 op-code
000DBFr 2  AD 02 E0     	lda	STAT1
000DC2r 2  29 0F        	and	#$0F
000DC4r 2  09 10        	ora	#$10
000DC6r 2  8D 02 E0     	sta	CTRL1		; IRQ after 23 cycles
000DC9r 2               
000DC9r 2               finirq:	; 22 cycles until return
000DC9r 2  68           	pla			; restore registers
000DCAr 2  A8           	tay
000DCBr 2  68           	pla
000DCCr 2  AA           	tax
000DCDr 2  68           	pla
000DCEr 2  40           defISR:	rti
000DCFr 2               
000DCFr 2               irhsyn:	; setting up a stack frame for a RTI return from a software vector
000DCFr 2  A9 rr        	lda	#>finirq	; PCH
000DD1r 2  48           	pha
000DD2r 2  A9 rr        	lda	#<finirq	; PCL
000DD4r 2  48           	pha
000DD5r 2  A9 00        	lda	#0		; Status reg
000DD7r 2  48           	pha
000DD8r 2  6C rr rr     	jmp    	(hsynvec)
000DDBr 2               
000DDBr 2               irvsyn:	; setting up a stack frame for a RTI return from a software vector
000DDBr 2  A9 rr        	lda	#>finirq	; PCH
000DDDr 2  48           	pha
000DDEr 2  A9 rr        	lda	#<finirq	; PCL
000DE0r 2  48           	pha
000DE1r 2  A9 00        	lda	#0		; Status reg
000DE3r 2  48           	pha
000DE4r 2  6C rr rr     	jmp    	(vsynvec)
000DE7r 2               
000DE7r 2               irutx:	; setting up a stack frame for a RTI return from a software vector
000DE7r 2  A9 rr        	lda	#>finirq	; PCH
000DE9r 2  48           	pha
000DEAr 2  A9 rr        	lda	#<finirq	; PCL
000DECr 2  48           	pha
000DEDr 2  A9 00        	lda	#0		; Status reg
000DEFr 2  48           	pha
000DF0r 2  6C rr rr     	jmp    	(utxvec)
000DF3r 2               
000DF3r 2               ; ------------------------------------------------------------------------
000DF3r 2               	stacktop=tmp2		; aliases for some ZP variables
000DF3r 2               	zptop=tposx
000DF3r 2               
000DF3r 2               ; ------------------------------------------------------------------------
000DF3r 2               ; NMI: Breakpoints hardware, (if there are any)
000DF3r 2               ; ------------------------------------------------------------------------
000DF3r 2               
000DF3r 2  48           _nmi:	pha			; save registers
000DF4r 2  8A           	txa
000DF5r 2  48           	pha
000DF6r 2  98           	tya
000DF7r 2  48           	pha
000DF8r 2  D8           	cld			; decimal mode off
000DF9r 2  BA           	tsx
000DFAr 2  E8           	inx
000DFBr 2  E8           	inx
000DFCr 2  E8           	inx
000DFDr 2  E8           	inx			; 100,X -> saved P reg in stack
000DFEr 2  A0 00        	ldy	#0		; saving needed ZP variables
000E00r 2  B9 00 00     nmi1:	lda	0,y
000E03r 2  48           	pha
000E04r 2  C8           	iny
000E05r 2  C0 rr        	cpy	#zptop
000E07r 2  D0 F7        	bne	nmi1
000E09r 2               
000E09r 2  E8           	inx
000E0Ar 2  E8           	inx
000E0Br 2  86 rr        	stx	tmp3		; begining of stack frame
000E0Dr 2  86 rr        	stx	stacktop	; (copy)
000E0Fr 2  BD 00 01     	lda	$100,x		; ptr1 = PC
000E12r 2  85 rr        	sta	ptr1+1
000E14r 2  CA           	dex
000E15r 2  BD 00 01     	lda	$100,x
000E18r 2  85 rr        	sta	ptr1
000E1Ar 2  20 rr rr     	jsr	gohome
000E1Dr 2  A2 C7        	ldx	#(msgNMI-msgs)	; *** NMI *** message on UART
000E1Fr 2  4C rr rr     	jmp	dbrk36
000E22r 2               
000E22r 2               ; ------------------------------------------------------------------------
000E22r 2               ; 			Timer IRQ code (single step)
000E22r 2               ; ------------------------------------------------------------------------
000E22r 2               
000E22r 2               dotimer:
000E22r 2  AD 02 E0     	lda	STAT1
000E25r 2  29 0F        	and	#$0F
000E27r 2  09 20        	ora	#$20
000E29r 2  8D 02 E0     	sta	CTRL1		; clear flag
000E2Cr 2  A0 00        dotim0:	ldy	#0		; saving needed ZP variables
000E2Er 2  B9 00 00     dotim1:	lda	0,y
000E31r 2  48           	pha
000E32r 2  C8           	iny
000E33r 2  C0 rr        	cpy	#zptop
000E35r 2  D0 F7        	bne	dotim1
000E37r 2  58           	cli			; Permitimos anidar IRQs para no perder datos en cin
000E38r 2               
000E38r 2  E8           	inx
000E39r 2  E8           	inx
000E3Ar 2  86 rr        reprt:	stx	tmp3		; begining of stack frame
000E3Cr 2  86 rr        	stx	stacktop		; (copy)
000E3Er 2  BD 00 01     	lda	$100,x		; ptr1 = PC
000E41r 2  85 rr        	sta	ptr1+1
000E43r 2  CA           	dex
000E44r 2  BD 00 01     	lda	$100,x
000E47r 2  85 rr        	sta	ptr1
000E49r 2  4C rr rr     	jmp	dobrk4
000E4Cr 2               ; ------------------------------------------------------------------------
000E4Cr 2               ; 				BRK code
000E4Cr 2               ; ------------------------------------------------------------------------
000E4Cr 2  A0 00        dobrk:	ldy	#0		; saving needed ZP variables
000E4Er 2  B9 00 00     dobrk1:	lda	0,y
000E51r 2  48           	pha
000E52r 2  C8           	iny
000E53r 2  C0 rr        	cpy	#zptop
000E55r 2  D0 F7        	bne	dobrk1
000E57r 2  58           	cli			; Permitimos anidar IRQs para no perder datos en cin
000E58r 2               
000E58r 2  E8           	inx
000E59r 2  E8           	inx
000E5Ar 2  86 rr        	stx	tmp3		; begining of stack frame
000E5Cr 2  86 rr        	stx	stacktop	; (copy)
000E5Er 2               
000E5Er 2               	; Check for breakpoint
000E5Er 2  CA           	dex
000E5Fr 2  38           	sec
000E60r 2  BD 00 01     	lda	$100,x		; ptr1 = PC-2
000E63r 2  E9 02        	sbc	#2
000E65r 2  85 rr        	sta	ptr1
000E67r 2  E8           	inx
000E68r 2  BD 00 01     	lda	$100,x
000E6Br 2  E9 00        	sbc	#0
000E6Dr 2  85 rr        	sta	ptr1+1
000E6Fr 2               
000E6Fr 2  C5 rr        	cmp	brkp+1		; ptr1 == brkp?
000E71r 2  D0 1B        	bne	dobrk3
000E73r 2  A5 rr        	lda	ptr1
000E75r 2  C5 rr        	cmp	brkp
000E77r 2  D0 15        	bne	dobrk3
000E79r 2  A0 00        	ldy	#0		; it was a programmed breakpoint
000E7Br 2  A5 rr        	lda	brkp+2		; restore the original opcode
000E7Dr 2  91 rr        	sta	(ptr1),y
000E7Fr 2  A5 rr        	lda	ptr1+1		; and adjust the PC copy on the stack
000E81r 2  9D 00 01     	sta	$100,x
000E84r 2  CA           	dex
000E85r 2  A5 rr        	lda	ptr1
000E87r 2  9D 00 01     	sta	$100,x
000E8Ar 2  E8           	inx
000E8Br 2  4C rr rr     	jmp	dobrk33
000E8Er 2               
000E8Er 2               	; This breackpoint wasn't programmed, leave PC as it is
000E8Er 2  BD 00 01     dobrk3:	lda	$100,x		; ptr1 = PC
000E91r 2  85 rr        	sta	ptr1+1
000E93r 2  CA           	dex
000E94r 2  BD 00 01     	lda	$100,x
000E97r 2  85 rr        	sta	ptr1
000E99r 2               
000E99r 2  A5 rr        	lda	ptr1		; check if PC points to the fake RTS
000E9Br 2  C9 rr        	cmp	#<(fakerts+2)
000E9Dr 2  D0 15        	bne	dobrk35
000E9Fr 2  A5 rr        	lda	ptr1+1
000EA1r 2  C9 rr        	cmp	#>(fakerts+2)
000EA3r 2  D0 0F        	bne	dobrk35
000EA5r 2               dobrk33:
000EA5r 2  24 rr        	bit	cinflg		; pause if there is some text to read
000EA7r 2  10 19        	bpl	dobrk4
000EA9r 2  A2 BB        	ldx	#(msgpause-msgs)
000EABr 2  20 rr rr     	jsr	cputs
000EAEr 2  20 rr rr     	jsr	cin	;uart_getch	; pause
000EB1r 2  4C rr rr     	jmp	dobrk4		; don't alert in this case
000EB4r 2               dobrk35:
000EB4r 2  20 rr rr     	jsr	gohome
000EB7r 2  A2 39        	ldx	#(msgBRK-msgs)	; *** BRK *** message on UART
000EB9r 2  20 rr rr     dbrk36:	jsr	cputs
000EBCr 2  20 rr rr     	jsr	nlinecls
000EBFr 2  4C rr rr     	jmp	dbrk1
000EC2r 2               
000EC2r 2               ; ------------------------------------------------------------------------
000EC2r 2               ;	Print state: registers
000EC2r 2               ; ------------------------------------------------------------------------
000EC2r 2               
000EC2r 2  A5 rr        dobrk4:	lda     iochan          ; copia de estado de consola
000EC4r 2  8D rr rr             sta     sch
000EC7r 2  A5 rr                lda     coltxt
000EC9r 2  8D rr rr             sta     sch+1
000ECCr 2  AD 03 E0             lda     STAT2
000ECFr 2  8D rr rr             sta     sch+2
000ED2r 2  29 FE                and     #$FE            ; monocromo
000ED4r 2  8D 03 E0             sta     CTRL2
000ED7r 2  A9 54                lda     #84
000ED9r 2  85 rr                sta     coltxt
000EDBr 2  A9 C3                lda     #$C3
000EDDr 2  85 rr                sta     iochan
000EDFr 2               
000EDFr 2  20 rr rr             jsr	gohome		; Go to upper-left corner of screen
000EE2r 2               
000EE2r 2               	; Register dump
000EE2r 2  A2 48        dbrk1:	ldx	#(msgPC-msgs)
000EE4r 2  20 rr rr     	jsr	cputs
000EE7r 2  A5 rr        	lda	ptr1+1		; PCH
000EE9r 2  20 rr rr     	jsr	prthex
000EECr 2  C6 rr        	dec	tmp3
000EEEr 2  A5 rr        	lda	ptr1		; PCL
000EF0r 2  20 rr rr     	jsr	prthex
000EF3r 2  C6 rr        	dec	tmp3
000EF5r 2  A2 4C        	ldx	#(msgP-msgs)
000EF7r 2  20 rr rr     	jsr	cputs
000EFAr 2  A6 rr        	ldx	tmp3
000EFCr 2  BD 00 01     	lda	$100,x		; P
000EFFr 2  A0 00        	ldy	#0		; Print P register bit by bit
000F01r 2  0A           bpreg:	asl	a
000F02r 2  48           	pha
000F03r 2  A9 2E        	lda	#'.'
000F05r 2  90 03        	bcc	bpreg1
000F07r 2  B9 rr rr     	lda	msgflags,y
000F0Ar 2  20 rr rr     bpreg1:	jsr	cout
000F0Dr 2  68           	pla
000F0Er 2  C8           	iny
000F0Fr 2  C0 08        	cpy	#8
000F11r 2  D0 EE        	bne	bpreg
000F13r 2               
000F13r 2  A2 5A        	ldx	#(msgA-msgs)
000F15r 2  20 rr rr     	jsr	cputs
000F18r 2  A4 rr        	ldy	tmp3
000F1Ar 2  88           	dey
000F1Br 2  B9 00 01     	lda	$100,y		; A
000F1Er 2  20 rr rr     	jsr	prthex
000F21r 2               
000F21r 2  A2 5F        	ldx	#(msgX-msgs)
000F23r 2  20 rr rr     	jsr	cputs
000F26r 2  88           	dey
000F27r 2  B9 00 01     	lda	$100,y		; X
000F2Ar 2  20 rr rr     	jsr	prthex
000F2Dr 2               
000F2Dr 2  A2 64        	ldx	#(msgY-msgs)
000F2Fr 2  20 rr rr     	jsr	cputs
000F32r 2  88           	dey
000F33r 2  B9 00 01     	lda	$100,y		; Y
000F36r 2  20 rr rr     	jsr	prthex
000F39r 2               
000F39r 2  A2 69        	ldx	#(msgS-msgs)
000F3Br 2  20 rr rr     	jsr	cputs
000F3Er 2  A5 rr        	lda	tmp3		; S value before BRK
000F40r 2  20 rr rr     	jsr	prthex
000F43r 2               
000F43r 2  20 rr rr     	jsr	nlinecls
000F46r 2               
000F46r 2  24 rr        	bit	iochan
000F48r 2  10 05        	bpl	bpr22
000F4Ar 2  A2 71        	ldx	#(msgtab47-msgs)
000F4Cr 2  20 rr rr     	jsr	uputs
000F4Fr 2  24 rr        bpr22:	bit	iochan
000F51r 2  50 04        	bvc	bpr23
000F53r 2  A9 2F        	lda	#47
000F55r 2  85 rr        	sta	tposx
000F57r 2  A2 77        bpr23:	ldx	#(msgZP-msgs)
000F59r 2  20 rr rr     	jsr	cputs
000F5Cr 2               ; ------------------------------------------------------------------------
000F5Cr 2               ;	Print state:
000F5Cr 2               ;	dissassemble 16 instrs at PC and dump Zero Page of memory
000F5Cr 2               ; ------------------------------------------------------------------------
000F5Cr 2  84 rr        	sty	tmp3
000F5Er 2  20 rr rr     	jsr	nlinecls	; End of line
000F61r 2               
000F61r 2  20 rr rr     	jsr	dissaOP
000F64r 2  A5 rr        	lda	ptr1		; save next instrucction address
000F66r 2  85 rr        	sta	ptr2
000F68r 2  A5 rr        	lda	ptr1+1
000F6Ar 2  85 rr        	sta	ptr2+1
000F6Cr 2  20 rr rr     	jsr	tab28
000F6Fr 2  A9 00        	lda	#0
000F71r 2  20 rr rr     	jsr	prthex
000F74r 2  A2 6E        	ldx	#(msgspm-msgs)
000F76r 2  20 rr rr     	jsr	cputs
000F79r 2               
000F79r 2  A4 rr        	ldy	tmp3
000F7Br 2  BA           	tsx
000F7Cr 2  E8           	inx
000F7Dr 2  86 rr        	stx	tmp3
000F7Fr 2  88           pzp1:	dey			; print ZP variables from the stack
000F80r 2  B9 00 01     	lda	$100,y
000F83r 2  20 rr rr     	jsr	prthex
000F86r 2  A9 20        	lda	#' '
000F88r 2  20 rr rr     	jsr	cout
000F8Br 2  C4 rr        	cpy	tmp3
000F8Dr 2  D0 F0        	bne	pzp1
000F8Fr 2               
000F8Fr 2  A0 rr        	ldy	#zptop		; the rest of first line from ZP
000F91r 2  B9 00 00     pzp2:	lda	0,y
000F94r 2  C8           	iny
000F95r 2  20 rr rr     	jsr	prthex
000F98r 2  A9 20        	lda	#' '
000F9Ar 2  20 rr rr     	jsr	cout
000F9Dr 2  C0 10        	cpy	#16
000F9Fr 2  D0 F0        	bne	pzp2
000FA1r 2  20 rr rr     	jsr	nlinecls	; End of line
000FA4r 2  A0 10        	ldy	#16
000FA6r 2               
000FA6r 2  84 rr        pzp3:	sty	tmp3		; rest of lines
000FA8r 2  20 rr rr     	jsr	dissaOP
000FABr 2  A4 rr        	ldy	tmp3
000FADr 2  20 rr rr     	jsr	tab28
000FB0r 2  98           	tya
000FB1r 2  20 rr rr     	jsr	prthex
000FB4r 2  A2 6E        	ldx	#(msgspm-msgs)
000FB6r 2  20 rr rr     	jsr	cputs
000FB9r 2  A2 10        	ldx	#16
000FBBr 2  B9 00 00     pzp4:	lda	0,y
000FBEr 2  20 rr rr     	jsr	prthex
000FC1r 2  A9 20        	lda	#' '
000FC3r 2  20 rr rr     	jsr	cout
000FC6r 2  C8           	iny
000FC7r 2  F0 09        	beq	pzpf
000FC9r 2  CA           	dex
000FCAr 2  D0 EF        	bne	pzp4
000FCCr 2  20 rr rr     	jsr	nlinecls
000FCFr 2  4C rr rr     	jmp	pzp3
000FD2r 2               
000FD2r 2  20 rr rr     pzpf:	jsr	nlinecls
000FD5r 2  20 rr rr     	jsr	nlinecls
000FD8r 2  A2 86        	ldx	#(msgstack-msgs)	; print stack trace
000FDAr 2  20 rr rr     	jsr	cputs
000FDDr 2  A5 rr        	lda	stacktop
000FDFr 2  AA           	tax
000FE0r 2  A0 18        	ldy	#24
000FE2r 2  E8           pst1:	inx
000FE3r 2  F0 0E        	beq	pst2
000FE5r 2  BD 00 01     	lda	$100,x
000FE8r 2  20 rr rr     	jsr	prthex
000FEBr 2  A9 20        	lda	#' '
000FEDr 2  20 rr rr     	jsr	cout
000FF0r 2  88           	dey
000FF1r 2  D0 EF        	bne	pst1
000FF3r 2  20 rr rr     pst2:	jsr	nlinecls
000FF6r 2               
000FF6r 2               ; ------------------------------------------------------------------------
000FF6r 2               ; read a command from uart and execute it
000FF6r 2               ; ------------------------------------------------------------------------
000FF6r 2               
000FF6r 2  20 rr rr     mon1:	jsr	nline
000FF9r 2  24 rr        	bit	iochan
000FFBr 2  50 03        	bvc	mon01
000FFDr 2  20 rr rr     	jsr	clrrest
001000r 2  A2 8E        mon01:	ldx	#(msgmonprom-msgs) ;prompt on UART
001002r 2  20 rr rr     	jsr	cputs
001005r 2  24 rr        	bit	iochan
001007r 2  10 05        	bpl	mon02
001009r 2  A2 A0        	ldx	#(msgclrrest-msgs) ;prompt on UART
00100Br 2  20 rr rr     	jsr	uputs
00100Er 2               
00100Er 2  20 rr rr     mon02:	jsr	cin	;uart_getch	; get character
001011r 2  20 rr rr     	jsr	cout	; echo
001014r 2  C9 73        	cmp	#'s'		; -------- single step -------
001016r 2  D0 07        	bne	mon2
001018r 2  20 rr rr     	jsr	nline
00101Br 2  38           	sec
00101Cr 2  4C rr rr     	jmp	dobrk5
00101Fr 2  C9 6D        mon2:	cmp	#'m'		; -------- memory dump -------
001021r 2  D0 0B        	bne	mon3
001023r 2  20 rr rr     	jsr	dodir		; read address into ptr1
001026r 2  B0 CE        	bcs	mon1
001028r 2  20 rr rr     	jsr	hexdump		; do dump
00102Br 2  4C rr rr     	jmp	mon1
00102Er 2  C9 67        mon3:	cmp	#'g'		; -------- goto address (execute) -------
001030r 2  D0 16        	bne	mon35
001032r 2  20 rr rr     	jsr	dodir		; read address into ptr1
001035r 2  B0 BF        	bcs	mon1
001037r 2  18           mon31:	clc
001038r 2  A6 rr        	ldx	stacktop	; and place it on the stack
00103Ar 2  A5 rr        	lda	ptr1+1
00103Cr 2  9D 00 01     	sta	$100,x
00103Fr 2  CA           	dex
001040r 2  A5 rr        	lda	ptr1
001042r 2  9D 00 01     	sta	$100,x
001045r 2  4C rr rr     	jmp	dobrk5
001048r 2  C9 74        mon35:	cmp	#'t'		; --------  trace address (execute sigle-step)
00104Ar 2  D0 08        	bne	mon4
00104Cr 2  20 rr rr     	jsr	setbrk		; read breakpoint & address
00104Fr 2  90 E6        	bcc	mon31		; unconditional branch
001051r 2  4C rr rr     	jmp	mon1
001054r 2  C9 64        mon4:	cmp	#'d'		; -------- dissasemble code -------
001056r 2  D0 17        	bne	mon5
001058r 2  20 rr rr     	jsr	dodir		; read address into ptr1
00105Br 2  B0 99        	bcs	mon1
00105Dr 2  A2 10        dissa:	ldx	#16		; number of instuctions to dissasemble
00105Fr 2  8A           dis01:	txa
001060r 2  48           	pha
001061r 2  20 rr rr     	jsr	dissaOP		; dissasemble one OP-code
001064r 2  20 rr rr     	jsr	nlinecls
001067r 2  68           	pla
001068r 2  AA           	tax
001069r 2  CA           	dex
00106Ar 2  D0 F3        	bne	dis01
00106Cr 2  4C rr rr     	jmp	mon1
00106Fr 2  C9 63        mon5:	cmp	#'c'		; -------- continue -------
001071r 2  D0 07        	bne	mon6
001073r 2  20 rr rr     mon55:	jsr	nline
001076r 2  18           	clc
001077r 2  4C rr rr     	jmp	dobrk5
00107Ar 2  C9 6E        mon6:	cmp	#'n'		; -------- execute until next -------
00107Cr 2  D0 19        	bne	mon7
00107Er 2  A0 00        	ldy	#0
001080r 2  B1 rr        	lda	(ptr2),y	; save orig opcode
001082r 2  85 rr        	sta	brkp+2
001084r 2  A5 rr        	lda	ptr2		; save address
001086r 2  85 rr        	sta	brkp
001088r 2  A5 rr        	lda	ptr2+1
00108Ar 2  85 rr        	sta	brkp+1
00108Cr 2  A9 00        	lda	#0
00108Er 2  91 rr        	sta	(ptr2),y	; put a BRK at the next instr
001090r 2  20 rr rr     	jsr	nline
001093r 2  18           	clc
001094r 2  4C rr rr     	jmp	dobrk5
001097r 2  C9 62        mon7:	cmp	#'b'		; -------- place a breackpoint -------
001099r 2  D0 06        	bne	mon8
00109Br 2  20 rr rr     	jsr	setbrk
00109Er 2  4C rr rr     	jmp	mon1
0010A1r 2  C9 20        mon8:	cmp	#' '		; -------- redraw screen -------
0010A3r 2  D0 05        	bne	mon9
0010A5r 2  A6 rr        mon85:	ldx	stacktop
0010A7r 2  4C rr rr     	jmp	reprt
0010AAr 2  A6 rr        mon9:	ldx	stacktop	; get reg. position in stack
0010ACr 2  CA           	dex			; and copy it into ptr1
0010ADr 2  CA           	dex
0010AEr 2  C9 70        	cmp	#'p'		; -------- edit P reg. -------
0010B0r 2  D0 1F        	bne	mon10
0010B2r 2  86 rr        	stx	tmp4
0010B4r 2  A9 20        	lda	#' '
0010B6r 2  20 rr rr     	jsr	cout
0010B9r 2  A2 51        	ldx	#(msgflags-msgs)
0010BBr 2  20 rr rr     	jsr	uputs
0010BEr 2  A6 rr        	ldx	tmp4
0010C0r 2  86 rr        mon95:	stx	ptr1		; change stack value
0010C2r 2  A9 01        	lda	#1
0010C4r 2  85 rr        	sta	ptr1+1
0010C6r 2  A9 20        	lda	#' '
0010C8r 2  20 rr rr     	jsr	cout
0010CBr 2  20 rr rr     	jsr	hexinby		; edit byte
0010CEr 2  4C rr rr     	jmp	mon85		; and redraw screen
0010D1r 2  CA           mon10:	dex
0010D2r 2  C9 61        	cmp	#'a'		; -------- edit A reg. -------
0010D4r 2  F0 EA        	beq	mon95
0010D6r 2  CA           	dex
0010D7r 2  C9 78        	cmp	#'x'		; -------- edit X reg. -------
0010D9r 2  F0 E5        	beq	mon95
0010DBr 2  CA           	dex
0010DCr 2  C9 79        	cmp	#'y'		; -------- edit Y reg. -------
0010DEr 2  F0 E0        	beq	mon95
0010E0r 2  C9 65        	cmp	#'e'		; -------- edit memory -------
0010E2r 2  D0 1B        	bne	mon12
0010E4r 2  20 rr rr     	jsr	dodir		; get address of memory
0010E7r 2  B0 54        	bcs	monf
0010E9r 2  A9 20        mon11:	lda	#' '
0010EBr 2  20 rr rr     	jsr	cout
0010EEr 2  20 rr rr     	jsr	hexinby		; edit byte
0010F1r 2  B0 09        	bcs	mon111
0010F3r 2  E6 rr        	inc	ptr1		; increment memory pointer
0010F5r 2  D0 F2        	bne	mon11
0010F7r 2  E6 rr        	inc	ptr1+1
0010F9r 2  4C rr rr     	jmp	mon11
0010FCr 2  4C rr rr     mon111:	jmp	mon1
0010FFr 2  C9 72        mon12:	cmp	#'r'		;-------- execute the rest of subroutine -------
001101r 2  D0 29        	bne	mon13
001103r 2  BA           	tsx			; move stack trace 2 bytes down
001104r 2  8A           	txa
001105r 2  A8           	tay
001106r 2  C8           	iny
001107r 2  CA           	dex
001108r 2  CA           	dex
001109r 2  9A           	txs
00110Ar 2  E8           	inx
00110Br 2  B9 00 01     mon121:	lda	$100,y
00110Er 2  9D 00 01     	sta	$100,x
001111r 2  E8           	inx
001112r 2  C8           	iny
001113r 2  C4 rr        	cpy	stacktop
001115r 2  D0 F4        	bne	mon121
001117r 2  B9 00 01     	lda	$100,y		; last stack data
00111Ar 2  9D 00 01     	sta	$100,x
00111Dr 2  E8           	inx
00111Er 2  A9 rr        	lda	#<(fakerts-1)	; place the fake return address on top of stack
001120r 2  9D 00 01     	sta	$100,x
001123r 2  E8           	inx
001124r 2  A9 rr        	lda	#>(fakerts-1)
001126r 2  9D 00 01     	sta	$100,x
001129r 2  4C rr rr     	jmp	mon55		; and continue execution
00112Cr 2  C9 68        mon13:	cmp	#'h'
00112Er 2  D0 0D        	bne	monf
001130r 2  A0 00        	ldy	#0
001132r 2  B9 rr rr     mon131:	lda	monhelp,y
001135r 2  F0 06        	beq	mon132
001137r 2  20 rr rr     	jsr	cout
00113Ar 2  C8           	iny
00113Br 2  D0 F5        	bne	mon131
00113Dr 2               mon132:
00113Dr 2  4C rr rr     monf:	jmp	mon1
001140r 2               
001140r 2               	; restore variables
001140r 2  AD rr rr     dobrk5:	lda     sch             ; restaura estado de consola
001143r 2  85 rr                sta     iochan
001145r 2  AD rr rr             lda     sch+1
001148r 2  85 rr                sta     coltxt
00114Ar 2  AD rr rr             lda     sch+2
00114Dr 2  8D 03 E0             sta     CTRL2
001150r 2               
001150r 2  A9 7F                lda	#$7f		; clear unread flag
001152r 2  25 rr        	and	cinflg
001154r 2  85 rr        	sta	cinflg
001156r 2  A0 rr        	ldy	#zptop
001158r 2  68           dobrk2:	pla
001159r 2  88           	dey
00115Ar 2  99 00 00     	sta	0,y
00115Dr 2  D0 F9        	bne	dobrk2
00115Fr 2  90 03        	bcc	dobrk6
001161r 2  4C rr rr     	jmp	sstep		; finish IRQ/BRK with single-step
001164r 2  4C rr rr     dobrk6:	jmp	finirq		; finish IRQ/BRK
001167r 2               
001167r 2               ; ------------------------------------------------------------------------
001167r 2               ; debugger-related routines
001167r 2               ; ------------------------------------------------------------------------
001167r 2  20 rr rr     setbrk:	jsr	dodir		; read address into ptr1
00116Ar 2  B0 12        	bcs	sbrk2
00116Cr 2  A5 rr        	lda	ptr1
00116Er 2  85 rr        	sta	brkp
001170r 2  A5 rr        	lda	ptr1+1
001172r 2  85 rr        	sta	brkp+1
001174r 2  A0 00        	ldy	#0
001176r 2  B1 rr        	lda	(ptr1),y
001178r 2  85 rr        	sta	brkp+2
00117Ar 2  98           	tya
00117Br 2  91 rr        	sta	(ptr1),y	; brk op-code
00117Dr 2  18           	clc
00117Er 2  60           sbrk2:	rts
00117Fr 2               
00117Fr 2               ; ------------------------------------------------------------------------
00117Fr 2               ; print utilities
00117Fr 2               ; ------------------------------------------------------------------------
00117Fr 2  A9 0A        nline:	lda	#10
001181r 2  4C rr rr     	jmp	cout
001184r 2               nlinecls:
001184r 2  A9 0A        	lda	#10
001186r 2  20 rr rr     	jsr	cout
001189r 2  24 rr        	bit	iochan
00118Br 2  10 05        	bpl	nlcls2
00118Dr 2  A2 A4        	ldx	#(msglcls-msgs)
00118Fr 2  20 rr rr     	jsr	uputs
001192r 2  24 rr        nlcls2:	bit	iochan
001194r 2  50 E8        	bvc	sbrk2
001196r 2  4C rr rr     	jmp	clrline
001199r 2               
001199r 2  24 rr        gohome:	bit	iochan
00119Br 2  10 05        	bpl	ghm1
00119Dr 2  A2 A9        	ldx	#(msghome-msgs)	; Go to upper-left corner of screen
00119Fr 2  20 rr rr     	jsr	uputs
0011A2r 2  24 rr        ghm1:	bit	iochan
0011A4r 2  50 D8        	bvc	sbrk2
0011A6r 2  A9 00        	lda	#0
0011A8r 2  85 rr        	sta	tposx
0011AAr 2  85 rr        	sta	tposy
0011ACr 2  4C rr rr     	jmp	clrline
0011AFr 2               
0011AFr 2  24 rr        tab28:	bit	iochan
0011B1r 2  10 05        	bpl	tb282
0011B3r 2  A2 B0        	ldx	#(msgtab28-msgs)	; Go to upper-left corner of screen
0011B5r 2  20 rr rr     	jsr	uputs
0011B8r 2  24 rr        tb282:	bit	iochan
0011BAr 2  50 C2        	bvc	sbrk2
0011BCr 2  A9 1C        	lda	#28
0011BEr 2  85 rr        	sta	tposx
0011C0r 2  60           	rts
0011C1r 2               ; ------------------------------------------------------------------------
0011C1r 2               ; reads an address into ptr1. CY=1 -> read abort (ptr1 modiffied anyway)
0011C1r 2               ; ------------------------------------------------------------------------
0011C1r 2               
0011C1r 2  20 rr rr     dodir:	jsr	cin		; read char.
0011C4r 2  C9 0D        	cmp	#13		; CR -> return
0011C6r 2  D0 07        	bne	dodir3
0011C8r 2  A9 0A        dodir5:	lda	#10
0011CAr 2  20 rr rr     	jsr	cout
0011CDr 2  18           	clc
0011CEr 2  60           	rts
0011CFr 2  C9 20        dodir3:	cmp	#' '		; space -> input hex. number
0011D1r 2  D0 EE        	bne	dodir
0011D3r 2  20 rr rr     	jsr	cout
0011D6r 2  20 rr rr     	jsr	hexin
0011D9r 2  90 ED        	bcc	dodir5
0011DBr 2  60           	rts
0011DCr 2               
0011DCr 2               ; ------------------------------------------------------------------------
0011DCr 2               ; dump a page of hexadecimal data
0011DCr 2               ; returns: ptr1 pointing to the following page,
0011DCr 2               ;	   A, X, Y, tmp[1,2,3,4] modiffied
0011DCr 2               ; ------------------------------------------------------------------------
0011DCr 2               
0011DCr 2               hexdump:
0011DCr 2  A9 10        	lda	#16			; 16 lines of 16 bytes
0011DEr 2  85 rr        	sta	tmp3
0011E0r 2               
0011E0r 2  A5 rr        hdump0:	lda	ptr1+1			; print hex. address
0011E2r 2  20 rr rr     	jsr	prthex
0011E5r 2  A5 rr        	lda	ptr1
0011E7r 2  20 rr rr     	jsr	prthex
0011EAr 2  A2 36        	ldx	#(msgcls+14-msgs)	; print 2 spaces
0011ECr 2  20 rr rr     	jsr	cputs
0011EFr 2               
0011EFr 2  A2 10        	ldx	#16
0011F1r 2  A0 00        	ldy	#0
0011F3r 2  B1 rr        hdump1:	lda	(ptr1),y		; print hex. data
0011F5r 2  20 rr rr     	jsr	prthex
0011F8r 2  A9 20        	lda	#' '			; print space
0011FAr 2  20 rr rr     	jsr	cout
0011FDr 2  C8           	iny
0011FEr 2  CA           	dex
0011FFr 2  D0 F2        	bne	hdump1
001201r 2               
001201r 2  A9 20        	lda	#' '			; print space
001203r 2  20 rr rr     	jsr	cout
001206r 2               
001206r 2  A2 10        	ldx	#16			; print ASCII data
001208r 2  A0 00        	ldy	#0
00120Ar 2  B1 rr        hdump2:	lda	(ptr1),y
00120Cr 2  10 04        	bpl	hdump3			; don't print ASCII > 127
00120Er 2  A9 2E        	lda	#'.'
001210r 2  10 06        	bpl	hdump4
001212r 2  C9 20        hdump3: cmp	#32			; don't print ASCII < 32
001214r 2  10 02        	bpl	hdump4
001216r 2  A9 2E        	lda	#'.'
001218r 2  20 rr rr     hdump4:	jsr	cout
00121Br 2  C8           	iny
00121Cr 2  CA           	dex
00121Dr 2  D0 EB        	bne	hdump2
00121Fr 2               
00121Fr 2  A9 0A        	lda	#10			; new line
001221r 2  20 rr rr     	jsr	cout
001224r 2               
001224r 2  18           	clc				; PTR += 16
001225r 2  A9 10        	lda	#16
001227r 2  65 rr        	adc	ptr1
001229r 2  85 rr        	sta	ptr1
00122Br 2  90 02        	bcc	hdump5
00122Dr 2  E6 rr        	inc	ptr1+1
00122Fr 2               
00122Fr 2  C6 rr        hdump5:	dec	tmp3
001231r 2  D0 AD        	bne	hdump0
001233r 2  60           	rts
001234r 2               
001234r 2               ; ------------------------------------------------------------------------
001234r 2               ; inputs a 16-bit address into ptr1, CY=1 -> abort
001234r 2               ; ------------------------------------------------------------------------
001234r 2               
001234r 2  A5 rr        hexin:	lda	ptr1+1		; print current value
001236r 2  20 rr rr     	jsr	prthex
001239r 2  A5 rr        	lda	ptr1
00123Br 2  20 rr rr     	jsr	prthex
00123Er 2               
00123Er 2  20 rr rr     hexin1:	jsr	cin		; get chararecter
001241r 2  C9 0D        	cmp	#13		; CR -> exit
001243r 2  D0 02        	bne	hexin6
001245r 2  18           	clc
001246r 2  60           	rts
001247r 2  C9 1B        hexin6:	cmp	#27		; ESC -> abort
001249r 2  D0 02        	bne	hexin5
00124Br 2  38           	sec
00124Cr 2  60           	rts
00124Dr 2  20 rr rr     hexin5:	jsr	ascii2hex
001250r 2  B0 EC        	bcs	hexin1
001252r 2  A2 04        	ldx	#4
001254r 2  06 rr        hexin4:	asl	ptr1		; shift value 4 bits and include new digit
001256r 2  26 rr        	rol	ptr1+1
001258r 2  CA           	dex
001259r 2  D0 F9        	bne	hexin4
00125Br 2  05 rr        	ora	ptr1
00125Dr 2  85 rr        	sta	ptr1
00125Fr 2               
00125Fr 2  A2 B6        	ldx	#(msgback4-msgs) ;go back 4 positions in the line
001261r 2  20 rr rr     	jsr	cputs
001264r 2  4C rr rr     	jmp	hexin
001267r 2               
001267r 2               ; ------------------------------------------------------------------------
001267r 2               ; inputs a 8-bit address into (ptr1), CY=1 -> abort, tmp3 modiffied
001267r 2               ; ------------------------------------------------------------------------
001267r 2               hexinby:
001267r 2  A0 00        	ldy	#0
001269r 2  B1 rr        	lda	(ptr1),y
00126Br 2  85 rr        	sta	tmp3
00126Dr 2               
00126Dr 2  20 rr rr     hxb6:	jsr	prthex		; print current value
001270r 2               
001270r 2  20 rr rr     hxb1:	jsr	cin		; get character
001273r 2  C9 0D        	cmp	#13		; CR: end edit
001275r 2  D0 08        	bne	hxb2
001277r 2  A5 rr        hxb3:	lda	tmp3
001279r 2  A0 00        	ldy	#0
00127Br 2  91 rr        	sta	(ptr1),y
00127Dr 2  18           	clc
00127Er 2  60           	rts
00127Fr 2  C9 20        hxb2:	cmp	#' '		; space: end edit
001281r 2  F0 F4        	beq	hxb3
001283r 2  C9 1B        	cmp	#27		; ESC : abort edit
001285r 2  D0 02        	bne	hxb4
001287r 2  38           	sec
001288r 2  60           	rts
001289r 2  20 rr rr     hxb4:	jsr	ascii2hex
00128Cr 2  B0 E2        	bcs	hxb1
00128Er 2  A2 04        	ldx	#4
001290r 2  06 rr        hxb5:	asl	tmp3		; shift value 4 bits and include new digit
001292r 2  CA           	dex
001293r 2  D0 FB        	bne	hxb5
001295r 2  05 rr        	ora	tmp3
001297r 2  85 rr        	sta	tmp3
001299r 2  A2 B8        	ldx	#(msgback4+2-msgs) ;go back 2 positions in the line
00129Br 2  20 rr rr     	jsr	cputs
00129Er 2  A5 rr        	lda	tmp3
0012A0r 2  4C rr rr     	jmp	hxb6
0012A3r 2               
0012A3r 2               ; ----------------------------------------------
0012A3r 2               ; converts an ASCII Hex. char into a 4-bit value
0012A3r 2               ; returns CY = 1 if not valid hex. digit
0012A3r 2               ; ----------------------------------------------
0012A3r 2               
0012A3r 2               ascii2hex:
0012A3r 2  C9 30        a2x1:	cmp	#'0'		; ASCII < '0' -> ignore char.
0012A5r 2  30 18        	bmi	a2xf
0012A7r 2  09 20        	ora	#32		; to lowercase
0012A9r 2  C9 61        	cmp	#'a'
0012ABr 2  38           	sec
0012ACr 2  10 09        	bpl	a2x2
0012AEr 2  E9 30        	sbc	#'0'		; numbers (0 to 9)
0012B0r 2  C9 0A        	cmp	#10
0012B2r 2  10 0B        	bpl	a2xf
0012B4r 2  4C rr rr     	jmp	a2x3
0012B7r 2  E9 57        a2x2:	sbc	#('a'-10)	; letters (a to f)
0012B9r 2  C9 10        	cmp	#16
0012BBr 2  10 02        	bpl	a2xf
0012BDr 2  18           a2x3:	clc			; hex
0012BEr 2  60           	rts
0012BFr 2  38           a2xf:	sec			; not hex
0012C0r 2  60           	rts
0012C1r 2               
0012C1r 2               
0012C1r 2               ;----------------------------------------------------
0012C1r 2               ;     Keyboard IRQ
0012C1r 2               ;----------------------------------------------------
0012C1r 2               keyboardirq:
0012C1r 2  AD 07 E0     	lda	KBD		; read scancode
0012C4r 2  C9 E0        	cmp	#$E0		; ignore prefix
0012C6r 2  F0 1B        	beq	ksigf0
0012C8r 2  A4 rr        	ldy	scankey
0012CAr 2  84 rr        	sty	oscank
0012CCr 2  85 rr        	sta	scankey
0012CEr 2  C0 F0        	cpy	#$F0		; released key?
0012D0r 2  D0 03        	bne	kdown
0012D2r 2  4C rr rr     	jmp	kup
0012D5r 2               kdown:	; Modiffiers?
0012D5r 2  C9 F0        	cmp	#$f0		; released, do not process
0012D7r 2  F0 0A        	beq	ksigf0
0012D9r 2  C9 12        	cmp	#$12		; Shift left
0012DBr 2  D0 09        	bne	ksig1
0012DDr 2  A9 40        	lda	#$40
0012DFr 2  05 rr        	ora	modkey
0012E1r 2  85 rr        	sta	modkey
0012E3r 2  4C rr rr     ksigf0:	jmp	finirq
0012E6r 2  C9 59        ksig1:	cmp	#$59		; Shift right
0012E8r 2  D0 09        	bne	ksig2
0012EAr 2  A9 20        	lda	#$20
0012ECr 2  05 rr        	ora	modkey
0012EEr 2  85 rr        	sta	modkey
0012F0r 2  4C rr rr     	jmp	finirq
0012F3r 2  C9 58        ksig2:	cmp	#$58		; Uppercase
0012F5r 2  D0 0F        	bne	ksig3
0012F7r 2  A9 01        	lda	#1
0012F9r 2  24 rr        	bit	modkey
0012FBr 2  D0 E6        	bne	ksigf0
0012FDr 2  05 rr        	ora	modkey
0012FFr 2  49 80        	eor	#$80
001301r 2  85 rr        	sta	modkey
001303r 2  4C rr rr     	jmp	finirq
001306r 2  C9 14        ksig3:	cmp	#$14		; CTRL left / right
001308r 2  D0 09        	bne	ksig4
00130Ar 2  A9 10        	lda	#$10
00130Cr 2  05 rr        	ora	modkey
00130Er 2  85 rr        	sta	modkey
001310r 2  4C rr rr     	jmp	finirq
001313r 2  C9 11        ksig4:	cmp	#$11		; ALT / ALT GR
001315r 2  D0 09        	bne	ksig5
001317r 2  A9 08        	lda	#$8
001319r 2  05 rr        	ora	modkey
00131Br 2  85 rr        	sta	modkey
00131Dr 2  4C rr rr     	jmp	finirq
001320r 2               ksig5:
001320r 2               	; Plain key: convert to ASCII
001320r 2  A8           	tay
001321r 2  B9 rr rr     	lda	ktbl,y
001324r 2  85 rr        	sta	keyrx
001326r 2               
001326r 2  A9 10        	lda	#$10	; CTRL modiffier?
001328r 2  24 rr        	bit	modkey
00132Ar 2  F0 0E        	beq	noctrl
00132Cr 2  A5 rr        	lda	keyrx
00132Er 2  38           	sec
00132Fr 2  E9 60        	sbc	#96
001331r 2  85 rr        	sta	keyrx
001333r 2  C9 16        	cmp	#'V'-64	; CTRL-V as break to monitor
001335r 2  D0 60        	bne	noalt
001337r 2  4C rr rr     	jmp	dotim0	; Break
00133Ar 2               
00133Ar 2  A9 E0        noctrl:	lda	#$E0	; Uppercase modiffier?
00133Cr 2  24 rr        	bit	modkey
00133Er 2  F0 3E        	beq	nomay
001340r 2  A5 rr        	lda	keyrx	; Uppercase
001342r 2  C9 61        	cmp	#'a'
001344r 2  90 0C        	bcc	may2
001346r 2  C9 7B        	cmp	#'z'+1	; if 'a' < ascii <='z' simply subtract 32
001348r 2  B0 08        	bcs	may2
00134Ar 2  38           	sec
00134Br 2  E9 20        	sbc	#32
00134Dr 2  85 rr        	sta	keyrx
00134Fr 2  4C rr rr     	jmp	noalt
001352r 2               may2:	; Other keys only are modiffied by 'shifts'
001352r 2  A9 60        	lda	#$60	; shift left OR right?
001354r 2  24 rr        	bit	modkey
001356r 2  F0 26        	beq	nomay
001358r 2  A5 rr        	lda	keyrx
00135Ar 2  C9 30        	cmp	#'0'	; keys 0 to 9 have a separate "number_shifted" table
00135Cr 2  90 0D        	bcc	may3	;  "maytab1"
00135Er 2  C9 3A        	cmp	#'9'+1
001360r 2  B0 09        	bcs	may3
001362r 2  38           	sec
001363r 2  E9 30        	sbc	#'0'
001365r 2  A8           	tay
001366r 2  B9 rr rr     	lda	maytab1,y
001369r 2  85 rr        	sta	keyrx
00136Br 2               may3:	; Other shifted keys (only if included in table "maytab2")
00136Br 2  A0 00        	ldy	#0
00136Dr 2  B9 rr rr     may31:	lda	maytab2,y	; key listed in table?
001370r 2  F0 0C        	beq	nomay
001372r 2  C5 rr        	cmp	keyrx
001374r 2  F0 03        	beq	may32
001376r 2  C8           	iny
001377r 2  D0 F4        	bne	may31
001379r 2  B9 rr rr     may32:	lda	maytab2b,y	; "mytab2b" have the values for these keys
00137Cr 2  85 rr        	sta	keyrx
00137Er 2               
00137Er 2  A9 08        nomay:	lda	#$08	; ALT modiffier
001380r 2  24 rr        	bit	modkey
001382r 2  F0 13        	beq	noalt
001384r 2  A0 00        	ldy	#0
001386r 2  B9 rr rr     alt11:	lda	alttab,y	; key listed in "alttab"?
001389r 2  F0 0C        	beq	noalt
00138Br 2  C5 rr        	cmp	scankey
00138Dr 2  F0 03        	beq	alt12
00138Fr 2  C8           	iny
001390r 2  D0 F4        	bne	alt11
001392r 2  B9 rr rr     alt12:	lda	alttabb,y	; values for <ALT-key>
001395r 2  85 rr        	sta	keyrx
001397r 2               
001397r 2               noalt:
001397r 2  A9 02        	lda	#2		; Notify new key
001399r 2  05 rr        	ora	cinflg
00139Br 2  85 rr        	sta	cinflg
00139Dr 2               
00139Dr 2  4C rr rr     	jmp	finirq
0013A0r 2               
0013A0r 2               	; Key released
0013A0r 2  C9 12        kup:	cmp	#$12		; Shift left
0013A2r 2  D0 09        	bne	ksigs1
0013A4r 2  A9 BF        	lda	#(~$40)&$ff
0013A6r 2  25 rr        	and	modkey
0013A8r 2  85 rr        	sta	modkey
0013AAr 2  4C rr rr     	jmp	finirq
0013ADr 2  C9 59        ksigs1: cmp	#$59		; Shift rigth
0013AFr 2  D0 09        	bne	ksigs2
0013B1r 2  A9 DF        	lda	#(~$20)&$ff
0013B3r 2  25 rr        	and	modkey
0013B5r 2  85 rr        	sta	modkey
0013B7r 2  4C rr rr     	jmp	finirq
0013BAr 2  C9 58        ksigs2:	cmp	#$58		; Uppercase
0013BCr 2  D0 09        	bne	ksigs3
0013BEr 2  A9 FE        	lda	#$FE
0013C0r 2  25 rr        	and	modkey
0013C2r 2  85 rr        	sta	modkey
0013C4r 2  4C rr rr     	jmp	finirq
0013C7r 2  C9 14        ksigs3:	cmp	#$14		; CTRL left / right
0013C9r 2  D0 09        	bne	ksigs4
0013CBr 2  A9 EF        	lda	#(~$10)&$ff
0013CDr 2  25 rr        	and	modkey
0013CFr 2  85 rr        	sta	modkey
0013D1r 2  4C rr rr     	jmp	finirq
0013D4r 2  C9 11        ksigs4:	cmp	#$11		; ALT / ALT GR
0013D6r 2  D0 06        	bne	ksigs5
0013D8r 2  A9 F7        	lda	#(~$8)&$ff
0013DAr 2  25 rr        	and	modkey
0013DCr 2  85 rr        	sta	modkey
0013DEr 2               
0013DEr 2               ksigs5:
0013DEr 2  4C rr rr     ksigf:	jmp	finirq
0013E1r 2               
0013E1r 2               	; Main translation table. Scancode to Lowercase ASCII (132 entries)
0013E1r 2  00 89 00 85  ktbl:	.byte $00,$89,$00,$85,$83,$81,$82,$8C,$00,$8A,$88,$86,$84,$09,$5C,$00
0013E5r 2  83 81 82 8C  
0013E9r 2  00 8A 88 86  
0013F1r 2  00 00 00 00  	.byte $00,$00,$00,$00,$00,$71,$31,$00,$00,$00,$7A,$73,$61,$77,$32,$00
0013F5r 2  00 71 31 00  
0013F9r 2  00 00 7A 73  
001401r 2  00 63 78 64  	.byte $00,$63,$78,$64,$65,$34,$33,$00,$00,$20,$76,$66,$74,$72,$35,$00
001405r 2  65 34 33 00  
001409r 2  00 20 76 66  
001411r 2  00 6E 62 68  	.byte $00,$6E,$62,$68,$67,$79,$36,$00,$00,$00,$6D,$6A,$75,$37,$38,$00
001415r 2  67 79 36 00  
001419r 2  00 00 6D 6A  
001421r 2  00 2C 6B 69  	.byte $00,$2C,$6B,$69,$6F,$30,$39,$00,$00,$2E,$2D,$6C,$7E,$70,$27,$00
001425r 2  6F 30 39 00  
001429r 2  00 2E 2D 6C  
001431r 2  00 00 7B 00  	.byte $00,$00,$7B,$00,$00,$00,$00,$00,$00,$00,$0D,$2B,$00,$7D,$00,$00
001435r 2  00 00 00 00  
001439r 2  00 00 0D 2B  
001441r 2  00 3C 00 00  	.byte $00,$3C,$00,$00,$00,$00,$08,$00,$00,$97,$00,$92,$96,$00,$00,$00
001445r 2  00 00 08 00  
001449r 2  00 97 00 92  
001451r 2  9A 9B 91 00  	.byte $9A,$9B,$91,$00,$93,$90,$1B,$00,$8B,$00,$95,$00,$00,$94,$00,$00
001455r 2  93 90 1B 00  
001459r 2  8B 00 95 00  
001461r 2  00 00 00 87  	.byte $00,$00,$00,$87
001465r 2  3D 21 22 23  maytab1:	.byte '=','!','"','#','$','%','&','/','(',')'	; shifted number values
001469r 2  24 25 26 2F  
00146Dr 2  28 29        
00146Fr 2  3C 27 2B 2D  maytab2:	.byte '<',$27,'+','-',',','.',0			; chars with special shift codes
001473r 2  2C 2E 00     
001476r 2  3E 3F 2A 5F  maytab2b:	.byte '>','?','*','_',';',':',0			; values for shifted special chars
00147Ar 2  3B 3A 00     
00147Dr 2  16 1E 26 54  alttab:		.byte $16,$1E,$26,$54,$5B,0	; scancodes with ALT codes
001481r 2  5B 00        
001483r 2  7C 40 23 5B  alttabb:	.byte '|','@','#','[',']',0	; values for <ATL-key>
001487r 2  5D 00        
001489r 2               
001489r 2               
001489r 1               
001489r 1               
001489r 1               ; ------------------------------------------------------------------------
001489r 1               ; ------------------------------------------------------------------------
001489r 1               ; 				main program
001489r 1               ; ------------------------------------------------------------------------
001489r 1               ; ------------------------------------------------------------------------
001489r 1               
001489r 1               fakerts:
001489r 1  00           	brk			; $E$x
00148Ar 1  00           	brk
00148Br 1  60           	rts
00148Cr 1               
00148Cr 1               ; ------------------------------------------------------------------------
00148Cr 1               ; 				UART TX
00148Cr 1               ; ------------------------------------------------------------------------
00148Cr 1               ; uart_putchar
00148Cr 1               ; parameters: A = data to print
00148Cr 1               ; no register modified
00148Cr 1               
00148Cr 1               	.export	uart_putchar, cout
00148Cr 1               
00148Cr 1               uart_putchar:
00148Cr 1  2C 01 E0     upuch1:	bit	USTAT
00148Fr 1  10 FB        	bpl	upuch1
001491r 1  8D 00 E0     	sta	UTXD
001494r 1  60           	rts
001495r 1               
001495r 1  48           cout:	pha
001496r 1  8A           	txa
001497r 1  48           	pha
001498r 1  98           	tya
001499r 1  48           	pha
00149Ar 1  BA           	tsx
00149Br 1  E8           	inx
00149Cr 1  E8           	inx
00149Dr 1  E8           	inx
00149Er 1               
00149Er 1  A9 80        	lda	#$80		; set unread flag (for debug)
0014A0r 1  05 rr        	ora	cinflg
0014A2r 1  85 rr        	sta	cinflg
0014A4r 1               
0014A4r 1  BD 00 01     	lda	$100,x		; recupera A desde la pila
0014A7r 1  24 rr        	bit	iochan
0014A9r 1  10 03        	bpl	cout2
0014ABr 1  20 rr rr     	jsr	uart_putchar
0014AEr 1  24 rr        cout2:	bit	iochan
0014B0r 1  50 03        	bvc	cout3
0014B2r 1  20 rr rr     	jsr	gputch
0014B5r 1  68           cout3:	pla
0014B6r 1  A8           	tay
0014B7r 1  68           	pla
0014B8r 1  AA           	tax
0014B9r 1  68           	pla
0014BAr 1  60           	rts
0014BBr 1               
0014BBr 1               ;-----------------------------------------------------------------------
0014BBr 1               ;-----------------------------------------------------------------------
0014BBr 1               ; 			START
0014BBr 1               ;-----------------------------------------------------------------------
0014BBr 1               ;-----------------------------------------------------------------------
0014BBr 1               ; Paleta por defecto:
0014BBr 1  00 03 0C 10  palet:	.byte	$00, $03, $0C, $10, $C0, $20, $CC, $30
0014BFr 1  C0 20 CC 30  
0014C3r 1  00 4C 0C 5C  	.byte   $00, $4C, $0C, $5C, $C0, $6C, $CC, $7C
0014C7r 1  C0 6C CC 7C  
0014CBr 1  33 83 3F 93  	.byte	$33, $83, $3F, $93, $F3, $A3, $FF, $B3
0014CFr 1  F3 A3 FF B3  
0014D3r 1  33 CF 3F DF  	.byte 	$33, $CF, $3F, $DF, $F3, $EF, $FF, $FF
0014D7r 1  F3 EF FF FF  
0014DBr 1               
0014DBr 1               	.export	_start
0014DBr 1               _start:
0014DBr 1  78           str0:	sei
0014DCr 1  D8           	cld
0014DDr 1  A2 04        	ldx	#4		; valores iniciales para p√°ginas de RAM
0014DFr 1               				; bloques $4-$A (0-3: video, $B-$F: sin uso)
0014DFr 1  8A           str05:	txa
0014E0r 1  9D 04 E0     	sta	PAGE0-4,x
0014E3r 1  E8           	inx
0014E4r 1  E0 0B        	cpx	#11
0014E6r 1  D0 F7        	bne	str05
0014E8r 1               
0014E8r 1  A2 FF        	ldx	#$ff		; Stack at the end of its page
0014EAr 1  9A           	txs
0014EBr 1               
0014EBr 1               	; init soft IRQ vectors
0014EBr 1  A9 rr        	lda	#<defISR
0014EDr 1  8D rr rr     	sta	urxvec
0014F0r 1  8D rr rr     	sta	utxvec
0014F3r 1  8D rr rr     	sta	hsynvec
0014F6r 1  8D rr rr     	sta	vsynvec
0014F9r 1  A9 rr        	lda	#>defISR
0014FBr 1  8D rr rr     	sta	urxvec+1
0014FEr 1  8D rr rr     	sta	utxvec+1
001501r 1  8D rr rr     	sta	hsynvec+1
001504r 1  8D rr rr     	sta	vsynvec+1
001507r 1               
001507r 1               	; clear breakpoint
001507r 1  A9 00        	lda	#0
001509r 1  85 rr        	sta	brkp
00150Br 1  85 rr        	sta	brkp+1
00150Dr 1  85 rr        	sta	cinflg		; Flags cin borrados
00150Fr 1  85 rr        	sta	modkey		; modificadores en 0
001511r 1  A9 02        	lda	#2
001513r 1  8D 03 E0     	sta	CTRL2		; Video: 1bpp, IRQ teclado
001516r 1               
001516r 1  A9 C3        	lda	#$C3		; Salida por UART y video, entrada UART y teclado
001518r 1  85 rr        	sta	iochan
00151Ar 1  A9 3F        	lda	#63		; 64/85 columnas (fuente 8x16 o 6x16 pixels)
00151Cr 1  85 rr        	sta	coltxt
00151Er 1               
00151Er 1  A9 80        	lda	#128		; PWM level
001520r 1  8D 07 E0     	sta	PWM
001523r 1               
001523r 1  A9 E1        	lda	#$E1		; Enable IRQ UART RX, clear flags
001525r 1  8D 02 E0     	sta	CTRL1
001528r 1  58           	cli			; Enable IRQs
001529r 1               
001529r 1               ;--------------------------------------------
001529r 1               ;	Code for tests
001529r 1               ;--------------------------------------------
001529r 1               
001529r 1               ;---------------------------------------------
001529r 1               ;---------------------------------------------
001529r 1               ;	Load code and run it
001529r 1               ;---------------------------------------------
001529r 1               ;---------------------------------------------
001529r 1               	imgix = $30
001529r 1               	imgcnt= $31
001529r 1               	selin=	$32
001529r 1               	seloin=	$33
001529r 1               	botvec= $34
001529r 1               
001529r 1               
001529r 1               str1:
001529r 1               	;set palette
001529r 1  A0 00        	ldy	#0
00152Br 1  B9 rr rr     str06:	lda	palet,y
00152Er 1  8D 05 E0     	sta	PAL0
001531r 1  C8           	iny
001532r 1  B9 rr rr     	lda	palet,y
001535r 1  8D 06 E0     	sta	PAL1
001538r 1  C8           	iny
001539r 1  C0 20        	cpy	#32
00153Br 1  D0 EE        	bne	str06
00153Dr 1               
00153Dr 1               	; set border
00153Dr 1  A9 08        	lda	#8
00153Fr 1  8D 01 E0     	sta	BORDER
001542r 1               
001542r 1               	; mensaje de arranque
001542r 1  20 rr rr     	jsr	cls
001545r 1  A9 00        	lda	#0
001547r 1  85 rr        	sta	tposx
001549r 1  85 rr        	sta	tposy
00154Br 1               
00154Br 1  A2 00        	ldx	#(msgboot-msgs)
00154Dr 1  20 rr rr     	jsr	cputs
001550r 1               
001550r 1               	; Lee directorio desde Flash SPI
001550r 1  AD 04 E0     	lda	PINOUT	; copia de PINOUT
001553r 1  29 3F        	and	#$3F
001555r 1  09 30        	ora	#$30
001557r 1  8D 04 E0     	sta	PINOUT	; SSs altos, MOSI y SCK bajos
00155Ar 1  49 20        	eor	#$20
00155Cr 1  8D 04 E0     	sta	PINOUT	; Flash_SS bajo
00155Fr 1  A9 03        	lda	#3	; comando read
001561r 1  20 rr rr     	jsr	spibyte
001564r 1  A9 09        	lda	#9	; dir=$090000
001566r 1  20 rr rr     	jsr	spibyte
001569r 1  A9 00        	lda	#0
00156Br 1  20 rr rr     	jsr	spibyte
00156Er 1  A9 00        	lda	#0
001570r 1  20 rr rr     	jsr	spibyte
001573r 1  A0 00        	ldy	#0
001575r 1  84 rr        	sty	ptr1
001577r 1  A9 03        	lda	#3
001579r 1  85 rr        	sta	ptr1+1
00157Br 1  A2 04        	ldx	#4
00157Dr 1  20 rr rr     ldir1:	jsr	spibyte
001580r 1  91 rr        	sta	(ptr1),y
001582r 1  C8           	iny
001583r 1  D0 F8        	bne	ldir1
001585r 1  E6 rr        	inc	ptr1+1
001587r 1  CA           	dex
001588r 1  D0 F3        	bne	ldir1
00158Ar 1  AD 04 E0     	lda	PINOUT
00158Dr 1  09 20        	ora	#$20
00158Fr 1  8D 04 E0     	sta	PINOUT	; SS bajo
001592r 1               	; Listado de im√°genes cargables
001592r 1  A9 00        ldir20:	lda	#0
001594r 1  85 30        	sta	imgix
001596r 1  A9 00        ldir22:	lda	#0
001598r 1  85 31        	sta	imgcnt
00159Ar 1  85 rr        	sta	ptr1
00159Cr 1  A9 03        	lda	#3
00159Er 1  85 rr        	sta	ptr1+1
0015A0r 1  A0 00        ldir2:	ldy	#0
0015A2r 1  B1 rr        	lda	(ptr1),y
0015A4r 1  C9 FF        	cmp	#$ff	; Final del listado
0015A6r 1  F0 2F        	beq	ldir9
0015A8r 1  A2 20        	ldx	#' '
0015AAr 1  A5 31        	lda	imgcnt
0015ACr 1  C5 30        	cmp	imgix
0015AEr 1  D0 02        	bne	ldir3
0015B0r 1  A2 3E        	ldx	#'>'
0015B2r 1  8A           ldir3:	txa
0015B3r 1  20 rr rr     	jsr	cout
0015B6r 1  A0 03        	ldy	#3
0015B8r 1  B1 rr        ldir4:	lda	(ptr1),y
0015BAr 1  F0 06        	beq	ldir5
0015BCr 1  20 rr rr     	jsr	cout
0015BFr 1  C8           	iny
0015C0r 1  D0 F6        	bne	ldir4
0015C2r 1  E6 31        ldir5:	inc	imgcnt
0015C4r 1  A9 0A        	lda	#10
0015C6r 1  20 rr rr     	jsr	cout
0015C9r 1  A9 40        	lda	#64
0015CBr 1  18           	clc
0015CCr 1  65 rr        	adc	ptr1
0015CEr 1  85 rr        	sta	ptr1
0015D0r 1  90 CE        	bcc	ldir2
0015D2r 1  E6 rr        	inc	ptr1+1
0015D4r 1  4C rr rr     	jmp	ldir2
0015D7r 1               ldir9:	; Selecciona qu√© hacer
0015D7r 1  A5 32        	lda	selin
0015D9r 1  85 33        	sta	seloin
0015DBr 1  20 rr rr     	jsr	cin
0015DEr 1  85 32        	sta	selin
0015E0r 1  C9 CA        	cmp	#$CA
0015E2r 1  D0 09        	bne	sel1
0015E4r 1  A5 33        	lda	seloin
0015E6r 1  C9 B0        	cmp	#$B0
0015E8r 1  D0 03        	bne	sel1
0015EAr 1  4C rr rr     	jmp	load0
0015EDr 1               
0015EDr 1  C9 42        sel1:	cmp	#'B'	; Flecha abajo
0015EFr 1  F0 1F        	beq	seld
0015F1r 1  C9 91        	cmp	#$91
0015F3r 1  F0 1B        	beq	seld
0015F5r 1  C9 41        	cmp	#'A'	; Flecha arriba
0015F7r 1  F0 13        	beq	selu
0015F9r 1  C9 90        	cmp	#$90
0015FBr 1  F0 0F        	beq	selu
0015FDr 1  C9 93        	cmp	#$93
0015FFr 1  F0 20        	beq	selent
001601r 1  C9 43        	cmp	#'C'
001603r 1  F0 1C        	beq	selent
001605r 1  C9 0D        	cmp	#13
001607r 1  F0 18        	beq	selent
001609r 1               
001609r 1  4C rr rr     	jmp	ldir9
00160Cr 1               
00160Cr 1  C6 30        selu:	dec	imgix	; Flecha arriba
00160Er 1  10 0A        	bpl	selud
001610r 1  E6 30        seld:	inc	imgix	; Flecha abajo
001612r 1  A5 30        	lda	imgix
001614r 1  C5 31        	cmp	imgcnt
001616r 1  D0 02        	bne	selud
001618r 1  C6 30        	dec	imgix
00161Ar 1  A9 02        selud:	lda	#2
00161Cr 1  85 rr        	sta	tposy
00161Er 1  4C rr rr     	jmp	ldir22
001621r 1               
001621r 1  A9 rr        selent:	lda	#<spibyte
001623r 1  85 34        	sta	botvec
001625r 1  A9 rr        	lda	#>spibyte
001627r 1  85 35        	sta	botvec+1
001629r 1  A9 00        	lda	#0		;ptr1=imgix*64+$300
00162Br 1  85 rr        	sta	ptr1
00162Dr 1  A5 30        	lda	imgix
00162Fr 1  85 rr        	sta	ptr1+1
001631r 1  18           	clc
001632r 1  66 rr        	ror	ptr1+1
001634r 1  66 rr        	ror	ptr1
001636r 1  66 rr        	ror	ptr1+1
001638r 1  66 rr        	ror	ptr1
00163Ar 1  A9 03        	lda	#3
00163Cr 1  18           	clc
00163Dr 1  65 rr        	adc	ptr1+1
00163Fr 1  85 rr        	sta	ptr1+1
001641r 1  A0 00        	ldy	#0
001643r 1  AD 04 E0     	lda	PINOUT	; copia de PINOUT
001646r 1  29 DF        	and	#(~$20)&$ff
001648r 1  8D 04 E0     	sta	PINOUT	; SS bajo
00164Br 1  A9 03        	lda	#3	; comando read
00164Dr 1  20 rr rr     	jsr	spibyte
001650r 1  B1 rr        	lda	(ptr1),y	; dir MSB
001652r 1  20 rr rr     	jsr	spibyte
001655r 1  C8           	iny
001656r 1  B1 rr        	lda	(ptr1),y	; dir medio
001658r 1  20 rr rr     	jsr	spibyte
00165Br 1  C8           	iny
00165Cr 1  B1 rr        	lda	(ptr1),y	; dir LSB
00165Er 1  20 rr rr     	jsr	spibyte
001661r 1               
001661r 1  20 rr rr     	jsr	spibyte		; Descartamos marca $B0, $CA
001664r 1  20 rr rr     	jsr	spibyte
001667r 1               
001667r 1  4C rr rr     	jmp	load1
00166Ar 1               
00166Ar 1               	; A partir de ahora sin interrupciones pues puede llegar un crtl-C
00166Ar 1  A9 rr        load0:	lda	#<urawrx
00166Cr 1  85 34        	sta	botvec
00166Er 1  A9 rr        	lda	#>urawrx
001670r 1  85 35        	sta	botvec+1
001672r 1  78           	sei
001673r 1               
001673r 1               load1:
001673r 1  20 rr rr     	jsr	botin	; Direcci√≥n de carga en ptr1
001676r 1  85 rr        	sta	ptr1
001678r 1  20 rr rr     	jsr	botin
00167Br 1  85 rr        	sta	ptr1+1
00167Dr 1  09 00        	ora	#0	; pag 0 => Es una imagen o audio
00167Fr 1  D0 28        	bne	load15
001681r 1  A5 rr        	lda	ptr1	; Bit 7 de direcci√≥n en 1 => audio
001683r 1  10 03        	bpl	load111
001685r 1  4C rr rr     	jmp	loadaudio
001688r 1               load111:
001688r 1  20 rr rr     	jsr	vmap	; Mapeamos video en $2000
00168Br 1  A9 20        	lda	#$20
00168Dr 1  85 rr        	sta	ptr1+1
00168Fr 1  A9 00        	lda	#0
001691r 1  8D 05 E0     	sta	PAL0	; Fondo negro
001694r 1  8D 06 E0     	sta	PAL1
001697r 1  A9 02        	lda	#2	; Modo Monocromo
001699r 1  8D 03 E0     	sta	CTRL2
00169Cr 1  A5 rr        	lda	ptr1	; Dir LSB !=0 => color
00169Er 1  F0 09        	beq	load15
0016A0r 1  A9 03        	lda	#3
0016A2r 1  8D 03 E0     	sta	CTRL2
0016A5r 1  A9 00        	lda	#0
0016A7r 1  85 rr        	sta	ptr1
0016A9r 1  20 rr rr     load15:	jsr	botin	; Direcci√≥n de ejecuci√≥n en ptr2
0016ACr 1  85 rr        	sta	ptr2
0016AEr 1  20 rr rr     	jsr	botin
0016B1r 1  85 rr        	sta	ptr2+1
0016B3r 1               
0016B3r 1  20 rr rr     	jsr	botin	; N¬∫ de bytes en tmp3:tmp4
0016B6r 1  85 rr        	sta	tmp3
0016B8r 1  20 rr rr     	jsr	botin
0016BBr 1  85 rr        	sta	tmp4
0016BDr 1               
0016BDr 1  A0 00        	ldy	#0	; Bucle de carga
0016BFr 1  20 rr rr     load2:	jsr	botin
0016C2r 1  91 rr        	sta	(ptr1),y
0016C4r 1  C8           	iny
0016C5r 1  D0 02        	bne	load3
0016C7r 1  E6 rr        	inc	ptr1+1
0016C9r 1  C6 rr        load3:	dec	tmp3
0016CBr 1  A5 rr        	lda	tmp3
0016CDr 1  C9 FF        	cmp	#$FF
0016CFr 1  D0 02        	bne	load4
0016D1r 1  C6 rr        	dec	tmp4
0016D3r 1  05 rr        load4:	ora	tmp4
0016D5r 1  D0 E8        	bne	load2
0016D7r 1               
0016D7r 1  A9 0F        	lda	#$0F	; Si p√°ginas de video desmapeamos
0016D9r 1  2D 09 E0     	and	PAGE1
0016DCr 1  D0 03        	bne	load45
0016DEr 1  20 rr rr     	jsr	vunmap
0016E1r 1               
0016E1r 1               load45:	; Cargado: ejecutar
0016E1r 1  AD 04 E0     	lda	PINOUT	; Por si SPI desactivamos SS
0016E4r 1  09 20        	ora	#$20
0016E6r 1  8D 04 E0     	sta	PINOUT
0016E9r 1               
0016E9r 1  A5 rr        	lda	ptr2	; dir_exe=0 => no ejecutar
0016EBr 1  05 rr        	ora	ptr2+1
0016EDr 1  D0 0E        	bne	load5
0016EFr 1  A9 00        	lda	#0
0016F1r 1  85 rr        	sta	tposy
0016F3r 1  20 rr rr     load46:	jsr	cin
0016F6r 1  C9 0A        	cmp	#10
0016F8r 1  F0 F9        	beq	load46
0016FAr 1  4C rr rr     	jmp	str1
0016FDr 1  58           load5:	cli		; ya con interrupciones
0016FEr 1  20 rr rr     	jsr	load9	; Ejecutamos el c√≥digo cargado como una subrutina
001701r 1  4C rr rr     	jmp	str1
001704r 1               
001704r 1  6C rr rr     load9:	jmp	(ptr2)
001707r 1               
001707r 1  6C 34 00     botin:	jmp	(botvec)
00170Ar 1               
00170Ar 1               
00170Ar 1  2C 01 E0     urawrx:	bit	USTAT	; Lectura de UART via polling
00170Dr 1  50 FB        	bvc	urawrx
00170Fr 1  AD 00 E0     	lda	URXD
001712r 1  60           	rts
001713r 1               
001713r 1               loadaudio:
001713r 1  20 rr rr     	jsr	botin	; N¬∫ de bytes complementado LSB
001716r 1  49 FF        	eor	#$FF
001718r 1  85 rr        	sta	tmp2
00171Ar 1  20 rr rr     	jsr	botin
00171Dr 1  49 FF        	eor	#$FF
00171Fr 1  85 rr        	sta	tmp3
001721r 1  20 rr rr     	jsr	botin
001724r 1  49 FF        	eor	#$FF	; MSB
001726r 1  85 rr        	sta	tmp4
001728r 1               
001728r 1  20 rr rr     laab0:	jsr	spibyte	; sample
00172Br 1  AA           	tax
00172Cr 1  A9 20        	lda	#$20	; Espera por flanco de bajada en HSYN
00172Er 1  2C 02 E0     laab1:	bit	CTRL1	; Espera HSYN en alto
001731r 1  F0 FB        	beq	laab1
001733r 1  2C 02 E0     laab2:	bit	CTRL1	; Espera HSYN en bajo
001736r 1  D0 FB        	bne	laab2
001738r 1  8E 07 E0     	stx	$E007	; nivel PWM
00173Br 1  E6 rr        	inc	tmp2
00173Dr 1  D0 E9        	bne	laab0
00173Fr 1  E6 rr        	inc	tmp3
001741r 1  D0 E5        	bne	laab0
001743r 1  E6 rr        	inc	tmp4
001745r 1  D0 E1        	bne	laab0
001747r 1               
001747r 1  4C rr rr     	jmp	str1
00174Ar 1               ; ------------------------------------------------------------------------
00174Ar 1               ; ------------------------------------------------------------------------
00174Ar 1               ; SPI 8-bit transfer via bitbanging
00174Ar 1               
00174Ar 1               spibyte:
00174Ar 1  85 rr        	sta	tmp1
00174Cr 1  8A           	txa
00174Dr 1  48           	pha
00174Er 1  A2 08        	ldx	#8
001750r 1  AD 04 E0     sb1:	lda	PINOUT
001753r 1  0A           	asl
001754r 1  06 rr        	asl	tmp1
001756r 1  6A           	ror
001757r 1  8D 04 E0     sb2:	sta	PINOUT
00175Ar 1  09 40        	ora	#$40	; pulso SCK
00175Cr 1  8D 04 E0     	sta	PINOUT
00175Fr 1  29 BF        	and	#$BF
001761r 1  2C 05 E0     	bit	PININ
001764r 1  10 02        	bpl	sb3
001766r 1  E6 rr        	inc	tmp1
001768r 1  8D 04 E0     sb3:	sta	PINOUT
00176Br 1  CA           	dex
00176Cr 1  D0 E2        	bne	sb1
00176Er 1  68           	pla
00176Fr 1  AA           	tax
001770r 1  A5 rr        	lda	tmp1
001772r 1  60           	rts
001773r 1               
001773r 1               ; ------------------------------------------------------------------------
001773r 1               ; UART Get the input character in A
001773r 1               
001773r 1               	.export	uart_getch, cin
001773r 1               
001773r 1               uart_getch:
001773r 1  58           	cli			; enable IRQs (needed to get UART data)
001774r 1  A9 01        	lda	#1		; wait until flag RX on
001776r 1  24 rr        uget1:	bit	cinflg
001778r 1  F0 FC        	beq	uget1
00177Ar 1  45 rr        uget2:	eor	cinflg		; clear flag
00177Cr 1  85 rr        	sta	cinflg
00177Er 1  A5 rr        	lda	urxd		; return data
001780r 1  60           	rts
001781r 1               
001781r 1               
001781r 1               ; ------------------------------------------------------------------------
001781r 1               ; Console input: Espera por caracter, redibujando cursor si salida video
001781r 1               ; Se usa el √°rea "sch" para variables temporales
001781r 1  20 rr rr     cin:	jsr	cinnb
001784r 1  90 FB        	bcc	cin
001786r 1  60           	rts
001787r 1               
001787r 1               ;--------- versi√≥n no bloqueante (para basic)
001787r 1               cinnb:
001787r 1  8E rr rr     	stx	sch+4
00178Ar 1  8C rr rr     	sty	sch+3
00178Dr 1  58           	cli
00178Er 1               
00178Er 1  A9 01        cinb0:	lda	#1		; Check UART
001790r 1  24 rr        	bit	iochan
001792r 1  F0 1F        	beq	cinb2
001794r 1  24 rr        	bit	cinflg
001796r 1  F0 1B        	beq	cinb2
001798r 1  45 rr        	eor	cinflg		; clear flag
00179Ar 1  85 rr        	sta	cinflg
00179Cr 1  A5 rr        	lda	urxd
00179Er 1  24 rr        	bit	iochan
0017A0r 1  50 09        	bvc	cinb1
0017A2r 1  48           cinb05:	pha			; return data
0017A3r 1  A9 20        	lda	#' '		; clear cursor
0017A5r 1  20 rr rr     	jsr	gputch
0017A8r 1  68           	pla
0017A9r 1  C6 rr        	dec	tposx		; go back
0017ABr 1  AE rr rr     cinb1:	ldx	sch+4		; restore X,Y
0017AEr 1  AC rr rr     	ldy	sch+3
0017B1r 1  38           	sec			; notify data read (Carry on)
0017B2r 1  60           	rts
0017B3r 1               
0017B3r 1  A9 02        cinb2:	lda	#2		; Check Keyboard
0017B5r 1  24 rr        	bit	iochan
0017B7r 1  F0 10        	beq	cinb25
0017B9r 1  24 rr        	bit	cinflg
0017BBr 1  F0 0C        	beq	cinb25
0017BDr 1  45 rr        	eor	cinflg		; clear flag
0017BFr 1  85 rr        	sta	cinflg
0017C1r 1  A5 rr        	lda	keyrx
0017C3r 1  24 rr        	bit	iochan
0017C5r 1  50 E4        	bvc	cinb1
0017C7r 1  70 D9        	bvs	cinb05
0017C9r 1               
0017C9r 1  24 rr        cinb25:	bit	iochan		; Check if video for cout (for cursor draw)
0017CBr 1  50 31        	bvc	cinb9
0017CDr 1  AD 02 E0     	lda	STAT1		; Check for VSYN
0017D0r 1  AA           	tax
0017D1r 1  49 FF        	eor	#$ff
0017D3r 1  2D rr rr     	and	sch+7
0017D6r 1  29 10        	and	#$10
0017D8r 1  8E rr rr     	stx	sch+7
0017DBr 1  F0 21        	beq	cinb9		; Vsync falling egde (60/sec)
0017DDr 1  CE rr rr     	dec	sch+6		; every 15 Vsync (4/sec)...
0017E0r 1  D0 1C        	bne	cinb9
0017E2r 1  A9 0F        	lda	#15		; update count
0017E4r 1  8D rr rr     	sta	sch+6
0017E7r 1  A9 20        	lda	#' '		; redraw cursor
0017E9r 1  CD rr rr     	cmp	sch+5
0017ECr 1  D0 08        	bne	cinb3
0017EEr 1  A9 5F        	lda	#'_'
0017F0r 1  24 rr        	bit	modkey		; If uppercase draw a different cursor (ASCII 127)
0017F2r 1  10 02        	bpl	cinb3
0017F4r 1  A9 7F        	lda	#127
0017F6r 1  8D rr rr     cinb3:	sta	sch+5
0017F9r 1  20 rr rr     	jsr	gputch		; print cursor
0017FCr 1  C6 rr        	dec	tposx		; go back
0017FEr 1               
0017FEr 1  AE rr rr     cinb9:	ldx	sch+4		; restore X,Y
001801r 1  AC rr rr     	ldy	sch+3
001804r 1  18           	clc			; notify nothing to read (Carry off)
001805r 1  60           	rts
001806r 1               
001806r 1               
001806r 1               ; ---------------------------------------------------------------------------
001806r 1               ; uputs: prints an ASCIIZ string via UART (used in debugger for ANSI escapes)
001806r 1               ; arguments: X = offset from "msgs"
001806r 1               ; returns: A, X, Y, tmp1, tmp2 modiffied
001806r 1               
001806r 1               	.export	uputs
001806r 1  20 rr rr     upt1:	jsr	uart_putchar
001809r 1  E8           	inx
00180Ar 1  BD rr rr     uputs:	lda	msgs,x
00180Dr 1  D0 F7        	bne	upt1
00180Fr 1  60           	rts
001810r 1               
001810r 1               ; cputs: prints an ASCIIZ string via cout
001810r 1               	.export	cputs
001810r 1  20 rr rr     cpt1:	jsr	cout
001813r 1  E8           	inx
001814r 1  BD rr rr     cputs:	lda	msgs,x
001817r 1  D0 F7        	bne	cpt1
001819r 1  60           	rts
00181Ar 1               
00181Ar 1               
00181Ar 1               ; ------------------------------------------------------------------------
00181Ar 1               ; cgets: gets a line with some editing
00181Ar 1               ; arguments: ptr1 = pointer to destination data buffer
00181Ar 1               ; output: A, X, Y modiffied
00181Ar 1               
00181Ar 1               	.export	cgets
00181Ar 1               cgets:
00181Ar 1  A0 00        	ldy 	#0
00181Cr 1  20 rr rr     uags1:	jsr 	cin
00181Fr 1  C9 0D        	cmp 	#$D		; Ignore CR
001821r 1  F0 F9        	beq 	uags1
001823r 1  C9 0A        	cmp 	#$A		; End of Line
001825r 1  D0 05        	bne 	uags2
001827r 1  A9 00        	lda 	#0
001829r 1  91 rr        	sta 	(ptr1),y
00182Br 1  60           	rts
00182Cr 1  C9 7F        uags2:	cmp 	#$7F		; Backspace
00182Er 1  D0 17        	bne 	uags3
001830r 1  C0 00        	cpy	#0
001832r 1  F0 E8        	beq 	uags1
001834r 1  88           	dey
001835r 1  A9 08        	lda	#8		; one position back
001837r 1  20 rr rr     	jsr	cout
00183Ar 1  A9 20        	lda	#32		; erase old character by writing a space
00183Cr 1  20 rr rr     	jsr	cout
00183Fr 1  A9 08        	lda	#8		; one position back again
001841r 1  20 rr rr     	jsr	cout
001844r 1  4C rr rr     	jmp	uags1
001847r 1  91 rr        uags3:	sta 	(ptr1),y
001849r 1  20 rr rr     	jsr	cout	; echo
00184Cr 1  C8           	iny
00184Dr 1  4C rr rr     	jmp 	uags1
001850r 1               
001850r 1               ; ------------------------------------------------------------------------
001850r 1               ; ------------------------------------------------------------------------
001850r 1               ;       generic I/O routines (well, just output for now)
001850r 1               ; ------------------------------------------------------------------------
001850r 1               ; ------------------------------------------------------------------------
001850r 1               
001850r 1               ; ------------------------------------------------------------------------
001850r 1               ; Print Acc as an hexadecimal number
001850r 1               
001850r 1               prthex:
001850r 1  48           	pha
001851r 1  4A           	lsr
001852r 1  4A           	lsr
001853r 1  4A           	lsr
001854r 1  4A           	lsr
001855r 1  20 rr rr     	jsr	chexdig
001858r 1  68           	pla
001859r 1  29 0F        	and	#$0f
00185Br 1               chexdig:
00185Br 1  C9 0A        	cmp	#10
00185Dr 1  90 02        	bcc	chex1	; Cy=1 => A >= 10
00185Fr 1  69 06        	adc	#('A'-('9'+1)-1)	; Cy was 1
001861r 1               chex1:	;clc	; not needed Cy is always 0
001861r 1  69 30        	adc	#'0'
001863r 1  4C rr rr     	jmp	cout
001866r 1               
001866r 1               ; ------------------------------------------------------------------------
001866r 1               ; number printing routines (32-bits)
001866r 1               ; ------------------------------------------------------------------------
001866r 1               ; tmp1-tmp4: data to be printed (return as zero)
001866r 1               ; X,Y preserved. A modiffied
001866r 1  8A           prtn32:	txa
001867r 1  48           	pha
001868r 1  98           	tya
001869r 1  48           	pha
00186Ar 1  A0 00        	ldy	#0
00186Cr 1               prn1:
00186Cr 1               	;------------- divide tmp1-tmp4 by 10. Remainder result in A
00186Cr 1  A2 20        	ldx	#32
00186Er 1  A9 00        	lda	#0
001870r 1  06 rr        dv1:	asl	tmp1
001872r 1  26 rr        	rol	tmp2
001874r 1  26 rr        	rol	tmp3
001876r 1  26 rr        	rol	tmp4
001878r 1  2A           	rol	a
001879r 1  C9 0A        	cmp	#10
00187Br 1  90 04        	bcc	dv2
00187Dr 1  E9 0A        	sbc	#10
00187Fr 1  E6 rr        	inc	tmp1
001881r 1  CA           dv2:	dex
001882r 1  D0 EC        	bne	dv1
001884r 1               	;-------------
001884r 1  18           	clc
001885r 1  69 30        	adc	#'0'
001887r 1  48           	pha
001888r 1  C8           	iny
001889r 1  A5 rr        	lda	tmp1
00188Br 1  05 rr        	ora	tmp2
00188Dr 1  05 rr        	ora	tmp3
00188Fr 1  05 rr        	ora	tmp4
001891r 1  D0 D9        	bne	prn1
001893r 1               	;-------------
001893r 1  68           prn2:	pla
001894r 1  20 rr rr     	jsr	cout
001897r 1  88           	dey
001898r 1  D0 F9        	bne	prn2
00189Ar 1  68           	pla
00189Br 1  A8           	tay
00189Cr 1  68           	pla
00189Dr 1  AA           	tax
00189Er 1  60           	rts
00189Fr 1               
00189Fr 1               ; ------------------------------------------------------------------------
00189Fr 1               ; ------------------------------------------------------------------------
00189Fr 1               ;	Dissasembler
00189Fr 1               	.include "dissa.s"
00189Fr 2               ; ------------------------------------------------------------------------
00189Fr 2               ; 			Disassemble a single OP-code
00189Fr 2               ; ------------------------------------------------------------------------
00189Fr 2               	.export	dissaOP
00189Fr 2               dissaOP:
00189Fr 2  A5 rr        	lda	ptr1+1		; print address
0018A1r 2  20 rr rr     	jsr	prthex
0018A4r 2  A5 rr        	lda	ptr1
0018A6r 2  20 rr rr     	jsr	prthex
0018A9r 2  A9 20        	lda	#' '
0018ABr 2  20 rr rr     	jsr	cout
0018AEr 2  A0 00        	ldy	#0
0018B0r 2  B1 rr        	lda	(ptr1),y	; get OP-code
0018B2r 2  AA           	tax
0018B3r 2  20 rr rr     	jsr	prthex	; print first byte of instruction
0018B6r 2  A9 20        	lda	#' '
0018B8r 2  20 rr rr     	jsr	cout
0018BBr 2               
0018BBr 2  A9 40        	lda	#$40
0018BDr 2  3D rr rr     	and	optbl1,x
0018C0r 2  F0 0B        	beq	dissa1
0018C2r 2  C8           	iny
0018C3r 2  B1 rr        	lda	(ptr1),y
0018C5r 2  20 rr rr     	jsr	prthex	; print second byte
0018C8r 2  A9 20        	lda	#' '
0018CAr 2  20 rr rr     	jsr	cout
0018CDr 2  BD rr rr     dissa1:	lda	optbl1,x
0018D0r 2  10 06        	bpl	dissa2
0018D2r 2  C8           	iny
0018D3r 2  B1 rr        	lda	(ptr1),y
0018D5r 2  20 rr rr     	jsr	prthex	; print third byte
0018D8r 2  A9 09        dissa2:	lda	#9	; TAB
0018DAr 2  20 rr rr     	jsr	cout
0018DDr 2  BD rr rr     	lda	optbl2,x	; offset to mnemonic
0018E0r 2  AA           	tax
0018E1r 2               
0018E1r 2  A0 03        	ldy	#3
0018E3r 2               dissa25:
0018E3r 2  BD rr rr     	lda	nmtbl,x
0018E6r 2  20 rr rr     	jsr	cout
0018E9r 2  E8           	inx
0018EAr 2  88           	dey
0018EBr 2  D0 F6        	bne	dissa25
0018EDr 2               
0018EDr 2  A9 20        	lda	#' '
0018EFr 2  20 rr rr     	jsr	cout
0018F2r 2               
0018F2r 2  A0 00        	ldy	#0
0018F4r 2  B1 rr        	lda	(ptr1),y
0018F6r 2  AA           	tax
0018F7r 2  BD rr rr     	lda	optbl1,x
0018FAr 2  29 3F        	and	#$3F		; offset to address mode
0018FCr 2  AA           	tax
0018FDr 2               
0018FDr 2  BD rr rr     adml1:	lda	admtab,x
001900r 2  F0 50        	beq	adml9
001902r 2  C9 78        	cmp	#'x'
001904r 2  D0 11        	bne	adml2
001906r 2  C8           	iny
001907r 2  C8           	iny
001908r 2  B1 rr        	lda	(ptr1),y
00190Ar 2  20 rr rr     	jsr	prthex
00190Dr 2  88           	dey
00190Er 2  B1 rr        	lda	(ptr1),y
001910r 2  20 rr rr     	jsr	prthex
001913r 2  C8           	iny
001914r 2  4C rr rr     	jmp	adml5
001917r 2  C9 68        adml2:	cmp	#'h'
001919r 2  D0 09        	bne	adml3
00191Br 2  C8           	iny
00191Cr 2  B1 rr        	lda	(ptr1),y
00191Er 2  20 rr rr     	jsr	prthex
001921r 2  4C rr rr     	jmp	adml5
001924r 2  C9 72        adml3:	cmp	#'r'
001926r 2  D0 24        	bne	adml4
001928r 2  E6 rr        	inc	ptr1
00192Ar 2  D0 02        	bne	adml31
00192Cr 2  E6 rr        	inc	ptr1+1
00192Er 2  B1 rr        adml31:	lda	(ptr1),y
001930r 2  38           	sec
001931r 2  10 11        	bpl	adml35
001933r 2  65 rr        	adc	ptr1
001935r 2  48           	pha
001936r 2  A9 FF        	lda	#$FF
001938r 2  65 rr        adml33:	adc	ptr1+1
00193Ar 2  20 rr rr     	jsr	prthex
00193Dr 2  68           	pla
00193Er 2  20 rr rr     	jsr	prthex
001941r 2  4C rr rr     	jmp	adml5
001944r 2  65 rr        adml35: adc	ptr1
001946r 2  48           	pha
001947r 2  A9 00        	lda	#$00
001949r 2  4C rr rr     	jmp	adml33
00194Cr 2               
00194Cr 2  20 rr rr     adml4:	jsr	cout
00194Fr 2  E8           adml5:	inx
001950r 2  D0 AB        	bne	adml1
001952r 2               
001952r 2  38           adml9:	sec			; update pointer
001953r 2  98           	tya
001954r 2  65 rr        	adc	ptr1
001956r 2  85 rr        	sta	ptr1
001958r 2  A5 rr        	lda	ptr1+1
00195Ar 2  69 00        	adc	#0
00195Cr 2  85 rr        	sta	ptr1+1
00195Er 2  60           	rts
00195Fr 2               
00195Fr 2               admtab:
00195Fr 2  41           admAcc:	.byte "A"
001960r 2  00           admImp:	.byte 0
001961r 2  23           admImm:	.byte "#"
001962r 2  68 00        admZP:	.byte "h",0
001964r 2  68 2C 58 00  admZPX:	.byte "h,X",0
001968r 2  68 2C 59 00  admZPY:	.byte "h,Y",0
00196Cr 2  28 68 2C 58  admIndX:	.byte "(h,X)",0
001970r 2  29 00        
001972r 2  28 68 29 2C  admIndY:	.byte "(h),Y",0
001976r 2  59 00        
001978r 2  72 00        admRel:	.byte "r",0
00197Ar 2  78 00        admAbs:	.byte "x",0
00197Cr 2  78 2C 58 00  admAbsX:	.byte "x,X",0
001980r 2  78 2C 59 00  admAbsY:	.byte "x,Y",0
001984r 2  28 78 29 00  admInd:	.byte"(x)",0
001988r 2               
001988r 2               optbl1:
001988r 2  01 4D 01     	.byte $00+admImp-admtab, $40+admIndX-admtab, $00+admImp-admtab
00198Br 2  01 01 43     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admZP-admtab
00198Er 2  43 01 01     	.byte $40+admZP-admtab, $00+admImp-admtab, $00+admImp-admtab
001991r 2  42 00 01     	.byte $40+admImm-admtab, $00+admAcc-admtab, $00+admImp-admtab
001994r 2  01 DB DB     	.byte $00+admImp-admtab, $C0+admAbs-admtab, $C0+admAbs-admtab
001997r 2  01 59 53     	.byte $00+admImp-admtab, $40+admRel-admtab, $40+admIndY-admtab
00199Ar 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
00199Dr 2  45 45 01     	.byte $40+admZPX-admtab, $40+admZPX-admtab, $00+admImp-admtab
0019A0r 2  01 E1 01     	.byte $00+admImp-admtab, $C0+admAbsY-admtab, $00+admImp-admtab
0019A3r 2  01 01 DD     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsX-admtab
0019A6r 2  DD 01 DB     	.byte $C0+admAbsX-admtab, $00+admImp-admtab, $C0+admAbs-admtab
0019A9r 2  4D 01 01     	.byte $40+admIndX-admtab, $00+admImp-admtab, $00+admImp-admtab
0019ACr 2  43 43 43     	.byte $40+admZP-admtab, $40+admZP-admtab, $40+admZP-admtab
0019AFr 2  01 01 42     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admImm-admtab
0019B2r 2  00 01 DB     	.byte $00+admAcc-admtab, $00+admImp-admtab, $C0+admAbs-admtab
0019B5r 2  DB DB 01     	.byte $C0+admAbs-admtab, $C0+admAbs-admtab, $00+admImp-admtab
0019B8r 2  59 53 01     	.byte $40+admRel-admtab, $40+admIndY-admtab, $00+admImp-admtab
0019BBr 2  01 01 45     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admZPX-admtab
0019BEr 2  45 01 01     	.byte $40+admZPX-admtab, $00+admImp-admtab, $00+admImp-admtab
0019C1r 2  E1 01 01     	.byte $C0+admAbsY-admtab, $00+admImp-admtab, $00+admImp-admtab
0019C4r 2  01 DD DD     	.byte $00+admImp-admtab, $C0+admAbsX-admtab, $C0+admAbsX-admtab
0019C7r 2  01 01 4D     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admIndX-admtab
0019CAr 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
0019CDr 2  43 43 01     	.byte $40+admZP-admtab, $40+admZP-admtab, $00+admImp-admtab
0019D0r 2  01 42 00     	.byte $00+admImp-admtab, $40+admImm-admtab, $00+admAcc-admtab
0019D3r 2  01 DB DB     	.byte $00+admImp-admtab, $C0+admAbs-admtab, $C0+admAbs-admtab
0019D6r 2  DB 01 59     	.byte $C0+admAbs-admtab, $00+admImp-admtab, $40+admRel-admtab
0019D9r 2  53 01 01     	.byte $40+admIndY-admtab, $00+admImp-admtab, $00+admImp-admtab
0019DCr 2  01 45 45     	.byte $00+admImp-admtab, $40+admZPX-admtab, $40+admZPX-admtab
0019DFr 2  01 01 E1     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsY-admtab
0019E2r 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
0019E5r 2  DD DD 01     	.byte $C0+admAbsX-admtab, $C0+admAbsX-admtab, $00+admImp-admtab
0019E8r 2  01 4D 01     	.byte $00+admImp-admtab, $40+admIndX-admtab, $00+admImp-admtab
0019EBr 2  01 01 43     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admZP-admtab
0019EEr 2  43 01 01     	.byte $40+admZP-admtab, $00+admImp-admtab, $00+admImp-admtab
0019F1r 2  42 00 01     	.byte $40+admImm-admtab, $00+admAcc-admtab, $00+admImp-admtab
0019F4r 2  E5 DB DB     	.byte $C0+admInd-admtab, $C0+admAbs-admtab, $C0+admAbs-admtab
0019F7r 2  01 59 53     	.byte $00+admImp-admtab, $40+admRel-admtab, $40+admIndY-admtab
0019FAr 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
0019FDr 2  45 45 01     	.byte $40+admZPX-admtab, $40+admZPX-admtab, $00+admImp-admtab
001A00r 2  01 E1 01     	.byte $00+admImp-admtab, $C0+admAbsY-admtab, $00+admImp-admtab
001A03r 2  01 01 DD     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsX-admtab
001A06r 2  DD 01 01     	.byte $C0+admAbsX-admtab, $00+admImp-admtab, $00+admImp-admtab
001A09r 2  4D 01 01     	.byte $40+admIndX-admtab, $00+admImp-admtab, $00+admImp-admtab
001A0Cr 2  43 43 43     	.byte $40+admZP-admtab, $40+admZP-admtab, $40+admZP-admtab
001A0Fr 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
001A12r 2  01 01 DB     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbs-admtab
001A15r 2  DB DB 01     	.byte $C0+admAbs-admtab, $C0+admAbs-admtab, $00+admImp-admtab
001A18r 2  59 53 01     	.byte $40+admRel-admtab, $40+admIndY-admtab, $00+admImp-admtab
001A1Br 2  01 45 45     	.byte $00+admImp-admtab, $40+admZPX-admtab, $40+admZPX-admtab
001A1Er 2  49 01 01     	.byte $40+admZPY-admtab, $00+admImp-admtab, $00+admImp-admtab
001A21r 2  E1 01 01     	.byte $C0+admAbsY-admtab, $00+admImp-admtab, $00+admImp-admtab
001A24r 2  01 DD 01     	.byte $00+admImp-admtab, $C0+admAbsX-admtab, $00+admImp-admtab
001A27r 2  01 42 4D     	.byte $00+admImp-admtab, $40+admImm-admtab, $40+admIndX-admtab
001A2Ar 2  42 01 43     	.byte $40+admImm-admtab, $00+admImp-admtab, $40+admZP-admtab
001A2Dr 2  43 43 01     	.byte $40+admZP-admtab, $40+admZP-admtab, $00+admImp-admtab
001A30r 2  01 42 01     	.byte $00+admImp-admtab, $40+admImm-admtab, $00+admImp-admtab
001A33r 2  01 DB DB     	.byte $00+admImp-admtab, $C0+admAbs-admtab, $C0+admAbs-admtab
001A36r 2  DB 01 59     	.byte $C0+admAbs-admtab, $00+admImp-admtab, $40+admRel-admtab
001A39r 2  53 01 01     	.byte $40+admIndY-admtab, $00+admImp-admtab, $00+admImp-admtab
001A3Cr 2  45 45 49     	.byte $40+admZPX-admtab, $40+admZPX-admtab, $40+admZPY-admtab
001A3Fr 2  01 01 E1     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsY-admtab
001A42r 2  01 01 DD     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsX-admtab
001A45r 2  DD E1 01     	.byte $C0+admAbsX-admtab, $C0+admAbsY-admtab, $00+admImp-admtab
001A48r 2  42 4D 01     	.byte $40+admImm-admtab, $40+admIndX-admtab, $00+admImp-admtab
001A4Br 2  01 43 43     	.byte $00+admImp-admtab, $40+admZP-admtab, $40+admZP-admtab
001A4Er 2  43 01 01     	.byte $40+admZP-admtab, $00+admImp-admtab, $00+admImp-admtab
001A51r 2  42 01 01     	.byte $40+admImm-admtab, $00+admImp-admtab, $00+admImp-admtab
001A54r 2  DB DB DB     	.byte $C0+admAbs-admtab, $C0+admAbs-admtab, $C0+admAbs-admtab
001A57r 2  01 59 53     	.byte $00+admImp-admtab, $40+admRel-admtab, $40+admIndY-admtab
001A5Ar 2  01 01 01     	.byte $00+admImp-admtab, $00+admImp-admtab, $00+admImp-admtab
001A5Dr 2  45 45 01     	.byte $40+admZPX-admtab, $40+admZPX-admtab, $00+admImp-admtab
001A60r 2  01 E1 01     	.byte $00+admImp-admtab, $C0+admAbsY-admtab, $00+admImp-admtab
001A63r 2  01 01 DD     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbsX-admtab
001A66r 2  DD 01 42     	.byte $C0+admAbsX-admtab, $00+admImp-admtab, $40+admImm-admtab
001A69r 2  4D 01 01     	.byte $40+admIndX-admtab, $00+admImp-admtab, $00+admImp-admtab
001A6Cr 2  43 43 43     	.byte $40+admZP-admtab, $40+admZP-admtab, $40+admZP-admtab
001A6Fr 2  01 01 42     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admImm-admtab
001A72r 2  01 01 DB     	.byte $00+admImp-admtab, $00+admImp-admtab, $C0+admAbs-admtab
001A75r 2  DB DB 01     	.byte $C0+admAbs-admtab, $C0+admAbs-admtab, $00+admImp-admtab
001A78r 2  59 53 01     	.byte $40+admRel-admtab, $40+admIndY-admtab, $00+admImp-admtab
001A7Br 2  01 01 45     	.byte $00+admImp-admtab, $00+admImp-admtab, $40+admZPX-admtab
001A7Er 2  45 01 01     	.byte $40+admZPX-admtab, $00+admImp-admtab, $00+admImp-admtab
001A81r 2  E1 01 01     	.byte $C0+admAbsY-admtab, $00+admImp-admtab, $00+admImp-admtab
001A84r 2  01 DD DD     	.byte $00+admImp-admtab, $C0+admAbsX-admtab, $C0+admAbsX-admtab
001A87r 2  01           	.byte $00+admImp-admtab
001A88r 2               optbl2:
001A88r 2  1E 66 A8 A8  	.byte $1E,$66,$A8,$A8,$A8,$66,$06,$A8,$6C,$66,$06,$A8,$A8,$66,$06,$A8
001A8Cr 2  A8 66 06 A8  
001A90r 2  6C 66 06 A8  
001A98r 2  1B 66 A8 A8  	.byte $1B,$66,$A8,$A8,$A8,$66,$06,$A8,$27,$66,$A8,$A8,$A8,$66,$06,$A8
001A9Cr 2  A8 66 06 A8  
001AA0r 2  27 66 A8 A8  
001AA8r 2  54 03 A8 A8  	.byte $54,$03,$A8,$A8,$12,$03,$75,$A8,$72,$03,$75,$A8,$12,$03,$75,$A8
001AACr 2  12 03 75 A8  
001AB0r 2  72 03 75 A8  
001AB8r 2  15 03 A8 A8  	.byte $15,$03,$A8,$A8,$A8,$03,$75,$A8,$8D,$03,$A8,$A8,$A8,$03,$75,$A8
001ABCr 2  A8 03 75 A8  
001AC0r 2  8D 03 A8 A8  
001AC8r 2  7B 4B A8 A8  	.byte $7B,$4B,$A8,$A8,$A8,$4B,$63,$A8,$69,$4B,$63,$A8,$51,$4B,$63,$A8
001ACCr 2  A8 4B 63 A8  
001AD0r 2  69 4B 63 A8  
001AD8r 2  21 4B A8 A8  	.byte $21,$4B,$A8,$A8,$A8,$4B,$63,$A8,$2D,$4B,$A8,$A8,$A8,$4B,$63,$A8
001ADCr 2  A8 4B 63 A8  
001AE0r 2  2D 4B A8 A8  
001AE8r 2  7E 00 A8 A8  	.byte $7E,$00,$A8,$A8,$A8,$00,$78,$A8,$6F,$00,$78,$A8,$51,$00,$78,$A8
001AECr 2  A8 00 78 A8  
001AF0r 2  6F 00 78 A8  
001AF8r 2  24 00 A8 A8  	.byte $24,$00,$A8,$A8,$A8,$00,$78,$A8,$93,$00,$A8,$A8,$A8,$00,$78,$A8
001AFCr 2  A8 00 78 A8  
001B00r 2  93 00 A8 A8  
001B08r 2  A8 84 A8 A8  	.byte $A8,$84,$A8,$A8,$8A,$84,$87,$A8,$42,$A8,$9C,$A8,$8A,$84,$87,$A8
001B0Cr 2  8A 84 87 A8  
001B10r 2  42 A8 9C A8  
001B18r 2  09 84 A8 A8  	.byte $09,$84,$A8,$A8,$8A,$84,$87,$A8,$9F,$84,$A5,$A8,$A8,$84,$A8,$A8
001B1Cr 2  8A 84 87 A8  
001B20r 2  9F 84 A5 A8  
001B28r 2  60 57 5D A8  	.byte $60,$57,$5D,$A8,$60,$57,$5D,$A8,$99,$57,$96,$A8,$60,$57,$5D,$A8
001B2Cr 2  60 57 5D A8  
001B30r 2  99 57 96 A8  
001B38r 2  0C 57 A8 A8  	.byte $0C,$57,$A8,$A8,$60,$57,$5D,$A8,$30,$57,$A2,$A8,$60,$57,$5D,$A8
001B3Cr 2  60 57 5D A8  
001B40r 2  30 57 A2 A8  
001B48r 2  39 33 A8 A8  	.byte $39,$33,$A8,$A8,$39,$33,$3C,$A8,$48,$33,$3F,$A8,$39,$33,$3C,$A8
001B4Cr 2  39 33 3C A8  
001B50r 2  48 33 3F A8  
001B58r 2  18 33 A8 A8  	.byte $18,$33,$A8,$A8,$A8,$33,$3C,$A8,$2A,$33,$A8,$A8,$A8,$33,$3C,$A8
001B5Cr 2  A8 33 3C A8  
001B60r 2  2A 33 A8 A8  
001B68r 2  36 81 A8 A8  	.byte $36,$81,$A8,$A8,$36,$81,$4E,$A8,$45,$81,$5A,$A8,$36,$81,$4E,$A8
001B6Cr 2  36 81 4E A8  
001B70r 2  45 81 5A A8  
001B78r 2  0F 81 A8 A8  	.byte $0F,$81,$A8,$A8,$A8,$81,$4E,$A8,$90,$81,$A8,$A8,$A8,$81,$4E,$A8
001B7Cr 2  A8 81 4E A8  
001B80r 2  90 81 A8 A8  
001B88r 2               nmtbl:
001B88r 2  41 44 43 41  	.byte "ADC","AND","ASL","BCC","BCS","BEQ","BIT","BMI"
001B8Cr 2  4E 44 41 53  
001B90r 2  4C 42 43 43  
001BA0r 2  42 4E 45 42  	.byte "BNE","BPL","BRK","BVC","BVS","CLC","CLD","CLI"
001BA4r 2  50 4C 42 52  
001BA8r 2  4B 42 56 43  
001BB8r 2  43 4C 56 43  	.byte "CLV","CMP","CPX","CPY","DEC","DEX","DEY","INX"
001BBCr 2  4D 50 43 50  
001BC0r 2  58 43 50 59  
001BD0r 2  49 4E 59 45  	.byte "INY","EOR","INC","JMP","JSR","LDA","NOP","LDX"
001BD4r 2  4F 52 49 4E  
001BD8r 2  43 4A 4D 50  
001BE8r 2  4C 44 59 4C  	.byte "LDY","LSR","ORA","PHA","PHP","PLA","PLP","ROL"
001BECr 2  53 52 4F 52  
001BF0r 2  41 50 48 41  
001C00r 2  52 4F 52 52  	.byte "ROR","RTI","RTS","SBC","STA","STX","STY","SEC"
001C04r 2  54 49 52 54  
001C08r 2  53 53 42 43  
001C18r 2  53 45 44 53  	.byte "SED","SEI","TAX","TAY","TXA","TYA","TSX","TXS"
001C1Cr 2  45 49 54 41  
001C20r 2  58 54 41 59  
001C30r 2  3F 3F 3F     	.byte "???"
001C33r 2               
001C33r 2               
001C33r 1               
001C33r 1               ; ------------------------------------------------------------------------
001C33r 1               ; ------------------------------------------------------------------------
001C33r 1               ;	ASCII strings
001C33r 1               ; ------------------------------------------------------------------------
001C33r 1               ; ------------------------------------------------------------------------
001C33r 1               	.export	msgs
001C33r 1               msgs:
001C33r 1  20 2D 20 44  msgboot:	.byte   " - DRM65 by J. Arias -  Select Image:",10,10,0
001C37r 1  52 4D 36 35  
001C3Br 1  20 62 79 20  
001C5Br 1  20 20 20 20  msgcls:		.asciiz "                "
001C5Fr 1  20 20 20 20  
001C63r 1  20 20 20 20  
001C6Cr 1  20 20 20 2A  msgBRK:		.asciiz "   *** BRK ***"
001C70r 1  2A 2A 20 42  
001C74r 1  52 4B 20 2A  
001C7Br 1  50 43 3D 00  msgPC:		.asciiz "PC="
001C7Fr 1  20 20 50 3D  msgP:		.asciiz "  P="
001C83r 1  00           
001C84r 1  4E 56 72 42  msgflags:	.asciiz "NVrBDIZC"
001C88r 1  44 49 5A 43  
001C8Cr 1  00           
001C8Dr 1  20 20 41 3D  msgA:		.asciiz "  A="
001C91r 1  00           
001C92r 1  20 20 58 3D  msgX:		.asciiz "  X="
001C96r 1  00           
001C97r 1  20 20 59 3D  msgY:		.asciiz "  Y="
001C9Br 1  00           
001C9Cr 1  20 20 53 3D  msgS:		.asciiz "  S="
001CA0r 1  00           
001CA1r 1  2D 20 00     msgspm:		.asciiz "- "
001CA4r 1  1B 5B 34 38  msgtab47:	.byte 27,"[48G",0
001CA8r 1  47 00        
001CAAr 1  5A 65 72 6F  msgZP:		.byte "Zero Page Vars",0
001CAEr 1  20 50 61 67  
001CB2r 1  65 20 56 61  
001CB9r 1  53 74 61 63  msgstack:	.byte "Stack: ",0
001CBDr 1  6B 3A 20 00  
001CC1r 1  68 63 73 6E  msgmonprom:	.byte "hcsnrbmdgtpaxye >",0
001CC5r 1  72 62 6D 64  
001CC9r 1  67 74 70 61  
001CD3r 1  1B 5B 4A 00  msgclrrest:	.byte 27,"[J",0
001CD7r 1  1B 5B 32 4B  msglcls:	.byte 27,"[2K",0
001CDBr 1  00           
001CDCr 1  1B 5B 48 1B  msghome:	.byte 27,"[H",27,"[K",0
001CE0r 1  5B 4B 00     
001CE3r 1  1B 5B 32 39  msgtab28:	.byte 27,"[29G",0
001CE7r 1  47 00        
001CE9r 1  08 08 08 08  msgback4:	.byte	8,8,8,8,0
001CEDr 1  00           
001CEEr 1  0A 3C 4D 4F  msgpause:	.byte 10,"<MONpause>",0
001CF2r 1  4E 70 61 75  
001CF6r 1  73 65 3E 00  
001CFAr 1  20 20 20 2A  msgNMI:		.asciiz "   *** NMI ***"
001CFEr 1  2A 2A 20 4E  
001D02r 1  4D 49 20 2A  
001D09r 1               
001D09r 1  0A 09 68 09  monhelp:	.byte 10,9,"h",9,"Help",10
001D0Dr 1  48 65 6C 70  
001D11r 1  0A           
001D12r 1  09 63 09 43  		.byte 9,"c",9,"Continue",10
001D16r 1  6F 6E 74 69  
001D1Ar 1  6E 75 65 0A  
001D1Er 1  09 73 09 53  		.byte 9,"s",9,"Single step",10
001D22r 1  69 6E 67 6C  
001D26r 1  65 20 73 74  
001D2Dr 1  09 6E 09 4E  		.byte 9,"n",9,"Next instr",10
001D31r 1  65 78 74 20  
001D35r 1  69 6E 73 74  
001D3Br 1  09 72 09 65  		.byte 9,"r",9,"ends Routine",10
001D3Fr 1  6E 64 73 20  
001D43r 1  52 6F 75 74  
001D4Br 1  09 62 20 3C  		.byte 9,"b <adr>",9,"Break at",10
001D4Fr 1  61 64 72 3E  
001D53r 1  09 42 72 65  
001D5Dr 1  09 6D 20 3C  		.byte 9,"m <adr>",9,"dump Mem",10
001D61r 1  61 64 72 3E  
001D65r 1  09 64 75 6D  
001D6Fr 1  09 64 20 3C  		.byte 9,"d <adr>",9,"Dissasemble",10
001D73r 1  61 64 72 3E  
001D77r 1  09 44 69 73  
001D84r 1  09 67 20 3C  		.byte 9,"g <adr>",9,"Goto at",10
001D88r 1  61 64 72 3E  
001D8Cr 1  09 47 6F 74  
001D95r 1  09 74 20 3C  		.byte 9,"t <adr>",9,"Trace at",10
001D99r 1  61 64 72 3E  
001D9Dr 1  09 54 72 61  
001DA7r 1  09 70 20 6E  		.byte 9,"p nn",9,"edit P",10
001DABr 1  6E 09 65 64  
001DAFr 1  69 74 20 50  
001DB4r 1  09 61 20 6E  		.byte 9,"a nn",9,"edit A",10
001DB8r 1  6E 09 65 64  
001DBCr 1  69 74 20 41  
001DC1r 1  09 78 20 6E  		.byte 9,"x nn",9,"edit X",10
001DC5r 1  6E 09 65 64  
001DC9r 1  69 74 20 58  
001DCEr 1  09 79 20 6E  		.byte 9,"y nn",9,"edit Y",10
001DD2r 1  6E 09 65 64  
001DD6r 1  69 74 20 59  
001DDBr 1  09 65 20 3C  		.byte 9,"e <adr>",9,"Edit mem",10
001DDFr 1  61 64 72 3E  
001DE3r 1  09 45 64 69  
001DEDr 1  09 73 70 63  		.byte 9,"spc",9,"redraw",10
001DF1r 1  09 72 65 64  
001DF5r 1  72 61 77 0A  
001DF9r 1  09 65 73 63  		.byte 9,"esc",9,"abort",0
001DFDr 1  09 61 62 6F  
001E01r 1  72 74 00     
001E04r 1               
001E04r 1               
001E04r 1               ;---------------------- Just to measure code lenght ----------------------
001E04r 1               	.export endtxt
001E04r 1               endtxt:
001E04r 1               
001E04r 1               	.segment	"JUMPT"
000000r 1               ; jump table with I/O routines
000000r 1  4C rr rr     	jmp	str0		; $FF00 (-256)
000003r 1  4C rr rr     	jmp	uart_putchar	; $FF03 (-253)
000006r 1  4C rr rr     	jmp	uart_getch	; $FF06 (-250)
000009r 1  4C rr rr     	jmp	cgets		; $FF09 (-247)
00000Cr 1  4C rr rr     	jmp	prthex		; $FF0C (-244)
00000Fr 1               
00000Fr 1  4C rr rr     	jmp	cls		; $FF0F (-241)
000012r 1  4C rr rr     	jmp	gputch		; $FF12 (-238)
000015r 1  4C rr rr     	jmp	gputs		; $FF15 (-235)
000018r 1  4C rr rr     	jmp	setpixel	; $FF18 (-232)
00001Br 1  4C rr rr     	jmp	clrpixel	; $FF1B (-229)
00001Er 1  4C rr rr     	jmp	tglpixel	; $FF1E (-226)
000021r 1  4C rr rr     	jmp	putpixel4	; $FF21 (-223)
000024r 1               
000024r 1  4C rr rr     	jmp	cout		; $FF24 (-220)
000027r 1  4C rr rr     	jmp	cin		; $FF27 (-217)
00002Ar 1  4C rr rr     	jmp	cinnb		; $FF2A (-214)
00002Dr 1  4C rr rr     	jmp	spibyte		; $FF2D	(-211)
000030r 1               
000030r 1               ; ------------------------------------------------------------------------
000030r 1               ; ------------------------------------------------------------------------
000030r 1               ; 	Variables in RAM (not in Zero Page)
000030r 1               ; ------------------------------------------------------------------------
000030r 1               ; ------------------------------------------------------------------------
000030r 1               	.segment	"BSS"
000000r 1               	.export	urxvec, utxvec, hsynvec, vsynvec
000000r 1  xx xx xx xx  sch:		.res	8	; $200 Espacio temporal para variables de "cin"
000004r 1  xx xx xx xx  
000008r 1  xx xx        urxvec:		.res	2	; $208 Vector IRQ UART RX
00000Ar 1  xx xx        utxvec:		.res	2	; $20A Vector IRQ UART TX
00000Cr 1  xx xx        vsynvec:	.res	2	; $20C Vector IRQ VSYN
00000Er 1  xx xx        hsynvec:	.res	2	; $20E Vector IRQ HSYN
000010r 1  xx xx xx xx  param:		.res	8	; $210 Espacio para par√°metros
000014r 1  xx xx xx xx  
000018r 1               
000018r 1               
000018r 1               ; ------------------------------------------------------------------------
000018r 1               ; ------------------------------------------------------------------------
000018r 1               ; 				Vectors
000018r 1               ; ------------------------------------------------------------------------
000018r 1               ; ------------------------------------------------------------------------
000018r 1               	.segment	"VECTORS"
000000r 1               	.export	vectorhNMI, vectorhRES, vectorhIRQBRK
000000r 1               vectorhNMI:
000000r 1  rr           	.byte <_nmi	;NMI
000001r 1  rr           	.byte >_nmi
000002r 1               vectorhRES:
000002r 1  rr           	.byte <_start	;RESET
000003r 1  rr           	.byte >_start
000004r 1               vectorhIRQBRK:
000004r 1  rr           	.byte <_irqbrk	;IRQ/BRK
000005r 1  rr           	.byte >_irqbrk
000005r 1               
